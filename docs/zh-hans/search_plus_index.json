{"ChangeLog.html":{"url":"ChangeLog.html","title":"版本更新日志","keywords":"","body":"ChangeLogs 2021.09.01: Align websocket and V3 balance response data structure. ERC20 balance data no change. Websocket account topic subscription data changed: The topic changes to {\"topic\": \"account\", \"accountId\": \"10005\", \"v3\": true}, and 2 response fields changed: totalAmount -> total amountLocked -> locked to align with the V3 REST query balance API response. \"v3\" flag in subscription is optional and back compatible with previous subscription message. Refine block generation websocket notification, add verbose flag to get detail info. Add hashes filter to L2 tx queries. getStorageId logic changed, a new flag maxNext to back compatible with previous behavior. 2021.09.20: Make /api/v3/user/transfers a general transfer query by hash without accountId. "},"./":{"url":"./","title":"路印","keywords":"","body":"关于路印 路印协议和路印交易所 路印协议是第一个基于zkRollup技术的去中心化交易协议。使用路印协议，您可以搭建一个不托管用户交易资产，基于订单撮合，高性能的去中心化交易所。由于采用了zkRollup这种Layer-2扩容技术，路印协议在以太坊不扩容的前提下，也可以每秒清算超过2000笔交易。 如果您想了解路印协议的设计和技术细节，请访问路印协议官网：https://loopring.org。 路印交易所是第一个使用路印协议搭建的去中心化交易平台。其网页应用的地址是：Loopring.io。路印交易所目前的版本是beta1，采用了路印协议3.6版本。其以太坊主网合约的地址为：0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4。该地址对应的永久ENS为：exchange2.loopring.eth。 路印交易所并不是路印协议上唯一的交易所，WeDEX.io也是建立在路印协议的基础上。在您使用不同的路印去中心化交易所前，您需要明确知道您是在和哪个交易所打交道。路印协议本身的智能合约并不与用户直接交互，只为各个交易所合约提供包括用户注册，充值提现，交易清算在内的业务逻辑。 优势 路印协议保障了用户充值到交易所的资产不会被任何人挪用。即使交易所网站关闭或者运营者失联，也可以通过使用默克尔证明，在锁定期过后将全部资产提现出来。 路印协议不保障撮合的效率和公平性。撮合是由路印交易所的中继系统完成的，而中继是整个解决方案里面很中心化的部分。基于同样版本协议的不同交易所，可以采用不同的中继架构，因此用户可以根据不同交易所中继的效率和公平性，选择使用不同的交易所。路印协议保障中继撮合过程必须遵守一定的规则，但对中继没有任何服务质量的要求。 路印中继是闭源开发的，目前吞吐量大约是每秒200笔交易。 架构 路印交易所的整体架构如下图所示： 您需要了解的一些关键点包括： 路印的API除了提供读取中继数据功能，主要用来处理用户和客户端的链下请求（offchain requests），包括提交订单，取消订单，和提现。 用户账号注册，修改密码，充值必须通过以太坊交易来发起请求（onchain requests）。用户也可以通过以太坊交易，提交提现请求。路印协议要求交易所必须无条件按顺序处理所有链上请求。 路印具有与中心化交易所相似的高性能交易体验，这主要得益于中继的批处理能力。路印仅把以太坊作为数据存储层和零知识证明的验证层，不在以太坊上做与交易清结算相关的任何计算。 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"术语","keywords":"","body":"术语 DEX Decenralized EXchange的简称，即去中心化交易所。路印交易所是搭建在以太坊上的去中心化交易所。 零知识证明。 一种证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的一种技术。 中继 路印交易所的后台系统，负责订单操作，交易撮合，零知识证明生成等。 链上请求 通过以太坊交易发送给路印交易所智能合约的请求。 链下请求 通过路印中继的API，绕过以太坊区块链，直接发送给路印交易所的请求。 基础通证（Base Token） 指一个交易对的交易对象。如LRC-ETH交易对中，LRC即为该交易对的基础通证。 计价通证（Quote Token） 指一个交易对的计价通证。如LRC-ETH交易对中，ETH即为该交易对的计价通证。 Size 指订单的基础通证数量。对于2000LRC 买 1EHT的订单，Size为2000。 Volume 指订单的计价通证数量。对于2000LRC 买 1EHT的订单，Volume为1。 EdDSA 路印协议用于对链下请求做签名的算法。路印交易所的链上请求需要用户使用以太坊地址对应的ECDSA私钥签名，而链下请求则需要使用交易账号的EdDSA私钥来签名。 "},"basics/general_info.html":{"url":"basics/general_info.html","title":"基本信息","keywords":"","body":"General API Information Endpoints The base mainnet endpoint is: https://api3.loopring.io The base testnet endpoint is: https://uat3.loopring.io All endpoints return either a JSON object or array. HTTP Return Codes HTTP 400(BAD_REQUEST) return codes are used for malformed requests; the issue is on the sender's side. HTTP 429 return code is used when breaking a request rate limit. HTTP 5XX return codes are used for internal errors; the issue is on Loopring's side. Error Codes If there is an error, the API will return an error with a message of the reason. { \"code\": 100206, \"msg\": \"Invalid signature.\" } Specific error codes and messages are defined in Error Codes. General Information on Endpoints For GET endpoints, parameters must be sent as a query string. For POST, PUT, and DELETE endpoints, the parameters must be in the request body with content type application/json. LIMITS Each API has its own limit control, refer to specific API page for the configuation. A 429 will be returned when rate limit is violated. "},"basics/key_mgmt.html":{"url":"basics/key_mgmt.html","title":"秘钥管理","keywords":"","body":"秘钥管理 使用路印API之前，您需要了解如何获取和更改您账号的EdDSA公秘钥对和ApiKey。调用API时，ApiKey需要通过HTTP头传递给路印的中继；EdDSA秘钥用来在客户端对链下请求做数字签名。 获取 首先您需要在路印交易所的网页界面（Loopring.io）注册一个账号。注册好账号之后，您可以使用『导出账号』功能将账号相关的信息通过JSON格式导出。这些信息包括EdDSA公秘钥对和ApiKey。 导出的JSON看起来应该类似于： { \"exchangeName\": \"LoopringDEX: Beta 1\", \"exchangeAddress\": \"0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777\", \"exchangeId\": 2, \"accountAddress\": \"0xe9577b420d96adfc97ff1e9e0557f8c73d7247fe\", \"accountId\": 12345, \"apiKey\": \"qXJpfTKrF0O5jIDPYIu7YkVgLFbvm5uIgPKBmHP2kBpcdKZjgfFKhIlE8evo9lKa\", \"publicKeyX\": \"20230748339558541226323870947000799026059173889124399831342481595010628000129\", \"publicKeyY\": \"4980637490279511620100245514492532318691849019959343538108355525575855311214\", \"privateKey\": \"1242957328515765470505817310060337585626176314364086438653683782645761561015\" } 其中的前4项是常量，和路印交易所的版本相关；其它数据项和您的账号相关。其中publicKeyX与publicKeyY合起来是您账号的EdDSA公钥，privateKey是EdDSA秘钥。 请您一定妥善保管EdDSA秘钥和ApiKey。如果这些信息不慎泄漏，会导致您资产的丢失。 在任何情况下，路印交易所和其API均不会向您询问EdDSA私钥。 更改 您可以通过路印交易所的『更改密码』功能更改您账号的EdDSA公秘钥对。由于涉及到以太坊交易确认和零知识证明，新的EdDSA公秘钥对需要等待一段才会生效。您可以通过/api/v2/account接口获取账号信息，如果其中的frozen项为true，表明您的账号由于正在更新EdDSA公秘钥对，通过旧的EdDSA公秘钥对和新的EdDSA公秘钥对均无法下单。 如果您通过Loopring.io页面更改密码，您的ApiKey也会被自动更新。另外ApiKey还可以通过路印的API接口更改。 EdDSA派生算法 路印协议对EdDSA的生成方式不做任何限制。在路印交易所，每个账号的EdDSA公秘钥对是由这个账号的以太坊地址和交易密码派生计算出来的。由于地址是公开信息，因此您的交易密码的强度对于您交易资产的安全至关重要。 如果您使用路印交易所网站来设置交易密码，您的密码应该足够强大，无需担心被暴力破解；否则您需要特别注意不要使用简单密码。和中心化交易所不同，暴力破解您的EdDSA秘钥可以不必经过路印的中继系统 - 您的EdDSA公钥存储在以太坊上，黑客可以将其读取出来做暴力破解的对比参照。 EdDSA的派生算法如下所示： seed = keccakHash('LOOPRING' + address.toLowerCase() + keccakHash(password)) keyPair = myEdDSAGenerator.generate(seed) 其中keccakHash返回kecca256运算后的16进制字符串。 ApiKey生成方式 ApiKey是在注册账号时由路印中继随机生成的一个全局唯一字符串，与您的账号一对一绑定。 "},"basics/signing.html":{"url":"basics/signing.html","title":"请求签名","keywords":"","body":"请求签名 路印API涉及到两种不同类别的签名。一种是通用API请求签名，用来验证API调用被用户授权；另一种是路印协议链下请求签名，用来向路印协议证明链下请求被用户授权。我们分别对这两种类别做个说明。 通用API请求签名 签名生成算法 初始化空字符串signatureBase； 将API请求的HTTP方法字符串追加到signatureBase； 将“＆”字符附加到signatureBase； 将百分号编码后（percent-encoded）后的完整URL路径（不包括“?”和查询参数）追加到signatureBase； 将“＆”字符附加到signatureBase； 初始化空字符串parameterString； 对于GET / DELETE 请求： 将请求里的参数按键的字典顺序升序排序，得到排过序后的键/值对； 将百分号编码后后的键附加到parameterString； 将“=”字符附加到parameterString； 将百分号编码后后的值附加到parameterString； 如果有更多的键/值对，请在parameterString后面附加“＆”字符，并重复上述操作； 对于POST / PUT 请求； 将发送请求的Body JSON字符串附加到parameterString； 将百分号编码后后的parameterString附加到signatureBase； 计算signatureBase的SHA-256哈希值hash； 对hash用账号的私钥privateKey做签名，得到三个值：Rx,Ry, 和S； 将Rx,Ry, 和S通过逗号分隔拼接成最终签名字符串：${Rx},${Ry},${S}。 HTTP Method and URL 请使用大写的HTTP方法： GET POST PUT DELETE URL中请一定包含HTTPS协议头，确保协议头和接入URL全部小写，比如： https://api3.loopring.io/api/v2/apiKey 示例 假设上面的URL包含下列Query参数： https://api3.loopring.io/api/v2/apiKey?publicKeyX=13375450901292179417154974849571793069 911517354720397125027633242680470075859&publicKeyY=133754509012921794171549748495717930 69911517354720397125027633242680470075859&accountId=1 即： 参数名 参数值 publicKeyX 13375450901292179417154974849571793069911517354720397125027633242680470075859 publicKeyY 13375450901292179417154974849571793069911517354720397125027633242680470075859 accountId 1 那么，parameterString应该为： accountId=1&publicKeyX=1337545090129217941715497484957179306991151735472039712502763324 2680470075859&publicKeyY=13375450901292179417154974849571793069911517354720397125027633 242680470075859 signatureBase应该为： GET&https%3A%2F%2Fapi3.loopring.io%2Fapi%2Fv2%2FapiKey&accountId%3D1%26publicKeyX%3D1337 5450901292179417154974849571793069911517354720397125027633242680470075859%26publicKeyY% 3D13375450901292179417154974849571793069911517354720397125027633242680470075859 路印协议链下请求签名 路印协议3.1.1支持“订单”，和“链下提现”两种链下请求。由于这两种链下请求都会造成对交易所默克尔树的修改，通过路印API提交这是两种数据时，必须附带路印协议要求的特殊的签名。 路印协议3.1.1还支持“取消订单”链下请求，但会在后续的3.5版本中将其去掉。因此路印中继不会支持该链下请求。 链下请求签名包括以下步骤： 对请求r（JSON类型）进行规整，生成一个字符串s。 计算s的Poseidon哈希h（见下面章节）。 对h用账号的私钥privateKey做签名，得到三个值：Rx,Ry, 和S（见下面章节）。 将h、Rx、Ry、 和S转换成字符串后合并到r当中（请注意名字的改变）。 { ..., \"hash\": ..., \"signatureRx\": \"16367919966553849834214288740952929086694704883595501207054796240908626703398\", \"signatureRy\": \"5706650945525714138019517276433581394702490352313697178959212750249847059862\", \"signatureS\": \"410675649229327911665390972834008845981102813589085982164606483611508480748\" } 订单签名 订单中一些数据项需要按照特定序列化成一个整数数组，对这个数组计算Poseidon哈希，然后对该哈希做EdDSA签名。 订单的序列化规则，哈希，签名方式必须严格遵循路印协议规范。 下面我们用Python代码做示范： def sign_int_array(privateKey, serialized, t): PoseidonHashParams = poseidon_params( SNARK_SCALAR_FIELD, t, 6, 53, b'poseidon', 5, security_target=128 ) hash = poseidon(serialized, PoseidonHashParams) signedMessage = PoseidonEdDSA.sign(hash, FQ(int(privateKey))) return ({ \"hash\": str(hash), \"signatureRx\": str(signedMessage.sig.R.x), \"signatureRy\": str(signedMessage.sig.R.y), \"signatureS\": str(signedMessage.sig.s), }) def serialize_order(order): return [ int(order[\"exchangeId\"]), int(order[\"orderId\"]), int(order[\"accountId\"]), int(order[\"tokenSId\"]), int(order[\"tokenBId\"]), int(order[\"amountS\"]), int(order[\"amountB\"]), int(order[\"allOrNone\"]==\"true\"), int(order[\"validSince\"]), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"buy\"]==\"true\"), int(order[\"label\"]) ] def sign_order(privateKey, order): serialized = serialize_order(order) signed = sign_int_array(serialized, 14 /* 注意这个t值 */) order.update(signed) 如果您不使用ethsnarks代码仓库计算Poseidon哈希，请一定注意Poseidon参数的配置，保证其与路印协议使用的参数完全一致。否则验证签名会失败。 链下提现签名 目前的路印API还不支持客户端提交链下提现请求。不过我们会很快增加这个API。 下面是链下提现的一个例子： { \"exchangeId\": 2, \"accountId\":100, \"tokenId\": 0, \"amount\": 1000000000000000000, \"feeTokenId\": \"2\", \"amountFee\": 20000000000000000000, \"label\": 0, \"nonce\": 10 } 其中的nonce值必须从0开始，不间断增加。 用Python对其签名的代码如下： def serialize_offchain_withdrawal(withdrawal): return [ int(withdrawal['exchangeId']), int(withdrawal['accountId']), int(withdrawal['tokenId']), int(withdrawal['amount']), int(withdrawal['feeTokenId']), int(withdrawal['amountFee']), int(withdrawal['label']), int(withdrawal['nonce']) ] def sign_offchain_withdrawal(privateKey, offchainWithdrawal): serialized = serialize_offchain_withdrawal(offchainWithdrawal) signed = sign_int_array(serialized, 9 /* 注意这个t值 */) offchainWithdrawal.update(signed) 内部转账签名 内部转账请求中一些数据项需要按照特定序列化成一个整数数组，对这个数组计算Poseidon哈希，然后对该哈希做EdDSA签名。 下面是内部转账的一个例子： { \"exchangeId\": 2, \"sender\":100, \"receiver\":101, \"tokenId\": 0, \"amount\": 1000000000000000000, \"feeTokenId\": 2, \"amountFee\": 20000000000000000000, \"label\": 0, \"nonce\": 10 } 其中的nonce值必须从0开始，不间断增加。 用Python对其签名的代码如下： def serialize_internal_transfer(transfer): return [ int(transfer['exchangeId']), int(transfer['sender']), int(transfer['receiver']), int(transfer['tokenId']), int(transfer['amount']), int(transfer['feeTokenId']), int(transfer['amountFee']), int(transfer['label']), int(transfer['nonce']) ] def sign_internal_transfer(privateKey, transfer): serialized = serialize_internal_transfer(transfer) signed = sign_int_array(serialized, 10 /* 注意这个t值 */) transfer.update(signed) 除了EDDSA的签名，用户还需要使用ECDSA对内部转账请求进行签名。内部转账请求的一些数据需要构造成一个Json的字符串，然后采用sha256哈希算法，计算得到hash，转成16进制字符串形式，加上固定的头：\"Sign this message to authorize Loopring Pay: \"，对组合之后的字符采用personal _sign 方法签名。 使用Js对其签名的代码如下: function serialize_transfer(transfer) { const data = { exchangeId: transfer.exchangeId, sender: transfer.sender, receiver: transfer.receiver, token: transfer.tokenId, amount: transfer.amount, tokenF: transfer.feeTokenId, amountF: transfer.amountFee, label: transfer.label, nonce: transfer.nonce, memo:transfer.memo || \"\" }; return \"0x\" + sha256(JSON.stringify(data)).toString('hex'); } function sign_internal_transfer(transfer){ const transferData = serialize_transfer(transfer); const prefix = \"Sign this message to authorize Loopring Pay: \"; const message = prefix + transferData; const sig = personal_sign(privateKey, message); } 参考资料 您可以通过下列文献和代码仓库了解更多关于Poseidon哈希和EdDSA签名的细节。 ethsnarks：https://github.com/HarryR/ethsnarks.git SHA256 Hash：https://en.wikipedia.org/wiki/SHA-2 EdDSA：https://en.wikipedia.org/wiki/EdDSA Poseidon Hash：https://www.poseidon-hash.info/ 您也可以参考我们的示范代码了解更多应用细节。 "},"basics/orders.html":{"url":"basics/orders.html","title":"订单模型","keywords":"","body":"订单模型 单向订单模型 与多数中心化交易所的订单模型不同，路印采用的是单向订单模型（Uni-Directional Order Model，简称UDOM）。也就是说，无论买单还是卖单，都统一用一种数据结构表示。我们先通过一个简化过的模型举几个路印限价单的例子（路印目前不支持市价单）。 在LRC-ETH交易对，一个用0.03价格卖出500个LRC的卖单可以这样表示： { // LRC-ETH市场：0.03价格卖出500个LRC的卖单 \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03 } 订单数据项中的的字母S代表Sell，B代表Buy。 用0.03价格买入出500个LRC的买单这样表示： { // LRC-ETH市场：0.03价格买入500个LRC的买单 \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500 } 单向订单模型中不显性表达交易对和价格。 不过上面的模型有个小问题：对完全成交的判断条件没有做说明。或者说，一个订单完全成交，是按照amountS的实际交易额达到了指定的值做标准，还是按照amountB的实际交易额达到了指定的值做标准。因此我们还需引入了另一个参数buy来指明完全成交的判断条件。如果buy==true，就按照amountB的实际交易判断是否完全成交；否则按照amountS的实际交易额判断。因此这上面的卖单和买单就需要这样修改： { // LRC-ETH市场：0.03价格卖出500个LRC的卖单 \"tokenS\": \"LRC\", \"tokenB\": \"ETH\", \"amountS\": 500, \"amountB\": 15 // = 500 * 0.03， \"buy\": false // 完全成交用amountS实际交易额判断 } { // LRC-ETH市场：0.03价格买入500个LRC的买单 \"tokenS\": \"ETH\", \"tokenB\": \"LRC\", \"amountS\": 15, // = 500 * 0.03 \"amountB\": 500, \"buy\": true // 完全成交用amountB实际交易额判断 } 注意：上面的卖单如果完全成交，实际上获得的ETH可能大于15ETH；而上面的买单如果完全成交，实际上支付的ETH可能少于15ETH。这就是buy这个参数对撮合引擎行为影响的结果。 将上面两个订单的buy值反转，会有什么效果呢？答案是：LRC-ETH交易对的卖单就变成了ETH-LRC交易对的买单；而LRC-ETH交易对的买单就变成了ETH-LRC交易对的卖单。也就是说，路印协议的一个交易对，实际上等同于多数中心化交易所的LRC-ETH和ETH-LRC两个交易对，并且可以表达这个两个交易对各自的买卖单，并将其放在一起撮合。 除了优雅和简单之外，路印协议的单向订单模型还使得在零知识证明电路中实现更简单的结算逻辑成为可能。 订单数据 路印实际的订单格式要更加复杂一些。您可以通过下面的JSON来表达一个路印的限价单。具体参数细节详见提交订单。 newOrder = { \"tokenSId\": 2, // LRC \"tokenBId\": 0, // ETH \"amountS\": \"500000000000000000000\", \"amountB\": \"15000000000000000000\", \"buy\": \"false\", \"exchangeId\": 2, \"accountId\": 1234, \"allOrNone\": \"false\", // 目前值必须为\"false\" \"maxFeeBips\": 50, \"label\": 211, \"validSince\": 1582094327, \"validUntil\": 1587278341, \"orderId\": 5, \"hash\": \"14504358714580556901944011952143357684927684879578923674101657902115012783290\", \"signatureRx\": \"15179969700843231746888635151106024191752286977677731880613780154804077177446\", \"signatureRy\": \"8103765835373541952843207933665617916816772340145691265012430975846006955894\", \"signatureS\" : \"4462707474665244243174020779004308974607763640730341744048308145656189589982\", \"clientOrderId\": \"Test01\", \"channelId\": \"channel1::maker1\" } 接下来我们为您对其中的一些数据项做进一步说明。 通证和数量 与简化模型不同，实际订单中通证不用其名字或ERC20地址表达，而是使用该通证在路印交易所的合约中注册的序号（Token ID）表达。上面的例子中，我们假设LRC和ETH的ID分别是2和0。 实际通证配置信息可以通过交易所支持的通证信息查询。 订单中的通证数量使用通证的最小单元，通过字符串类型表达。以LRC为例，LRC的ERC20合约中decimals为18，因此1.0LRC应该表示为\"1000000000000000000\"(1后面跟18个0)。每个通证的decimals都是由其智能合约决定；ETH的decimals是18。 请注意：订单中的buy和allOrNone的类型是字符串而不是布尔。 交易手续费 maxFeeBips=50代表该订单愿意支付给交易所的最高手续费比例是0.5%（maxFeeBips的单位是0.01%）。路印的交易手续费都是用成交获得的tokenB支付的。假设上面订单某次成交买入了\"10000000000000000000\"ETH（10ETH)，那么实际支付的手续费不会超过0.05ETH（\"10000000000000000000\" * 0.5%）。 实际支付的手续费比例是由路印中继决定的。中继会根据不同的VIP等级，给不同的用户相应的交易手续费折扣。路印协议不允许实际手续费比例大于用户订单中指定的最高手续费比例。 用户下单的时候，必须将maxFeeBips设置为不小于该用户在指定交易对的默认交易手续费比例。该信息可以通过/api/v2/user/feeRates查询获得。如果您信任路印交易所，也可以将这个maxFeeBips设置为协议允许的最大值63。 生效和过期时间 validSince代表订单生效时间，validUntil代表订单过期时间，其单位均为秒。 中继服务器收到订单时会验证订单中的这两个时间戳；路印协议的零知识证明电路代码在清算时候也需要判断这两个时间戳。由于zkRollup批处理延迟，以及以太坊上时间与服务器时间可能存在的偏差，我们强烈建议validSince设置为当前时间，且validSince和validUntil之间的时间窗口不小于一个星期，否则您的订单可能不会被撮合。 您可以通过使用validUntil时间戳来让订单自动过期，避免不必要的主动取消订单操作。 成交量与订单号 路印协议3.1.1为支持的每个通证预留了16384（2142^{14}2​14​​）个槽位来记录卖出该通证的订单的成交量。如果订单ID是N，那么使用的槽位编号就是N % 16384。换言之，如果槽位编号是m，该槽位就可以被用来记录具有下列ID的订单：m，m + 16384，m + 16384 * 2，... 以此类推。 每个槽位都记录了当前在追踪的订单的ID（初始值就是槽位编号），并且后续不接受订单ID比当前订单ID更小的订单。假设槽位1记录的是ID为32769（ 1 + 16384 * 2）的订单的订单状态，当用户下一个订单ID为1或16385的订单的时候，下单就会失败。当您在一个市场的活跃订单达到16384后，您需要先取消部分订单释放槽位，才可以继续下新的订单。 订单ID的最大值是1048576，即2202^{20}2​20​​。到达这个ID上限后，对应的通证就无法再下任何卖单。对于普通用户，这不是大问题；但对于程序化交易，您可能需要注册一个新账号继续交易。 路印协议3.5会去除订单ID最大值的限制，但依然保留槽位的设计和数量。 值得注意的是，同一用户在基础通证相同的多个交易对（如LRC-ETH和LRC-USDT）的所有卖单共享上面的16384槽位的。如果您不想在客户端维护交易对间订单ID和槽位的分配，您可以注册多个账号：一个账号参与LRC-ETH市场的交易，另一个账号参与LRC-USDT市场的交易。 我们知道这种设计带来的不便利。不过这是路印协议设计时候做的取舍。希望后续技术的进步可以将这个限制去除。 其它数据项 exchangeId：路印交易所在路印协议体系中的交易所序号。后续路印交易所升级智能合约后，这个exchangeId的值会变化。路印交易所beta1对应的exchangeId是2。 accountId：用户的账号ID。 allOrNone：如果是\"true\"，要求订单要么不成交，要么就要完全成交。目前这个参数还不被撮合引擎支持，因此请先设置为\"false\"。 label: 用于在协议层标记订单。该项的值对于交易清算没有任何影响。用户会对这个值做签名，因此该值对于不同实体间的分润根据可信度。 clientOrderId: 用户客户端在协议层外标记订单，可以是任意长度小于66的字符串。该项的值对于交易清算没有任何影响。用户不会对该项做签名。 channelId：订单渠道号, 用来标示订单从哪个渠道提交。 更多细节请参考提交订单。 "},"basics/examples.html":{"url":"basics/examples.html","title":"示范代码","keywords":"","body":"示范代码 https://github.com/Loopring/hello_loopring代码仓库包含了一些简单示例，帮助您快速上手使用路印API。其中： hash_and_sign/：使用Python和ethsnarks开源仓库，计算任意字符串的Poseidon哈希，并对其做EdDSA的签名和验签。 trading/：提交订单，读取订单，和取消订单。 offchain_withdrawal/：链下提现的签名和提交（未完成）。 我们后续会不断完善，开源更多的代码教程。敬请期待。 "},"basics/contracts.html":{"url":"basics/contracts.html","title":"智能合约","keywords":"","body":"Smart Contracts The following is a list of smart contract addresses for the Loopring Protocol and Loopring Exchange on Ethereum mainnet. LRC LRC Address: 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD (lrctoken.eth) Loopring Exchange V2 (Added at 2020-12-21) ExchangeV3: 0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4 (exchange2.loopring.eth) DefaultDepositContract: 0x674bdf20A0F284D710BC40872100128e2d66Bd3f (deposit2.loopring.eth) LoopringIOExchangeOwner: 0x5c367c1b2603ed166C62cEc0e4d47e9D5DC1c073 ExchangeV3 Implementation: 0x2fefbeF4d1445F523941c56349C2414cd5e9675d LoopringV3: 0xe56D6ccab6551932C0356E4e8d5dAF0630920C71 BlockVerifier: 0x6150343E0F43A17519c0327c41eDd9eBE88D01ef (verifier2.loopring.eth) AgentRegistry: 0x39B9bf169a7e225ba037C443A40460c77438ea14 (agents2.loopring.eth) FastWithdrawalAgent: 0xec3Cc6Cf0252565b56FC7AC396017Df5b9B78a31 (fastwithdraw2.loopring.eth) Open Sourced The code of the Loopring Protocol is entirely open-sourced, including its design document, smart contracts, and ZKP circuits. If you have any questions, please email the Loopring Foundation at foundation@loopirng.org. "},"basics/uat_token.html":{"url":"basics/uat_token.html","title":"Uat环境Token","keywords":"","body":"goerli 测试链上的交易所地址: ExchangeV3: 0x2e76EBd1c7c0C8e7c2B875b6d505a260C525d25e DefaultDepositContract: 0xb684B265f650a77afd27Ce0D95252a7329B5bD72 goerli 测试链上的测试token地址: wethAddress: 0xe170822ceA1E2F9875345c135BbdF9A198497afA, decimals: 18 tokenId: 1 lrcAddress: 0x6621Fc9CA6Cb25DD1De695Fb1221D12350D7D318, decimals: 18 tokenId: 2 USDT Address: 0xd4E71C4bb48850f5971cE40Aa428b09F242D3e8a, decimals: 6 tokenId: 3 LRC 和 USDT领取地址： https://goerli.etherscan.io/address/0x3a7fc292b0a669298ee481e10b3270b00323c556#writeContract UAT 测试界面 https://loopring-amm.herokuapp.com/ "},"REST_APIS.html":{"url":"REST_APIS.html","title":"REST API","keywords":"","body":"REST API 本文主要描述路印交易所REST API的共性部分。 接入URL https://api3.loopring.io 限流 每个API都有流量限制，超额的调用请求会被拒绝（返回429）。如果您长期超额调用，您的账号就会被列入黑名单，从而无法继续使用路印API。 HTTP头 X-API-KEY 除查询用户ApiKey外的所有API都需要指定X-API-KEYHTTP头，提供用户的ApiKey。 X-API-SIG 以下API需要指定X-API-SIGHTTP头，提供用户的的EdDSA数字签名： 查询用户ApiKey 取消订单 更新ApiKey 根据orderHash批量取消订单 根据clientOrderId批量取消订单 提交transfer 设置HTTP头 使用Python设置HTTP头的代码如下： def init_request_session(apiKey, sig): session = requests.session() session.headers.update({ 'Accept': 'application/json', 'X-API-KEY': apiKey, 'X-API-SIG': sig, }) return session API返回值 除了网络错误，所有API都会返回200状态码和代表API结果的JSON数据。JSON返回信息中都包含一个resultInfo字段，用以反馈API调用的通用状态，特别是出错时候的状态码。如果请求正常返回，则还会返回一个data字段，该字段的值也是一个JSON结构，针对不同API代表不同的业务数据，请参考每个API说明。 返回值结构 字段 类型 必须 说明 举例 resultInfo ResultInfo 是 调用结果 - ResultInfo结构 字段 类型 必须 说明 举例 code integer 是 状态码 0 message string 是 返回说明。用来帮助调试，不应在前端显示或用于逻辑判断。 \"SUCCESS\" 状态码 状态码 描述 0 成功 100000 内部未知错误 100001 参数非法 100002 请求超时 100202 更新失败 100203 内部存储错误 100204 重复提交 "},"dex_apis/getTimestamp.html":{"url":"dex_apis/getTimestamp.html","title":"查询服务器当前时间","keywords":"","body":"查询服务器当前时间 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/timestamp 功能 返回服务器当前时间，以毫秒为单位 API 描述 HTTP头 无 请求参数 无 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/timestamp HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/timestamp 响应字段 字段 类型 必须 说明 举例 timestamp integer 否 Current time in millisecond 1584683483382 响应示例 { \"timestamp\" : 1584683483382 } 状态码 状态码 描述 100000 未知错误 "},"dex_apis/getApiKey.html":{"url":"dex_apis/getApiKey.html","title":"查询用户ApiKey","keywords":"","body":"查询用户ApiKey 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/apiKey 功能 用户注册的时候系统已经产生一个ApiKey，用户通过此接口当前的ApiKey API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-SIG string 是 EDDSA 签名信息 \"0xeb14773e8a07d19bc4fe56e36d041dcb0026bf21e05c7652f7e92160deaf5ea9c4fe56e34773e86d041dcbeb1a07d19b002652f7e92160deaf5e6bf21e05c7a9002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/apiKey?accountId=10 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdfcurl -H \"X-API-SIG:dkkfinfasdf\" https://api3.loopring.io/api/v3/apiKey\\?accountId\\=10 响应字段 字段 类型 必须 说明 举例 apiKey string 是 ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" 响应示例 { \"apiKey\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } 状态码 状态码 描述 100000 未知错误 101002 未找到该用户 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 "},"dex_apis/applyApiKey.html":{"url":"dex_apis/applyApiKey.html","title":"更新用户ApiKey","keywords":"","body":"更新用户ApiKey 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/apiKey 功能 如果用户想要更换ApiKey，就调用此接口，header中传入最近使用的API key，返回结果会传回新的ApiKey。之后每次调用getApiKey都返回当前最新的ApiKey API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string 是 EDDSA 签名信息 \"0xeb14773e8a07d19bc4fe56e36d041dcb0026bf21e05c7652f7e92160deaf5ea9c4fe56e34773e86d041dcbeb1a07d19b002652f7e92160deaf5e6bf21e05c7a9002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/apiKey HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdf Content-Type: application/json { \"accountId\" : 1 }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/apiKey -d \\ '{ \"accountId\" : 1 }' 响应字段 字段 类型 必须 说明 举例 apiKey string 是 ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" 响应示例 { \"apiKey\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } 状态码 状态码 描述 100000 未知错误 100001 参数非法 101002 未找到该用户 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 "},"dex_apis/getNextStorageId.html":{"url":"dex_apis/getNextStorageId.html","title":"获取有效的Storage ID","keywords":"","body":"获取有效的Storage ID 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/storageId 功能 获取有效的Storage ID API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 Looprings account identifier 1 sellTokenId integer 是 The unique identifier of the token which the user wants to sell in the next order. 0 maxNext boolean 否 Return the max of the next available storageId, so any storageId > returned value is avaliable, to help user manage storageId by themselves. for example, if [20, 60, 100] is avaliable, all other ids \"0\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/storageId?accountId=1&sellTokenId=0&maxNext=0 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/storageId\\?accountId\\=1\\&sellTokenId\\=0\\&maxNext\\=0 响应字段 字段 类型 必须 说明 举例 orderId integer 否 Next storage ID for order request, must be even 100 offchainId integer 否 Next storage ID for offchain requests, i.e., transfer/withdraw/updateAccount, must be odd 101 响应示例 { \"orderId\" : 100, \"offchainId\" : 101 } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 "},"dex_apis/getOrderDetail.html":{"url":"dex_apis/getOrderDetail.html","title":"获取订单详情","keywords":"","body":"获取订单详情 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/order 功能 根据指定hash获取订单详情 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 orderHash string 是 订单HASH \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859 响应字段 字段 类型 必须 说明 举例 hash string 是 订单HASH \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string 是 客户端订单唯一ID \"200310143135081332\" side string 是 买卖方向取值范围 : ['SELL', 'BUY'] \"SELL\" market string 是 市场对 \"LRC-ETH\" price string 是 成交价格 \"0.01987608\" volumes OrderVolumesV3 是 Wraps data regarding the orders volumes (base, quote, and filled.) \"0\" validity OrderValidityV3 是 Wraps data regarding time validity constraints (since and until) \"{start: 1234, end: 2345}\" orderType string 是 Whether the order has to be treated as a limit, maker, or taker operation.取值范围 : ['LIMIT_ORDER', 'TAKER_ONLY', 'MAKER_ONLY'] \"LIMIT_ORDER\" tradeChannel string 是 Order channel, can be ORDER_BOOK, AMM_POOL, MIXED取值范围 : ['ORDER_BOOK', 'AMM_POOL', 'MIXED'] \"ORDER_BOOK\" status string 是 订单状态取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" 响应示例 { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"side\" : \"SELL\", \"market\" : \"LRC-ETH\", \"price\" : \"0.01987608\", \"volumes\" : { \"baseAmount\" : \"0\", \"quoteAmount\" : \"0\", \"baseFilled\" : \"0\", \"quoteFilled\" : \"0\", \"fee\" : \"0\" }, \"validity\" : { \"start\" : 0, \"end\" : 0 }, \"orderType\" : \"LIMIT_ORDER\", \"tradeChannel\" : \"ORDER_BOOK\", \"status\" : \"processing\" } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 107002 订单HASH不能为空 107003 订单不存在 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 OrderVolumesV3 Wraps data regarding the orders volumes (base, quote, and filled.) 字段 类型 必须 说明 举例 baseAmount string 是 The amount of base tokens involved in the order. \"0\" quoteAmount string 是 The amount of quote tokens involved in the order. \"0\" baseFilled string 是 The amount of requested base tokens filled in the order. \"0\" quoteFilled string 是 The amount of requested quote tokens filled in the order. \"0\" fee string 是 The amount of quote or base token amount used to pay for the orders fee. Whether this data refers to the base or quote token, one can find out by looking at the orders side \"0\" OrderValidityV3 Wraps data regarding time validity constraints (since and until 字段 类型 必须 说明 举例 start integer 是 Timestamp from when the order officially becomes valid and fillable 0 end integer 是 Timestamp from when the order ceases to be valid and fillable 0 "},"dex_apis/submitOrderV3.html":{"url":"dex_apis/submitOrderV3.html","title":"Submit an order","keywords":"","body":"Submit an order 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/order 功能 Submit an order API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 exchange string 是 The adderss of the exchange which has to process this order \"1\" accountId integer 是 Loopring's account ID 1 storageId integer 是 The unique identifier of the L2 Merkle tree storage slot where the burn made in order to exit the pool will or has been stored. 1 sellToken TokenVolumeV3 是 Wrapper object used to describe a token associated with a certain quantity. \"TokenVolume{tokenId: 0, volume: 1234}\" buyToken TokenVolumeV3 是 Wrapper object used to describe a token associated with a certain quantity. \"TokenVolume{tokenId: 0, volume: 1234}\" allOrNone string 是 Whether the order supports partial fills or not.Currently only supports false as a valid value \"false\" fillAmountBOrS string 是 Fill size by buy token or by sell token \"true\" validUntil integer 是 Order expiration time, accuracy is in seconds 1567053142 maxFeeBips integer 是 Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63 20 eddsaSignature string 是 The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation. \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 否 An arbitrary, client-set unique order identifier, max length is 120 bytes \"1\" orderType string 否 Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLY取值范围 : ['LIMIT_ORDER', 'TAKER_ONLY', 'MAKER_ONLY', 'AMM'] \"LIMIT_ORDER\" tradeChannel string 否 Order channel, can be ORDER_BOOK, AMM_POOL, MIXED取值范围 : ['ORDER_BOOK', 'AMM_POOL', 'MIXED'] \"ORDER_BOOK\" taker string 否 Used by the P2P order which user specify the taker, so far its 0x0000000000000000000000000000000000000000 \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\" poolAddress string 否 The AMM pool address if order type is AMM \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\" affiliate string 否 An accountID who will recieve a share of the fee of this order \"10068\" 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/order HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"exchange\" : \"1\", \"accountId\" : 1, \"storageId\" : 1, \"sellToken\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"buyToken\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"allOrNone\" : \"false\", \"fillAmountBOrS\" : \"true\", \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"eddsaSignature\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"orderType\" : \"LIMIT_ORDER\", \"tradeChannel\" : \"ORDER_BOOK\", \"taker\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"poolAddress\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"affiliate\" : \"10068\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/order -d \\ '{ \"exchange\" : \"1\", \"accountId\" : 1, \"storageId\" : 1, \"sellToken\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"buyToken\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"allOrNone\" : \"false\", \"fillAmountBOrS\" : \"true\", \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"eddsaSignature\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"orderType\" : \"LIMIT_ORDER\", \"tradeChannel\" : \"ORDER_BOOK\", \"taker\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"poolAddress\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"affiliate\" : \"10068\" }' 响应字段 字段 类型 必须 说明 举例 hash string 是 Order hash of submit order response \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 是 The clientOrderId of the submitted order \"client_order_id\" status string 是 Order status of submit order response取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'failed'] \"cancelled\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"false\" 响应示例 { \"hash\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"client_order_id\", \"status\" : \"cancelled\", \"isIdempotent\" : false } 状态码 状态码 描述 100000 未知错误 100001 参数非法 102001 交易所ID不正确 102002 订单中存在不支持的TokenId 102003 无效的账户ID 102004 无效的订单ID 102005 市场对不支持 102006 不合法的费率字段 102007 订单已经存在 102008 订单已经过期 102010 订单缺少签名信息 102011 用户余额不足 102012 下单金额太小 102014 冻结金额失败，请稍后重试 102020 超过下单最大金额 102021 Nonce不合法 102027 Submit order failed 102120 订单未生效 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 104004 未提供签名信息 104005 错误的签名信息 模型 TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" "},"dex_apis/cancelOrder.html":{"url":"dex_apis/cancelOrder.html","title":"Cancel order","keywords":"","body":"Cancel order 流量控制: 1 每 秒 摘要 HTTP 方法 DELETE 访问路径 /api/v3/order 功能 Cancel order using order hash or client-side ID. API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string 是 EDDSA 签名信息 \"0xeb14773e8a07d19bc4fe56e36d041dcb0026bf21e05c7652f7e92160deaf5ea9c4fe56e34773e86d041dcbeb1a07d19b002652f7e92160deaf5e6bf21e05c7a9002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 Account ID 1 orderHash string 否 Order HASH \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 否 The unique order ID of the client \"20200318000000001010\" 请求示例 HTTPCURLDELETE https://api3.loopring.io/api/v3/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859&clientOrderId=20200318000000001010 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdfcurl -X DELETE -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" https://api3.loopring.io/api/v3/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859\\&clientOrderId\\=20200318000000001010 响应字段 字段 类型 必须 说明 举例 hash string 是 Order hash of submit order response \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string 是 The clientOrderId of the submitted order \"client_order_id\" status string 是 Order status of submit order response取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'failed'] \"cancelled\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"false\" 响应示例 { \"hash\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"client_order_id\", \"status\" : \"cancelled\", \"isIdempotent\" : false } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 102117 没有可以取消的订单 102118 取消订单失败, 请稍后重试 104002 APIKEY验证失败 104003 用户不存在 "},"dex_apis/getOrders.html":{"url":"dex_apis/getOrders.html","title":"获取用户订单列表","keywords":"","body":"获取用户订单列表 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/orders 功能 获取指定用户的订单列表，可以根据市场对、起始时间等条件过滤 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 market string 否 市场对 \"LRC-ETH\" start integer 否 起始时间,单位ms默认值 : 0L 1567053142000 end integer 否 结束时间,单位ms默认值 : 0L 1567053242000 side string 否 买卖方向取值范围 : ['BUY', 'SELL'] \"BUY\" status string 否 订单状态列表取值范围 : ['processing', 'processed', 'failed', 'cancelled', 'cancelling', 'expired'] \"processing,processed\" limit integer 否 限定数据条数（默认50条） 50 offset integer 否 偏移量（默认0）默认值 : 0L 0 orderTypes string 否 request.getOrders.orderTypes取值范围 : ['LIMIT_ORDER', 'MAKER_ONLY', 'TAKER_ONLY', 'AMM'] \"LIMIT_ORDER\" tradeChannels string 否 field.SubmitOrderRequest.tradeChannel取值范围 : ['ORDER_BOOK:0', 'AMM_POOL:1', 'MIXED:2'] \"ORDER_BOOK,AMM_POOL\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/orders?accountId=1&market=LRC-ETH&start=1567053142000&end=1567053242000&side=BUY&status=processing,processed&limit=50&offset=0&orderTypes=LIMIT_ORDER&tradeChannels=ORDER_BOOK,AMM_POOL HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/orders\\?accountId\\=1\\&market\\=LRC-ETH\\&start\\=1567053142000\\&end\\=1567053242000\\&side\\=BUY\\&status\\=processing,processed\\&limit\\=50\\&offset\\=0\\&orderTypes\\=LIMIT_ORDER\\&tradeChannels\\=ORDER_BOOK,AMM_POOL 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 满足条件的订单总条数，用于分页 10 orders List[OrderDetailV3] 否 订单列表 / 响应示例 { \"totalNum\" : 10, \"orders\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"side\" : \"SELL\", \"market\" : \"LRC-ETH\", \"price\" : \"0.01987608\", \"volumes\" : { \"baseAmount\" : \"0\", \"quoteAmount\" : \"0\", \"baseFilled\" : \"0\", \"quoteFilled\" : \"0\", \"fee\" : \"0\" }, \"validity\" : { \"start\" : 0, \"end\" : 0 }, \"orderType\" : \"LIMIT_ORDER\", \"tradeChannel\" : \"ORDER_BOOK\", \"status\" : \"processing\" } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 OrderDetailV3 订单详情信息 字段 类型 必须 说明 举例 hash string 是 订单HASH \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string 是 客户端订单唯一ID \"200310143135081332\" side string 是 买卖方向取值范围 : ['SELL', 'BUY'] \"SELL\" market string 是 市场对 \"LRC-ETH\" price string 是 成交价格 \"0.01987608\" volumes OrderVolumesV3 是 Wraps data regarding the orders volumes (base, quote, and filled.) \"0\" validity OrderValidityV3 是 Wraps data regarding time validity constraints (since and until) \"{start: 1234, end: 2345}\" orderType string 是 Whether the order has to be treated as a limit, maker, or taker operation.取值范围 : ['LIMIT_ORDER', 'TAKER_ONLY', 'MAKER_ONLY'] \"LIMIT_ORDER\" tradeChannel string 是 Order channel, can be ORDER_BOOK, AMM_POOL, MIXED取值范围 : ['ORDER_BOOK', 'AMM_POOL', 'MIXED'] \"ORDER_BOOK\" status string 是 订单状态取值范围 : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" OrderVolumesV3 Wraps data regarding the orders volumes (base, quote, and filled.) 字段 类型 必须 说明 举例 baseAmount string 是 The amount of base tokens involved in the order. \"0\" quoteAmount string 是 The amount of quote tokens involved in the order. \"0\" baseFilled string 是 The amount of requested base tokens filled in the order. \"0\" quoteFilled string 是 The amount of requested quote tokens filled in the order. \"0\" fee string 是 The amount of quote or base token amount used to pay for the orders fee. Whether this data refers to the base or quote token, one can find out by looking at the orders side \"0\" OrderValidityV3 Wraps data regarding time validity constraints (since and until 字段 类型 必须 说明 举例 start integer 是 Timestamp from when the order officially becomes valid and fillable 0 end integer 是 Timestamp from when the order ceases to be valid and fillable 0 "},"dex_apis/getMarkets.html":{"url":"dex_apis/getMarkets.html","title":"查询交易所支持的市场配置","keywords":"","body":"查询交易所支持的市场配置 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/exchange/markets 功能 查询所有支持的市场配置 API 描述 HTTP头 无 请求参数 无 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/exchange/markets HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/exchange/markets 响应字段 字段 类型 必须 说明 举例 markets List[MarketInfo] 是 Markets list / 响应示例 { \"markets\" : [ { \"market\" : \"LRC-USDT\", \"baseTokenId\" : 2, \"quoteTokenId\" : 0, \"precisionForPrice\" : 6, \"orderbookAggLevels\" : 4, \"enabled\" : false } ] } 状态码 状态码 描述 100000 未知错误 模型 MarketInfo 字段 类型 必须 说明 举例 market string 是 市场 \"LRC-USDT\" baseTokenId integer 是 基础货币ID 2 quoteTokenId integer 是 定价货币ID 0 precisionForPrice integer 是 服务器端返回深度中支持的最大价格精度 6 orderbookAggLevels integer 是 服务器端返回深度中支持的最大归并等级，支持范围是0到该值 4 enabled boolean 是 是否开放 \"false\" "},"dex_apis/getTokens.html":{"url":"dex_apis/getTokens.html","title":"查询交易所支持的通证信息","keywords":"","body":"查询交易所支持的通证信息 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/exchange/tokens 功能 获取交易所支持的全部的通证信息,包含未上架或者已下架的通证信息 API 描述 HTTP头 无 请求参数 无 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/exchange/tokens HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/exchange/tokens 响应字段 字段 类型 必须 说明 举例 type string 是 Token Type取值范围 : ['ERC20', 'ETH'] \"ERC20\" tokenId integer 是 Token's numeric ID 2 symbol string 是 Token symbol \"LRC\" name string 是 Token name \"Loopring\" address string 是 Token ERC20 contract address \"0x97241525fe425C90eBe5A41127816dcFA5954b06\" decimals integer 是 Token decimals 18 precision integer 是 Max decimals that relayer uses for the token, smaller amount will be treated as zero. 6 precisionForOrder integer 是 Max decimals that relayer uses for the token, smaller amount will be treated as zero. 6 orderAmounts OrderAmountsV3 是 The amount requirements for submitting orders. \"{min:100000, max:900000, dust:10}\" luckyTokenAmounts OrderAmountsV3 是 field.TokenInfoV3.luckyTokenAmounts \"{min:100000, max:900000, dust:10}\" fastWithdrawLimit string 是 The maximum amount for single fast withdrawal \"1000000000000000\" gasAmounts GasAmountLimitV3 是 The gas amount requirements for user requests \"{distributionGas:100000, depositGas:150000}\" enabled boolean 是 Whether the token is currently enabled for deposits and withdrawals. \"true\" 响应示例 { \"type\" : \"ERC20\", \"tokenId\" : 2, \"symbol\" : \"LRC\", \"name\" : \"Loopring\", \"address\" : \"0x97241525fe425C90eBe5A41127816dcFA5954b06\", \"decimals\" : 18, \"precision\" : 6, \"precisionForOrder\" : 6, \"orderAmounts\" : { \"minimum\" : \"10000000000000000\", \"maximum\" : \"1000000000000000000\", \"dust\" : \"1000000000000000\" }, \"luckyTokenAmounts\" : { \"minimum\" : \"10000000000000000\", \"maximum\" : \"1000000000000000000\", \"dust\" : \"1000000000000000\" }, \"fastWithdrawLimit\" : \"1000000000000000\", \"gasAmounts\" : { \"distribution\" : \"1000000000000000\", \"deposit\" : \"1000000000000000\" }, \"enabled\" : true } 状态码 状态码 描述 100000 未知错误 模型 OrderAmountsV3 Contains information about the order amounts that are valid for usage with the token in order-related APIs. 字段 类型 必须 说明 举例 minimum string 是 The minimum amount enforced when submitting orders for the token. \"10000000000000000\" maximum string 是 The maximum amount enforced when submitting orders for the token. \"1000000000000000000\" dust string 是 The dust amount enforced when submitting orders for the token. \"1000000000000000\" GasAmountLimitV3 Contains information about the gas amounts required by ETH L1 requests. 字段 类型 必须 说明 举例 distribution string 是 The gas amount for withdrawal \"1000000000000000\" deposit string 是 The gas amount for deposit \"1000000000000000\" "},"dex_apis/getExchangeInfo.html":{"url":"dex_apis/getExchangeInfo.html","title":"查询交易所的基本必要信息","keywords":"","body":"查询交易所的基本必要信息 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/exchange/info 功能 获取与交易所交互所需的必要信息 API 描述 HTTP头 无 请求参数 无 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/exchange/info HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/exchange/info 响应字段 字段 类型 必须 说明 举例 chainId integer 是 Loopring's smart contract network ID. 1 exchangeAddress string 是 Contract address of exchange. \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\" depositAddress string 是 field.ExchangeInfo.depositAddress \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\" onchainFees List[FeeInfo] 是 Fees settings. / openAccountFees List[OffFeeInfo] 是 field.ExchangeInfo.openAccountFee / updateFees List[OffFeeInfo] 是 field.ExchangeInfo.updateFees / transferFees List[OffFeeInfo] 是 Transfer fee settings. / withdrawalFees List[OffFeeInfo] 是 Off-chain withdrawal fee settings. / fastWithdrawalFees List[OffFeeInfo] 是 fast withdrawal fee settings. / ammExitFees List[OffFeeInfo] 是 AMM pool exit fee settings. / 响应示例 { \"chainId\" : 1, \"exchangeAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"depositAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"onchainFees\" : [ { \"type\" : \"withdraw\", \"fee\" : \"2000000000000000\" } ], \"openAccountFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"updateFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"transferFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"withdrawalFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"fastWithdrawalFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"ammExitFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ] } 状态码 状态码 描述 100000 未知错误 模型 FeeInfo 交易所收取的费用信息 字段 类型 必须 说明 举例 type string 是 费用类型 \"withdraw\" fee string 是 费用数量，单位为Wei数量的以太坊 \"2000000000000000\" OffFeeInfo 交易所链下请求收费信息 字段 类型 必须 说明 举例 token string 是 收费的token \"ETH\" fee string 是 收费数量 \"2000000000000000\" "},"dex_apis/getDepth.html":{"url":"dex_apis/getDepth.html","title":"获取市场深度信息","keywords":"","body":"获取市场深度信息 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/depth 功能 获取某个市场对的深度信息 API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，不支持多市场 \"LRC-ETH\" level integer 是 深度等级，越大表示合并的深度越多 2 limit integer 否 返回条数限制默认值 : 50 50 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/depth?market=LRC-ETH&level=2&limit=50 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/depth\\?market\\=LRC-ETH\\&level\\=2\\&limit\\=50 响应字段 字段 类型 必须 说明 举例 version integer 是 连续版本号。前端据此判断是否丢失数据。（参考websocket的使用） 147 timestamp integer 是 时间戳 432312312 market string 是 市场对 \"LRC-ETH\" bids List[List[string]] 是 买单深度,每一条深度包含四个元素，分别是价格，挂单量，挂单总量，和挂单数 \"[[\"0.002\",\"21000\",\"33220000\",\"4\"]]\" asks List[List[string]] 是 卖单深度,每一条深度包含四个元素，分别是价格，挂单量，挂单总量，和挂单数 \"[]\" 响应示例 { \"version\" : 147, \"timestamp\" : 432312312, \"market\" : \"LRC-ETH\", \"bids\" : [[\"0.002\",\"21000\",\"33220000\",\"4\"]], \"asks\" : [] } 状态码 状态码 描述 100000 未知错误 108000 不支持的市场 108001 不支持的深度等级 "},"dex_apis/getTicker.html":{"url":"dex_apis/getTicker.html","title":"查询交易所Ticker","keywords":"","body":"查询交易所Ticker 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/ticker 功能 查询交易所24小时维度Ticker API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，支持多市场 \"LRC-ETH,LRC-USDT\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/ticker?market=LRC-ETH,LRC-USDT HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/ticker\\?market\\=LRC-ETH,LRC-USDT 响应字段 字段 类型 必须 说明 举例 tickers List[List[string]] 否 Ticker信息，每一组数据包括市场对，时间戳，Base Token成交总量，Quote Token成交总额，开盘价，最高价，最低价，收盘价，交易笔数，买单盘口，卖单盘口 \"[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]]\" 响应示例 { \"tickers\" : [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 "},"dex_apis/getCandlestick.html":{"url":"dex_apis/getCandlestick.html","title":"查询K线数据","keywords":"","body":"查询K线数据 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/candlestick 功能 查询K线数据，目前支持2年内范围的数据，每次请求最多查询120个数据点 API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 market string 是 市场对，不支持多市场 \"LRC-ETH\" interval string 是 间隔，可以是: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w \"5min\" start integer 否 开始时间 1584479105000 end integer 否 结束时间 1584565505000 limit integer 否 数据点数量 120 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/candlestick?market=LRC-ETH&interval=5min&start=1584479105000&end=1584565505000&limit=120 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/candlestick\\?market\\=LRC-ETH\\&interval\\=5min\\&start\\=1584479105000\\&end\\=1584565505000\\&limit\\=120 响应字段 字段 类型 必须 说明 举例 candlesticks List[List[string]] 否 K线数据，每一组数据包括开始时间，交易笔数，开盘价，收盘价，最高价，最低价，Base Token成交总量，Quote Token成交总额 \"[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]\" 响应示例 { \"candlesticks\" : [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] } 状态码 状态码 描述 100000 未知错误 100001 参数非法 "},"dex_apis/getPrice.html":{"url":"dex_apis/getPrice.html","title":"查询token法币价","keywords":"","body":"查询token法币价 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/price 功能 查询以传入法币计价的token价格 API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 legal string 是 The fiat currency to uses. Currently the following values are supported: USD,CNY,JPY,EUR,GBP,HKD \"USD\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/price?legal=USD HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/price\\?legal\\=USD 响应字段 字段 类型 必须 说明 举例 prices List[PriceV3] 否 field.GetPriceResponseV3.prices / 响应示例 { \"prices\" : [ { \"symbol\" : \"LRC\", \"price\" : \"0\", \"updatedAt\" : 0 } ] } 状态码 状态码 描述 100000 未知错误 模型 PriceV3 Token的法币价 字段 类型 必须 说明 举例 symbol string 是 币种 \"LRC\" price string 是 法币价格 \"0\" updatedAt integer 是 价格更新的时间 0 "},"dex_apis/getMarketTrade.html":{"url":"dex_apis/getMarketTrade.html","title":"查询市场交易","keywords":"","body":"查询市场交易 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/trade 功能 查询指定市场交易信息 API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 market string 是 要查询的市场，不支持多市场 \"LRC-USDT\" limit integer 否 查询条数 20 fillTypes string 否 request.getUserTxs.fillTypes取值范围 : ['dex', 'amm'] \"dex\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/trade?market=LRC-USDT&limit=20&fillTypes=dex HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/trade\\?market\\=LRC-USDT\\&limit\\=20\\&fillTypes\\=dex 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 The total number of trades in query result 0 trades List[List[string]] 是 List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" 响应示例 { \"totalNum\" : 0, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } 状态码 状态码 描述 100000 未知错误 "},"dex_apis/submitTransfer.html":{"url":"dex_apis/submitTransfer.html","title":"提交内部转账","keywords":"","body":"提交内部转账 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/transfer 功能 提交内部转账 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string 是 ECDSA 签名信息 \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" 请求参数 字段 类型 必须 说明 举例 exchange string 是 exchange address \"1\" payerId integer 是 payer account ID 1 payerAddr string 是 payer account address \"0xABCD\" payeeId integer 是 payee account ID 1 payeeAddr string 是 payer account address \"0xCDEF\" token TokenVolumeV3 是 token to be transfer \"{tokenId: 0, volume: 1000000}\" maxFee TokenVolumeV3 是 maximum fee of the transfer \"{tokenId: 0, volume: 1000000}\" storageId integer 是 offchain Id 1 validUntil integer 是 Timestamp for order to become invalid 1598431481 counterFactualInfo CounterFactualInfo 否 Counter factual wallet extra info to verify L1 ecdsa signature. \"{walletFactory: 0xABCD, walletOwner: 0xABCD, walletSalt: 1234}\" eddsaSignature string 否 eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string 否 ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" hashApproved string 否 An approved hash string which was already submitted on eth mainnet \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" memo string 否 transfer memo \"Air Drop\" clientId string 否 用户定义的转账Id \"hebao1234567\" 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/transfer HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdf Content-Type: application/json { \"exchange\" : \"1\", \"payerId\" : 1, \"payerAddr\" : \"0xABCD\", \"payeeId\" : 1, \"payeeAddr\" : \"0xCDEF\", \"token\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1598431481, \"counterFactualInfo\" : { \"walletFactory\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletOwner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletSalt\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" }, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"memo\" : \"Air Drop\", \"clientId\" : \"hebao1234567\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/transfer -d \\ '{ \"exchange\" : \"1\", \"payerId\" : 1, \"payerAddr\" : \"0xABCD\", \"payeeId\" : 1, \"payeeAddr\" : \"0xCDEF\", \"token\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1598431481, \"counterFactualInfo\" : { \"walletFactory\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletOwner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletSalt\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" }, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"memo\" : \"Air Drop\", \"clientId\" : \"hebao1234567\" }' 响应字段 字段 类型 必须 说明 举例 hash string 是 The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string 是 Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processed取值范围 : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"true\" 响应示例 { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } 状态码 状态码 描述 100000 未知错误 100001 参数非法 102001 交易所ID不正确 102021 Nonce不合法 102022 转账者账户ID不合法 102023 接收者账户ID不合法 102024 不支持的转账收费token 102025 转账的token和费用token不匹配 模型 TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" CounterFactualInfo 字段 类型 必须 说明 举例 walletFactory string 是 Counter factual wallet factory contract address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" walletOwner string 是 Counter factual wallet owner address, NOT the wallet address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" walletSalt string 是 Salt to generate address from owner & other related info \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" "},"dex_apis/getAccount.html":{"url":"dex_apis/getAccount.html","title":"查询用户信息","keywords":"","body":"查询用户信息 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/account 功能 查询用户信息 API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 owner string 否 用户以太坊地址 \"0x123456\" accountId integer 否 AccountID, if owner is presented, it must be align with the owners accountId, otherwise an error occurs. 10003 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/account?owner=0x123456&accountId=10003 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/account\\?owner\\=0x123456\\&accountId\\=10003 响应字段 字段 类型 必须 说明 举例 accountId integer 是 Account ID 10 owner string 是 Ethereum address \"0xABCD\" frozen boolean 是 The frozen state of the account, true stands for frozen, if the account is frozen, the user cant submit order. \"false\" publicKey PublicKey 是 The user's public key \"{x:0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f,y:0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c}\" tags string 否 Comma separated list of tags such as VIP levels, etc \"vip_1\" nonce integer 是 field.DexAccountV3.nonce 0 keyNonce integer 是 Nonce of users key change request, for backward compatible 0 keySeed string 是 KeySeed of users L2 eddsaKey, the L2 key should be generated from this seed, i.e., L2_EDDSA_KEY=eth.sign(keySeed). Otherwise, user may meet error in login loopring DEX \"Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd with key nonce: 103\" 响应示例 { \"accountId\" : 10, \"owner\" : \"0xABCD\", \"frozen\" : false, \"publicKey\" : { \"x\" : \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\", \"y\" : \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" }, \"tags\" : \"vip_1\", \"nonce\" : 0, \"keyNonce\" : 0, \"keySeed\" : \"Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd with key nonce: 103\" } 状态码 状态码 描述 100000 未知错误 101001 未找到该地址 101002 未找到该用户 模型 PublicKey Describes the users public key which is a point of the selected eclipse curve. 字段 类型 必须 说明 举例 x string 是 The public keys x part. \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\" y string 是 The public keys y part. \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" "},"dex_apis/submitUpdateAccount.html":{"url":"dex_apis/submitUpdateAccount.html","title":"更新账户私钥","keywords":"","body":"更新账户私钥 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/account 功能 / API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-SIG string 是 ECDSA 签名信息 \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" 请求参数 字段 类型 必须 说明 举例 exchange string 是 exchange address \"1\" owner string 是 owner address \"0xB4A70168340C75119523019f79F5Ffd9c60DceC7\" accountId integer 是 user account ID 1 publicKey PublicKey 是 The user's public key \"{x:0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f,y:0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c}\" maxFee TokenVolumeV3 是 maximum of fee token \"{tokenId: 0, volume: 1000000}\" validUntil integer 是 Timestamp for order to become invalid 1583183141 nonce integer 是 Nonce of users exchange account that used in off-chain requests. 1 keySeed string 否 KeySeed of users L2 eddsaKey, the L2 key should be generated from this seed, i.e., L2_EDDSA_KEY=eth.sign(keySeed). Otherwise, user may meet error in login loopring DEX \"Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd with key nonce: 103\" counterFactualInfo CounterFactualInfo 否 Counter factual wallet extra info to verify L1 ecdsa signature. \"{walletFactory: 0xABCD, walletOwner: 0xABCD, walletSalt: 1234}\" eddsaSignature string 否 eddsa signature of this request \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string 否 ecdsa signature of this request \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" hashApproved string 否 An approved hash string which was submitted on eth mainnet \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/account HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdf Content-Type: application/json { \"exchange\" : \"1\", \"owner\" : \"0xB4A70168340C75119523019f79F5Ffd9c60DceC7\", \"accountId\" : 1, \"publicKey\" : { \"x\" : \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\", \"y\" : \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" }, \"maxFee\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"validUntil\" : 1583183141, \"nonce\" : 1, \"keySeed\" : \"Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd with key nonce: 103\", \"counterFactualInfo\" : { \"walletFactory\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletOwner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletSalt\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" }, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }curl -X POST -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/account -d \\ '{ \"exchange\" : \"1\", \"owner\" : \"0xB4A70168340C75119523019f79F5Ffd9c60DceC7\", \"accountId\" : 1, \"publicKey\" : { \"x\" : \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\", \"y\" : \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" }, \"maxFee\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"validUntil\" : 1583183141, \"nonce\" : 1, \"keySeed\" : \"Sign this message to access Loopring Exchange: 0xbbbbca6a901c926f240b89eacb641d8aec7aeafd with key nonce: 103\", \"counterFactualInfo\" : { \"walletFactory\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletOwner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletSalt\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" }, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }' 响应字段 字段 类型 必须 说明 举例 hash string 是 The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string 是 Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processed取值范围 : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"true\" 响应示例 { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } 状态码 状态码 描述 100000 未知错误 100001 参数非法 102001 交易所ID不正确 102021 Nonce不合法 102022 转账者账户ID不合法 102023 接收者账户ID不合法 102024 不支持的转账收费token 102025 转账的token和费用token不匹配 模型 PublicKey Describes the users public key which is a point of the selected eclipse curve. 字段 类型 必须 说明 举例 x string 是 The public keys x part. \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\" y string 是 The public keys y part. \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" CounterFactualInfo 字段 类型 必须 说明 举例 walletFactory string 是 Counter factual wallet factory contract address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" walletOwner string 是 Counter factual wallet owner address, NOT the wallet address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" walletSalt string 是 Salt to generate address from owner & other related info \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" "},"dex_apis/getUserCreate.html":{"url":"dex_apis/getUserCreate.html","title":"获取用户开户记录","keywords":"","body":"获取用户开户记录 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/createInfo 功能 获取用户开户记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/createInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&offset=1 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/createInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[UserAccountTxData] 是 开户记录当前页列表 / 响应示例 { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"owner\" : \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeTokenSymbol\" : \"ETH\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"blockId\" : integer, \"indexInBlock\" : integer } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 UserAccountTxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 hash string 是 系统唯一hash标识 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" owner string 是 Owner address of the Tx \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\" txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeTokenSymbol string 是 Fee token symbol \"ETH\" feeAmount string 是 操作手续费 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 blockId integer 是 / indexInBlock integer 是 / "},"dex_apis/getUserUpdate.html":{"url":"dex_apis/getUserUpdate.html","title":"获取用户更新记录","keywords":"","body":"获取用户更新记录 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/updateInfo 功能 获取用户更新记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 offset integer 否 偏移量(默认0)默认值 : 0L 1 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/updateInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&offset=1 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/updateInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&offset\\=1 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[UserAccountTxData] 是 修改密码当前页列表 / 响应示例 { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"owner\" : \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeTokenSymbol\" : \"ETH\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"blockId\" : integer, \"indexInBlock\" : integer } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 UserAccountTxData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 hash string 是 系统唯一hash标识 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" owner string 是 Owner address of the Tx \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\" txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeTokenSymbol string 是 Fee token symbol \"ETH\" feeAmount string 是 操作手续费 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 blockId integer 是 / indexInBlock integer 是 / "},"dex_apis/getUserBalances.html":{"url":"dex_apis/getUserBalances.html","title":"查询用户交易所余额","keywords":"","body":"查询用户交易所余额 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/balances 功能 查询用户交易所余额 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 tokens string 否 资产列表 \"0,1\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/balances?accountId=1&tokens=0,1 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/balances\\?accountId\\=1\\&tokens\\=0,1 响应字段 字段 类型 必须 说明 举例 tokenId integer 是 Token ID 10 total string 是 Amount of the asset \"100\" locked string 是 The part of the total balance which is currently not liquid and not at the users disposal (because of pending withdrawals or orders for example) \"100\" pending PendingBalance 是 Users pending balances \"100\" 响应示例 { \"tokenId\" : 10, \"total\" : \"100\", \"locked\" : \"100\", \"pending\" : { \"withdraw\" : \"10000000000000\", \"deposit\" : \"10000000000000\" } } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 PendingBalance Users pending balances 字段 类型 必须 说明 举例 withdraw string 是 Withdrawal pending balance which means the token is in withdrawal state but not arrived L1 \"10000000000000\" deposit string 是 Deposit pending balance which means the token is in deposit state but not arrived L2 \"10000000000000\" "},"dex_apis/getUserDeposits.html":{"url":"dex_apis/getUserDeposits.html","title":"获取用户充值记录","keywords":"","body":"获取用户充值记录 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/deposits 功能 获取用户充值记录列表 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 否 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 tokenSymbol string 否 币种 \"ETH\" offset integer 否 偏移量(默认0)默认值 : 0L 1 hashes string 否 The hashes (split by ,) of the transactions, normally its L2 tx hash, except the deposit which uses L1 tx hash. \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/deposits?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&tokenSymbol=ETH&offset=1&hashes=0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/deposits\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&tokenSymbol\\=ETH\\&offset\\=1\\&hashes\\=0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[DepositData] 是 充值记录当前页列表 / 响应示例 { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"blockId\" : integer, \"indexInBlock\" : integer } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 DepositData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 hash string 是 系统唯一hash标识 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" symbol string 是 操作币种 \"LRC\" amount string 是 申请数量 \"1000000000000000000\" txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 blockId integer 是 / indexInBlock integer 是 / "},"dex_apis/getUserWithdrawals.html":{"url":"dex_apis/getUserWithdrawals.html","title":"获取用户链上提现记录","keywords":"","body":"获取用户链上提现记录 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/withdrawals 功能 获取用户链上提现记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 tokenSymbol string 否 币种 \"LRC\" offset integer 否 偏移量(默认0)默认值 : 0L 1 withdrawalTypes string 否 request.getUserTxs.withdrawalTypes取值范围 : ['force_withdrawal', 'offchain_withdrawal'] \"force_withdrawal\" hashes string 否 The hashes (split by ,) of the transactions, normally its L2 tx hash, except the deposit which uses L1 tx hash. \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/withdrawals?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&tokenSymbol=LRC&offset=1&withdrawalTypes=force_withdrawal&hashes=0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/withdrawals\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&tokenSymbol\\=LRC\\&offset\\=1\\&withdrawalTypes\\=force_withdrawal\\&hashes\\=0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[WithdrawalData] 是 链上提现记录当前页列表 / 响应示例 { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"FORCE_WITHDRAWAL\", \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeTokenSymbol\" : \"ETH\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"distributeHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"requestId\" : 1, \"fastStatus\" : \"EMPTY\", \"blockId\" : integer, \"indexInBlock\" : integer } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 WithdrawalData 用户操作记录列表对象 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 txType string 是 操作类型 \"FORCE_WITHDRAWAL\" hash string 是 系统唯一hash标识 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" symbol string 是 操作币种 \"LRC\" amount string 是 申请数量 \"1000000000000000000\" txHash string 是 交易HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeTokenSymbol string 是 Fee token symbol \"ETH\" feeAmount string 是 操作手续费 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 blockNum integer 是 块高度 100 updatedAt integer 是 更新时间 1578572292000 distributeHash string 是 提现分发HASH \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" requestId integer 否 Request Id 1 fastStatus string 否 Fast withdrawal status取值范围 : ['EMPTY', 'PROCEEING', 'SUCCESSED', 'FAILED'] \"EMPTY\" blockId integer 是 / indexInBlock integer 是 / "},"dex_apis/submitOffChainWithdrawal.html":{"url":"dex_apis/submitOffChainWithdrawal.html","title":"二层提现请求","keywords":"","body":"二层提现请求 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/user/withdrawals 功能 二层提现请求 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string 是 ECDSA 签名信息 \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" 请求参数 字段 类型 必须 说明 举例 exchange string 是 exchange address \"1\" accountId integer 是 account ID 1003 owner string 是 account owner address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" token TokenVolumeV3 是 token to be withdrawal \"{tokenId: 0, volume: 1000000}\" maxFee TokenVolumeV3 是 maximum fee of withdrawal \"{tokenId: 0, volume: 1000000}\" storageId integer 是 offchain ID 1 validUntil integer 是 Timestamp for order to become invalid 1519217383 minGas integer 是 min gas for on-chain withdraw, Loopring exchange allocates gas for each distribution, but people can also assign this min gas, so Loopring have to allocate higher gas value for this specific distribution, 0 means let loopring choose the reasonable gas 1519217383 to string 是 withdraw to address \"0x12345678\" extraData string 否 extra data for complex withdraw mode, normally none \"0xABCD1234\" fastWithdrawalMode boolean 否 is fast withdraw mode \"false\" counterFactualInfo CounterFactualInfo 否 Counter factual wallet extra info to verify L1 ecdsa signature. \"{walletFactory: 0xABCD, walletOwner: 0xABCD, walletSalt: 1234}\" eddsaSignature string 否 eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string 否 ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" hashApproved string 否 An approved hash string which was already submitted on eth mainnet \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/user/withdrawals HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdf Content-Type: application/json { \"exchange\" : \"1\", \"accountId\" : 1003, \"owner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"token\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1519217383, \"minGas\" : 1519217383, \"to\" : \"0x12345678\", \"extraData\" : \"0xABCD1234\", \"fastWithdrawalMode\" : false, \"counterFactualInfo\" : { \"walletFactory\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletOwner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletSalt\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" }, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/user/withdrawals -d \\ '{ \"exchange\" : \"1\", \"accountId\" : 1003, \"owner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"token\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1519217383, \"minGas\" : 1519217383, \"to\" : \"0x12345678\", \"extraData\" : \"0xABCD1234\", \"fastWithdrawalMode\" : false, \"counterFactualInfo\" : { \"walletFactory\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletOwner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"walletSalt\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" }, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }' 响应字段 字段 类型 必须 说明 举例 hash string 是 The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string 是 Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processed取值范围 : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"true\" 响应示例 { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } 状态码 状态码 描述 100000 未知错误 100001 参数非法 102001 交易所ID不正确 102021 Nonce不合法 102022 转账者账户ID不合法 102023 接收者账户ID不合法 102024 不支持的转账收费token 102025 转账的token和费用token不匹配 模型 TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" CounterFactualInfo 字段 类型 必须 说明 举例 walletFactory string 是 Counter factual wallet factory contract address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" walletOwner string 是 Counter factual wallet owner address, NOT the wallet address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" walletSalt string 是 Salt to generate address from owner & other related info \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" "},"dex_apis/getUserTransfers.html":{"url":"dex_apis/getUserTransfers.html","title":"获取用户转账记录","keywords":"","body":"获取用户转账记录 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/transfers 功能 获取用户转账记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 否 用户ID 1 start integer 否 起始时间默认值 : 0L 1578558098000 end integer 否 结束时间默认值 : 0L 1578558098000 status string 否 当前状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer 否 限制条数(默认50) 50 tokenSymbol string 否 币种 \"LRC\" offset integer 否 偏移量(默认0)默认值 : 0L 1 transferTypes string 否 request.getUserTxs.transferTypes \"transfer, transfer_red\" hashes string 否 The hashes (split by ,) of the transactions, normally its L2 tx hash, except the deposit which uses L1 tx hash. \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/transfers?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&tokenSymbol=LRC&offset=1&transferTypes=transfer, transfer_red&hashes=0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/transfers\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&tokenSymbol\\=LRC\\&offset\\=1\\&transferTypes\\=transfer, transfer_red\\&hashes\\=0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 操作记录符合条件的总条数，用于分页 1 transactions List[TransferData] 是 User's transfer list / 响应示例 { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"txType\" : \"transfer\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"senderAddress\" : \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\", \"receiver\" : 1, \"receiverAddress\" : \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\", \"feeTokenSymbol\" : \"ETH\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"updatedAt\" : 1578572292000, \"memo\" : \"Air Drop\", \"blockId\" : integer, \"indexInBlock\" : integer } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 TransferData 字段 类型 必须 说明 举例 id integer 是 操作记录唯一ID 1 hash string 是 系统唯一hash标识 \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" txType string 是 操作类型 \"transfer\" symbol string 是 操作币种 \"LRC\" amount string 是 申请数量 \"1000000000000000000\" senderAddress string 否 field.TxData.senderAddress \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\" receiver integer 否 接收方 1 receiverAddress string 否 The transfer receiver's address \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\" feeTokenSymbol string 是 Fee token symbol \"ETH\" feeAmount string 是 操作手续费 \"1000000000000000\" status string 是 当前操作的状态取值范围 : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string 是 进度 \"100%\" timestamp integer 是 创建时间 1578572292000 updatedAt integer 是 更新时间 1578572292000 memo string 否 field.TxData.memo \"Air Drop\" blockId integer 是 / indexInBlock integer 是 / "},"dex_apis/getUserTrades.html":{"url":"dex_apis/getUserTrades.html","title":"获取用户交易记录","keywords":"","body":"获取用户交易记录 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/trades 功能 获取用户交易记录 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 market string 否 Trading pair \"LRC-ETH\" orderHash string 否 Order hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer 否 偏移量(默认0) 1 limit integer 否 限制条数(默认50) 50 fromId integer 否 The begin id of the query 1 fillTypes string 否 request.getUserTxs.fillTypes取值范围 : ['dex', 'amm'] \"dex\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/trades?accountId=1&market=LRC-ETH&orderHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1&limit=50&fromId=1&fillTypes=dex HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/trades\\?accountId\\=1\\&market\\=LRC-ETH\\&orderHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1\\&limit\\=50\\&fromId\\=1\\&fillTypes\\=dex 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 交易记录符合条件的总条数，用于分页 100 trades List[List[string]] 是 交易记录列表,每条交易记录按照数组顺序分别是交易时间，交易记录id,买卖方向，成交量，成交价格，市场和费用 \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" 响应示例 { \"totalNum\" : 100, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } 状态码 状态码 描述 100000 未知错误 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 "},"dex_apis/getUserFeeRates2.html":{"url":"dex_apis/getUserFeeRates2.html","title":"查询用户下单费率","keywords":"","body":"查询用户下单费率 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/orderFee 功能 返回用户在特定市场下单的费率 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 1 market string 是 以\",\"分隔的要查询的市场列表 \"LRC-ETH\" tokenB integer 是 要买入的Token ID 0 amountB string 是 要买入的Token数量，十进制表示的Token个数 \"10000000000000000\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/orderFee?accountId=1&market=LRC-ETH&tokenB=0&amountB=10000000000000000 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/orderFee\\?accountId\\=1\\&market\\=LRC-ETH\\&tokenB\\=0\\&amountB\\=10000000000000000 响应字段 字段 类型 必须 说明 举例 feeRate FeeRate 否 用户在市场下单的费率 \"{symbol:LRC-ETH, makerRate:0, takerRate:25}\" gasPrice string 否 计算费率使用的gas价格 \"10000000000\" 响应示例 { \"feeRate\" : { \"symbol\" : \"LRC-USDT\", \"makerRate\" : 20, \"takerRate\" : 20 }, \"gasPrice\" : \"10000000000\" } 状态码 状态码 描述 100000 未知错误 模型 FeeRate 市场对应费率 字段 类型 必须 说明 举例 symbol string 是 市场 \"LRC-USDT\" makerRate integer 是 maker费率 20 takerRate integer 是 taker费率 20 "},"dex_apis/getOrderUserRateAmount.html":{"url":"dex_apis/getOrderUserRateAmount.html","title":"基于用户VIP等级费率以及最大可能的费率查询用户Token最小下单量","keywords":"","body":"基于用户VIP等级费率以及最大可能的费率查询用户Token最小下单量 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/orderUserRateAmount 功能 此API返回两个结果，其一是根据用户费率（普通用户一般是0.15%)返回的最小下单量，相对高一些，其二是根据交易所最大费率（目前是0.6%）计算的最小下单量，相对较低 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 10086 market string 是 Trading pair \"LRC-ETH\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/orderUserRateAmount?accountId=10086&market=LRC-ETH HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/orderUserRateAmount\\?accountId\\=10086\\&market\\=LRC-ETH 响应字段 字段 类型 必须 说明 举例 gasPrice string 否 计算数量使用的gas价格 \"10000000000\" amounts List[TokenAmount] 否 数量 / cacheOverdueAt integer 否 计算数量使用的数据过期时间 1614683483382 响应示例 { \"gasPrice\" : \"10000000000\", \"amounts\" : [ { \"tokenSymbol\" : \"LRC\", \"discount\" : 1.0, \"baseOrderInfo\" : { \"minAmount\" : \"10000000000\", \"makerRate\" : 0, \"takerRate\" : 0 }, \"userOrderInfo\" : { \"minAmount\" : \"10000000000\", \"makerRate\" : 0, \"takerRate\" : 0 }, \"marketOrderInfo\" : { \"minimum\" : \"10000000000000000\", \"maximum\" : \"1000000000000000000\", \"dust\" : \"1000000000000000\" } } ], \"cacheOverdueAt\" : 1614683483382 } 状态码 状态码 描述 100000 未知错误 模型 TokenAmount Token数量 字段 类型 必须 说明 举例 tokenSymbol string 否 Token \"LRC\" discount number 否 下单费率折扣 1.0 baseOrderInfo OrderInfo 否 最小费率计算的最小下单量 / userOrderInfo OrderInfo 否 符合用户费率的最小下单量 / marketOrderInfo OrderAmountsV3 是 The amount requirements for submitting orders. \"{min:100000, max:900000, dust:10}\" OrderInfo Token数量 字段 类型 必须 说明 举例 minAmount string 否 最小数量 \"10000000000\" makerRate integer 否 Maker费率 0 takerRate integer 否 Taker费率 0 OrderAmountsV3 Contains information about the order amounts that are valid for usage with the token in order-related APIs. 字段 类型 必须 说明 举例 minimum string 是 The minimum amount enforced when submitting orders for the token. \"10000000000000000\" maximum string 是 The maximum amount enforced when submitting orders for the token. \"1000000000000000000\" dust string 是 The dust amount enforced when submitting orders for the token. \"1000000000000000\" "},"dex_apis/getBusinessFee2.html":{"url":"dex_apis/getBusinessFee2.html","title":"查询当前需要付费的数量","keywords":"","body":"查询当前需要付费的数量 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/user/offchainFee 功能 返回要付费的数量 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 accountId integer 是 用户ID 0 requestType integer 是 请求类型取值范围 : ['0:ORDER', '1:OFFCHAIN_WITHDRAWAL', '2:UPDATE_ACCOUNT', '3:TRANSFER', '4:FAST_OFFCHAIN_WITHDRAWAL', '5:OPEN_ACCOUNT', '6:AMM_EXIT', '7:DEPOSIT', '8:AMM_JOIN'] 1 tokenSymbol string 否 需要提现的Token \"LRC\" amount string 否 需要提现的数量 \"10000000000\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/user/offchainFee?accountId=0&requestType=1&tokenSymbol=LRC&amount=10000000000 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/user/offchainFee\\?accountId\\=0\\&requestType\\=1\\&tokenSymbol\\=LRC\\&amount\\=10000000000 响应字段 字段 类型 必须 说明 举例 token string 是 收费的token \"ETH\" fee string 是 收费数量 \"2000000000000000\" discount number 是 token付费折扣 1.0 响应示例 { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\", \"discount\" : 1.0 } 状态码 状态码 描述 100000 未知错误 "},"dex_apis/getAmmPools.html":{"url":"dex_apis/getAmmPools.html","title":"Get AMM pool configurations","keywords":"","body":"Get AMM pool configurations 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/amm/pools 功能 Returns the configurations of all supported AMM pools API 描述 HTTP头 无 请求参数 无 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/amm/pools HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/amm/pools 响应字段 字段 类型 必须 说明 举例 pools List[AmmPoolInfoV3] 是 AMM pool list / 响应示例 { \"pools\" : [ { \"name\" : \"LRC-USDT-Pool-1\", \"market\" : \"AMM-LRC-USDT\", \"address\" : \"0xa6fa83b62b09174694EFD7EE3aE608ad478a138E\", \"version\" : \"1.0.0\", \"tokens\" : { \"pooled\" : [2,3,5], \"lp\" : 0 }, \"feeBips\" : 6, \"precisions\" : { \"price\" : 6, \"amount\" : 6 }, \"createdAt\" : \"1609466400000\", \"status\" : 7 } ] } 状态码 状态码 描述 100000 未知错误 模型 AmmPoolInfoV3 AMM pool info 字段 类型 必须 说明 举例 name string 是 AMM pool name, used to calculate domainSeparator of EIP712 hash if use chooses ECDSA sign path. \"LRC-USDT-Pool-1\" market string 是 AMM pool market name, can be used to query market related info like ticker, etc \"AMM-LRC-USDT\" address string 是 AMM pool address \"0xa6fa83b62b09174694EFD7EE3aE608ad478a138E\" version string 是 AMM pool contract version \"1.0.0\" tokens AmmPoolTokens 是 AMM pool token info \"{[2,3],5}\" feeBips integer 是 AMM fee bips 6 precisions AmmPoolPrecisions 是 AMM pool precision configuration \"{price:6, amount: 8}\" createdAt string 是 AMM pool online date \"1609466400000\" status integer 是 AMM market status 7 AmmPoolTokens Wrapper object containing information about the tokens in the pool 字段 类型 必须 说明 举例 pooled List[object] 是 An array containing the unique identifiers of those tokens that are currently in the pool, seq matters as most requests ask for the same sequence. \"[2,3,5]\" lp integer 是 The unique identifier of the pool-specific LP token. This token is minted when supplying liquidity to the pool, and represents liquidity stakes in it 0 AmmPoolPrecisions The precision requirement of a AMM pool 字段 类型 必须 说明 举例 price integer 是 The price precision requirement of a AMM pool 6 amount integer 是 The amount precision requirement of a AMM pool 6 "},"dex_apis/getAmmPoolBalance.html":{"url":"dex_apis/getAmmPoolBalance.html","title":"Get AMM pool balance snapshot","keywords":"","body":"Get AMM pool balance snapshot 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/amm/balance 功能 Returns the snapshot of specific AMM pool API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 poolAddress string 是 input AMM pool address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/amm/balance?poolAddress=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/amm/balance\\?poolAddress\\=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd 响应字段 字段 类型 必须 说明 举例 poolName string 是 AMM市场资金池名称 \"AMM-LRC-ETH\" poolAddress string 是 AMM市场资金池合约地址 \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" pooled List[TokenVolumeV3] 是 AMM in pool tokens balances \"[{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}]\" lp TokenVolumeV3 是 AMM pool mint token balance \"{tokenId: 0, volume:1000000000}\" risky boolean 是 AMM pool risky flag, true if AMM pool TVL is low which means big slippage. \"false\" 响应示例 { \"poolName\" : \"AMM-LRC-ETH\", \"poolAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"pooled\" : [{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}], \"lp\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" }, \"risky\" : false } 状态码 状态码 描述 100000 未知错误 模型 TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" "},"dex_apis/submitAmmPoolJoin.html":{"url":"dex_apis/submitAmmPoolJoin.html","title":"AMM资金池入金操作","keywords":"","body":"AMM资金池入金操作 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/amm/join 功能 返回AMM资金池入金操作状态 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 The account owner adderss \"0xe25c94ba036d91b48833acb637f719038f07372d\" poolAddress string 是 AMM pool address to be joined \"0xe25c94ba036d91b48833acb637f719038f07372d\" joinTokens AmmPoolJoinTokens 是 Token amounts to be joined and the minimum mint token to be paied back \"{\"pooled\": [{\"id\": 0,\"amount\": 0}],\"minimumLp\": 0}\" storageIds string 是 Offchain request storage Id \"1\" fee string 是 fee of join request \"1000000000000000000\" validUntil integer 是 Timestamp for order to become invalid 1598431481 eddsaSignature string 否 AMM join request eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string 否 AMM join request ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/amm/join HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"joinTokens\" : { \"pooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"minimumLp\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" } }, \"storageIds\" : \"1\", \"fee\" : \"1000000000000000000\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/amm/join -d \\ '{ \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"joinTokens\" : { \"pooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"minimumLp\" : { \"tokenId\" : 0, \"volume\" : \"1000000000000\" } }, \"storageIds\" : \"1\", \"fee\" : \"1000000000000000000\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }' 响应字段 字段 类型 必须 说明 举例 hash string 是 The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string 是 Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processed取值范围 : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"true\" 响应示例 { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } 状态码 状态码 描述 100000 未知错误 100001 参数非法 102001 交易所ID不正确 102021 Nonce不合法 102022 转账者账户ID不合法 102023 接收者账户ID不合法 102024 不支持的转账收费token 102025 转账的token和费用token不匹配 模型 AmmPoolJoinTokens escribes an AMM join transaction 字段 类型 必须 说明 举例 pooled List[TokenVolumeV3] 是 Describes an amount of a specific token to be supplied to the pool, the seq matters, and must be the same as the pool token list returned by pool info \"[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]\" minimumLp TokenVolumeV3 是 The minimum amoun of LP token desired in exchange for supplying liquidity to the pool \"{tokenId:0, volume: 100000}\" TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" "},"dex_apis/submitAmmPoolExit.html":{"url":"dex_apis/submitAmmPoolExit.html","title":"AMM资金池出金操作","keywords":"","body":"AMM资金池出金操作 流量控制: 1 每 秒 摘要 HTTP 方法 POST 访问路径 /api/v3/amm/exit 功能 返回AMM资金池出金操作状态 API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 owner string 是 The account owner adderss \"0xe25c94ba036d91b48833acb637f719038f07372d\" poolAddress string 是 AMM pool address to be joined \"0xe25c94ba036d91b48833acb637f719038f07372d\" exitTokens AmmPoolExitTokens 是 Exit token amounts, include mint token to burn and the minimum exit tokens to be get back \"{\"burned\": 0,\"unpooled\": [{\"id\": 0,\"amount\": 0}]}\" storageId integer 是 Offchain request storage Id 1 maxFee string 是 Maximum fee of exit request, use the last in pool token by default \"1000000000000000000\" validUntil integer 是 Timestamp for order to become invalid 1598431481 eddsaSignature string 否 AMM exit request eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string 否 AMM exit request ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" 请求示例 HTTPCURLPOST https://api3.loopring.io/api/v3/amm/exit HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"exitTokens\" : { \"unPooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"burned\" : \"1000000000\" }, \"storageId\" : 1, \"maxFee\" : \"1000000000000000000\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" https://api3.loopring.io/api/v3/amm/exit -d \\ '{ \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"exitTokens\" : { \"unPooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"burned\" : \"1000000000\" }, \"storageId\" : 1, \"maxFee\" : \"1000000000000000000\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }' 响应字段 字段 类型 必须 说明 举例 hash string 是 The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string 是 Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processed取值范围 : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean 是 Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true取值范围 : [True, False] \"true\" 响应示例 { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } 状态码 状态码 描述 100000 未知错误 100001 参数非法 102001 交易所ID不正确 102021 Nonce不合法 102022 转账者账户ID不合法 102023 接收者账户ID不合法 102024 不支持的转账收费token 102025 转账的token和费用token不匹配 模型 AmmPoolExitTokens escribes an AMM join transaction 字段 类型 必须 说明 举例 unPooled List[TokenVolumeV3] 是 Describes list of the amount of a specific token to be removed from the pool, tokens seq should be same as AMM pool info \"[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]\" burned string 是 The minimum amoun of LP token to burn \"1000000000\" TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. 字段 类型 必须 说明 举例 tokenId integer 是 The Loopring's token identifier. 0 volume string 是 The volume of the token \"1000000000000\" "},"dex_apis/getAmmUserTransactions.html":{"url":"dex_apis/getAmmUserTransactions.html","title":"User's AMM join/exit transactions","keywords":"","body":"User's AMM join/exit transactions 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/amm/user/transactions 功能 Return the user's AMM join/exit transactions API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 accountId integer 否 Looprings account identifier. 1578558098000 start integer 否 Date from which to start fetching AMM transactions. 1578558098000 end integer 否 End Date of the query 1578558098000 limit integer 否 Used to limit the number of returned records. Useful in implementing pagination. 50 offset integer 否 Used to apply an offset when looking for valid records. Useful in implementing 0 txTypes string 否 Transaction type: join or exit \"0\" txStatus string 否 The AMM transaction status. \"0\" ammPoolAddress string 否 The address of the pool on which the swap was submitted. \"0\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/amm/user/transactions?accountId=1578558098000&start=1578558098000&end=1578558098000&limit=50&offset=0&txTypes=0&txStatus=0&ammPoolAddress=0 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/amm/user/transactions\\?accountId\\=1578558098000\\&start\\=1578558098000\\&end\\=1578558098000\\&limit\\=50\\&offset\\=0\\&txTypes\\=0\\&txStatus\\=0\\&ammPoolAddress\\=0 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 Number of AMM pool transactions 10 transactions List[AmmTransactionDataV3] 是 List of AMM pool transactions / 响应示例 { \"totalNum\" : 10, \"transactions\" : [ { \"hash\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"txType\" : \"join\", \"txStatus\" : \"processing\", \"ammPoolAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"ammLayerType\" : \"layer_2\", \"poolTokens\" : [ { \"tokenId\" : 0, \"amount\" : \"1000000\", \"actualAmount\" : \"100000\", \"feeAmount\" : \"500000\" } ], \"lpToken\" : { \"tokenId\" : 0, \"amount\" : \"1000000\", \"actualAmount\" : \"100000\", \"feeAmount\" : \"500000\" }, \"createdAt\" : 1608189538074, \"updatedAt\" : 1608209538074, \"blockId\" : integer, \"indexInBlock\" : integer } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 AmmTransactionDataV3 AMM transaction info data 字段 类型 必须 说明 举例 hash string 是 AMM transaction hash \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" txType string 是 AMM transaction type, i.e., join, exit, etc取值范围 : ['join', 'exit'] \"join\" txStatus string 是 AMM transaction processing status, i.e., processing, processed, failed, etc取值范围 : ['processing', 'cancelled', 'processed'] \"processing\" ammPoolAddress string 是 AMM pool address of query \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" ammLayerType string 是 AMM transaction layer, 1 or 2取值范围 : ['layer_1', 'layer_2'] \"layer_2\" poolTokens List[AmmTransferDataV3] 是 The in pool tokens transfers records of the AMM transaction / lpToken AmmTransferDataV3 是 The lp tokens transfers records of the AMM transaction / createdAt integer 是 Transaction creation time 1608189538074 updatedAt integer 是 Transaction update time 1608209538074 blockId integer 是 / indexInBlock integer 是 / AmmTransferDataV3 AMM transfer info data 字段 类型 必须 说明 举例 tokenId integer 是 AMM transfer token id 0 amount string 是 AMM transfer token amount \"1000000\" actualAmount string 是 Actual AMM transfer token amount due to precision processing \"100000\" feeAmount string 是 Actual AMM transfer fee amount \"500000\" "},"dex_apis/getAmmTrades.html":{"url":"dex_apis/getAmmTrades.html","title":"get AMM pool trade transactions","keywords":"","body":"get AMM pool trade transactions 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/amm/trades 功能 get AMM pool trade transactions API 描述 HTTP头 无 请求参数 字段 类型 必须 说明 举例 ammPoolAddress string 是 The address of the pool on which the swap was submitted. \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" limit integer 否 Used to limit the number of returned records. Useful in implementing pagination. 50 offset integer 否 Used to apply an offset when looking for valid records. Useful in implementing 0 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/amm/trades?ammPoolAddress=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd&limit=50&offset=0 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9curl https://api3.loopring.io/api/v3/amm/trades\\?ammPoolAddress\\=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\\&limit\\=50\\&offset\\=0 响应字段 字段 类型 必须 说明 举例 totalNum integer 是 Number of trades 12345 trades List[AmmTradeDataV3] 是 AMM trade list / 响应示例 { \"totalNum\" : 12345, \"trades\" : [ { \"accountId\" : 12345, \"orderHash\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"market\" : \"AMM-DAI-ETH\", \"side\" : \"BUY\", \"size\" : \"100000000\", \"price\" : 0.03, \"feeAmount\" : \"100000000\", \"createdAt\" : 1608189538074 } ] } 状态码 状态码 描述 100000 未知错误 107001 用户ID不能为空 104001 APIKEY不能为空 104002 APIKEY验证失败 104003 用户不存在 模型 AmmTradeDataV3 AMM trade info data 字段 类型 必须 说明 举例 accountId integer 是 trader's accountId 12345 orderHash string 是 AMM trade's order hash \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" market string 是 The trade market \"AMM-DAI-ETH\" side string 是 The trade direction, buy or sell取值范围 : ['BUY', 'SELL'] \"BUY\" size string 是 The trade volume \"100000000\" price number 是 The trade price 0.03 feeAmount string 是 The trade fee \"100000000\" createdAt integer 是 The trade's creation time 1608189538074 "},"dex_apis/getBlock.html":{"url":"dex_apis/getBlock.html","title":"Get L2 block info","keywords":"","body":"Get L2 block info 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/block/getBlock 功能 Get L2 block info by block id API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 字段 类型 必须 说明 举例 id string 否 The block id, could be finalized, confirmed, or block_idx_num默认值 : finalized取值范围 : ['finalized', 'confirmed', '{block_idx_num}'] \"1234\" 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/block/getBlock?id=1234 HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/block/getBlock\\?id\\=1234 响应字段 字段 类型 必须 说明 举例 blockId integer 是 The num index of the block 1235 blockSize integer 是 The block size 64 exchange string 是 The exchange address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" txHash string 是 The txHash of the block \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" status string 是 The status of the block \"pending\" createdAt integer 是 The creation time of the block 1627904776000 transactions List[TransactionBlock] 是 The txs list inside the block / 响应示例 { \"blockId\" : 1235, \"blockSize\" : 64, \"exchange\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"txHash\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"status\" : \"pending\", \"createdAt\" : 1627904776000, \"transactions\" : [ { \"txType\" : \"transfer\", \"accountId\" : 10006, \"owner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"token\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"toToken\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"fee\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"validUntil\" : 1627904776, \"toAccountId\" : 10006, \"toAccountAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"storageId\" : 2, \"orderA\" : { \"storageID\" : 6, \"accountID\" : 10006, \"amountS\" : \"100\", \"amountB\" : \"600\", \"tokenS\" : 6, \"tokenB\" : 32768, \"validUntil\" : 1235123512, \"taker\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"feeBips\" : 60, \"isAmm\" : true, \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"fillS\" : 500 }, \"orderB\" : { \"storageID\" : 6, \"accountID\" : 10006, \"amountS\" : \"100\", \"amountB\" : \"600\", \"tokenS\" : 6, \"tokenB\" : 32768, \"validUntil\" : 1235123512, \"taker\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"feeBips\" : 60, \"isAmm\" : true, \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"fillS\" : 500 }, \"valid\" : false, \"nonce\" : 65, \"minterAccountId\" : 10008, \"minter\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftToken\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"nftType\" : \"eip1155\" } ] } 状态码 状态码 描述 100000 未知错误 模型 TransactionBlock 字段 类型 必须 说明 举例 txType string 是 The txType of the transaction, one in [Noop,Deposit,Withdraw,Transfer,SpotTrade,AccountUpdate,AmmUpdate,JoinAmm,ExitAmm,SignatureVerification,NftMint,NftData]取值范围 : ['Noop', 'Deposit', 'Withdraw', 'Transfer', 'SpotTrade', 'AccountUpdate', 'AmmUpdate', 'JoinAmm', 'ExitAmm', 'SignatureVerification', 'NftMint', 'NftData'] \"transfer\" accountId integer 否 The accountId of the transaction 10006 owner string 否 The owner of the transaction \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" token _Token 否 The token info of the transaction / toToken _Token 否 The toToken info of the transaction if the tx has destination tokenId / fee _Token 否 The fee of the transaction / validUntil integer 否 The validUntil of the transaction 1627904776 toAccountId integer 否 The toAccountId of the transaction if tx has a destination account 10006 toAccountAddress string 否 The toAccountAddress of the transaction if tx has a destination account \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" storageId integer 否 The storageId of the transaction 2 orderA _Order 否 The orderA of the transaction if tx is SpotTrade / orderB _Order 否 The orderB of the transaction if tx is SpotTrade / valid boolean 否 The validness of the transaction \"false\" nonce integer 否 The nonce of the transaction if it uses nonce 65 minterAccountId integer 否 The minterAccountId of the transaction if its a mint tx 10008 minter string 否 The minter of the transaction if its a mint tx \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" nftToken _Token 否 The nftToken of the transaction if its a NFT related tx / nftType string 否 The nftType of the transaction if its a mint tx \"eip1155\" _Token 字段 类型 必须 说明 举例 tokenId ResultInfo 否 The tokenId of the token \"6\" tokenAddress string 否 The token Address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" nftData string 否 The nftData of the NFT token \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" nftId string 否 The NFT_ID of the NFT token \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" amount string 否 The token amount \"100\" _Order 字段 类型 必须 说明 举例 storageID integer 是 The storageId of the order 6 accountID integer 是 The accountID of the order 10006 amountS string 是 The amountS of the order \"100\" amountB string 是 The amountB of the order \"600\" tokenS integer 是 The tokenS of the order 6 tokenB integer 是 The tokenB of the order 32768 validUntil integer 是 The validUntil of the order 1235123512 taker string 是 The taker of the order \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" feeBips integer 是 The feeBips of the order 60 isAmm boolean 是 If the order isAmm \"true\" nftData string 是 The nftData of the order, if its NFT order \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" fillS integer 是 The fillS of the order 500 "},"dex_apis/getPendingRequests.html":{"url":"dex_apis/getPendingRequests.html","title":"Get pending txs","keywords":"","body":"Get pending txs 流量控制: 1 每 秒 摘要 HTTP 方法 GET 访问路径 /api/v3/block/getPendingRequests 功能 Get pending txs to be packed into next block API 描述 HTTP头 字段 类型 必须 说明 举例 X-API-KEY string 是 ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" 请求参数 无 请求示例 HTTPCURLGET https://api3.loopring.io/api/v3/block/getPendingRequests HTTP/1.1 Host: api3.loopring.io Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" https://api3.loopring.io/api/v3/block/getPendingRequests 响应字段 字段 类型 必须 说明 举例 txType string 是 The txType of the transaction, one in [Noop,Deposit,Withdraw,Transfer,SpotTrade,AccountUpdate,AmmUpdate,JoinAmm,ExitAmm,SignatureVerification,NftMint,NftData]取值范围 : ['Noop', 'Deposit', 'Withdraw', 'Transfer', 'SpotTrade', 'AccountUpdate', 'AmmUpdate', 'JoinAmm', 'ExitAmm', 'SignatureVerification', 'NftMint', 'NftData'] \"transfer\" accountId integer 否 The accountId of the transaction 10006 owner string 否 The owner of the transaction \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" token _Token 否 The token info of the transaction / toToken _Token 否 The toToken info of the transaction if the tx has destination tokenId / fee _Token 否 The fee of the transaction / validUntil integer 否 The validUntil of the transaction 1627904776 toAccountId integer 否 The toAccountId of the transaction if tx has a destination account 10006 toAccountAddress string 否 The toAccountAddress of the transaction if tx has a destination account \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" storageId integer 否 The storageId of the transaction 2 orderA _Order 否 The orderA of the transaction if tx is SpotTrade / orderB _Order 否 The orderB of the transaction if tx is SpotTrade / valid boolean 否 The validness of the transaction \"false\" nonce integer 否 The nonce of the transaction if it uses nonce 65 minterAccountId integer 否 The minterAccountId of the transaction if its a mint tx 10008 minter string 否 The minter of the transaction if its a mint tx \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" nftToken _Token 否 The nftToken of the transaction if its a NFT related tx / nftType string 否 The nftType of the transaction if its a mint tx \"eip1155\" 响应示例 { \"txType\" : \"transfer\", \"accountId\" : 10006, \"owner\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"token\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"toToken\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"fee\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"validUntil\" : 1627904776, \"toAccountId\" : 10006, \"toAccountAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"storageId\" : 2, \"orderA\" : { \"storageID\" : 6, \"accountID\" : 10006, \"amountS\" : \"100\", \"amountB\" : \"600\", \"tokenS\" : 6, \"tokenB\" : 32768, \"validUntil\" : 1235123512, \"taker\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"feeBips\" : 60, \"isAmm\" : true, \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"fillS\" : 500 }, \"orderB\" : { \"storageID\" : 6, \"accountID\" : 10006, \"amountS\" : \"100\", \"amountB\" : \"600\", \"tokenS\" : 6, \"tokenB\" : 32768, \"validUntil\" : 1235123512, \"taker\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"feeBips\" : 60, \"isAmm\" : true, \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"fillS\" : 500 }, \"valid\" : false, \"nonce\" : 65, \"minterAccountId\" : 10008, \"minter\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftToken\" : { \"tokenId\" : 6, \"tokenAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"nftData\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"nftId\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"amount\" : \"100\" }, \"nftType\" : \"eip1155\" } 状态码 状态码 描述 100000 未知错误 模型 _Token 字段 类型 必须 说明 举例 tokenId ResultInfo 否 The tokenId of the token \"6\" tokenAddress string 否 The token Address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" nftData string 否 The nftData of the NFT token \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" nftId string 否 The NFT_ID of the NFT token \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" amount string 否 The token amount \"100\" _Order 字段 类型 必须 说明 举例 storageID integer 是 The storageId of the order 6 accountID integer 是 The accountID of the order 10006 amountS string 是 The amountS of the order \"100\" amountB string 是 The amountB of the order \"600\" tokenS integer 是 The tokenS of the order 6 tokenB integer 是 The tokenB of the order 32768 validUntil integer 是 The validUntil of the order 1235123512 taker string 是 The taker of the order \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" feeBips integer 是 The feeBips of the order 60 isAmm boolean 是 If the order isAmm \"true\" nftData string 是 The nftData of the order, if its NFT order \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" fillS integer 是 The fillS of the order 500 "},"websocket/overview.html":{"url":"websocket/overview.html","title":"WebSocket API","keywords":"","body":"WebSocket API 接入URL mainnet: wss://ws.api3.loopring.io/v3/ws testnet(goerli): wss://ws.uat2.loopring.io/v3/ws 订阅要求 在订阅websocket之前，需要先拿到wsApiKey，然后用该wsApiKey进行连接，步骤如下： 访问REST API\"/v3/ws/key\"得到返回的{\"key\":\"fx2xW5hoVFbcaanWS\"} 将fx2xW5hoVFbcaanWS拼接到url地址进行websocket连接, 即连接wss://ws.uat3.loopring.io/v3/ws?wsApiKey=fx2xW5hoVFbcaanWS. 订阅 客户端可以通过发送JSON数据订阅多个主题： { \"op\": \"sub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": true, \"topics\": [ { \"topic\": \"account\" }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic\": \"orderbook\", \"market\": \"LRC-ETH\", \"level\": 0 }, { \"topic\": \"orderbook\", \"market\": \"LRC-USDT\", \"level\": 0, \"count\": 20, \"snapshot\": true }, { \"topic\": \"ammpool\", \"poolAddress\": \"0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036\", \"snapshot\": true } ] } 在一次订阅中，如果topics中任何一个主题需要ApiKey，那么本次操作就必须包含ApiKey。 在一次订阅中，相同的主题可以出现多次，但同一个主题的相同的配置只可以出现一次。 在一次订阅中，如果有任何参数错误，则全部订阅都会失败。 如果unsubscribeAll是true，订阅前会先退订之前订阅的所有主题。 订阅时客户端可以指定一个sequence代表序列号，后台返回结果也会附带同样的序列号。 最多可以订阅20个主题 退订 客户端可以通过发送JSON数据退订多个主题： { \"op\":\"unSub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": false, \"topics\": [ { \"topic\": \"account\", }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic\": \"orderbook\", \"unsubscribeAll\":true } ] }, 在一次退订中，如果topics中任何一个主题需要ApiKey，那么本次操作就必须包含ApiKey。 在一次退订中，相同的主题可以出现多次，但同一个主题的相同的配置只可以出现一次。 在一次退订中，如果有任何参数错误，则全部订阅都会失败。 如果unsubscribeAll是true，所有主题都会被退订；如果在某个主题内将unsubscribeAll设置为true，那么该主题的所有配置都会被退订。 退订时客户端可以指定一个sequence代表序列号，后台返回结果也会附带同样的序列号。 心跳 WebSocket链接建立后，中继会每30秒会发送“ping”消息给客户端做心跳检测。如果客户端在最近2分钟内都没有任何“pong”消息，中继会断开WebSocket链接。如果客户端的“pong”消息数量超过服务端发送的“ping”消息数量，中继也会断开WebSocket链接。 返回值 字段 类型 必现 说明 op string 是 订阅（\"sub\"）或退订（unSub\"） sequence integer 否 操作序列号 topics JSON 是 订阅主题和参数 result Result 是 订阅结果 Result结构 字段 类型 必现 说明 status string 是 订阅是否成功 error Error 否 订阅失败时的错误信息 Error结构 字段 类型 必现 说明 code integer 是 状态码 message string 是 错误信息 状态码 状态码 描述 104100 空的订阅信息 104101 不支持的操作（路印中继服务器仅支持sub 和 unsub操作） 104102 不支持的主题 104103 重复的订阅主题 104104 缺少ApiKey信息 104105 与之前订阅使用的ApiKey不符 104112 不合法的ApiKey 104113 退订未曾订阅过的主题 104114 无法通过APiKey找到对应的用户 104115 无法识别的订阅消息 104116 订阅的主题超过上限 示例 订阅成功示例： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic\": \"orderbook\", \"market\": \"LRC-ETH\", \"level\": 0 } ], \"result\": { \"status\": \"ok\" } } 订阅参数不合法的失败示例： { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic\": \"candlestick\", \"market\": \"LRC-ETH\", \"count\": 10 } ], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104106, \"message\": \"receive illegal arg for candlestick:lrc-eth\" } } } 订阅参数无法解析的失败示例： { \"op\": \"sub\", \"topics\":[], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104115, \"message\": \"unexpected msg:xxx\" } } } "},"websocket/account.html":{"url":"websocket/account.html","title":"账号金额更新","keywords":"","body":"账号金额更新 订阅此主题以接收有关用户余额更新的通知。 订阅规则 主题名称：account 订阅该主题是否需要提供ApiKey：是 参数列表 该主题支持一个可选的v3标记，用于表示是否订阅v3格式，即包含NFT信息的消息。 Parameter Required Note accountId N apiKey绑定了account,因此不必传 v3 N 是否订阅v3格式，默认为否，即兼容之前的订阅格式 推送示例 { \"topic\": { \"topic:\": \"account\" }, \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"amountLocked\": \"0\" } } 模型 推送消息数据结构 如果是v3消息 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data BalanceV3 是 余额信息(包含NFT信息) 否则和之前一样 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data Balance 是 余额信息 BalanceV3 Field Type Required Note accountId integer Y Account ID tokenId integer Y Token ID total string Y Total token balance locked string Y Token balance locked by orders nftId string N NFT ID if it's NFT token nftData string N NFT hash data if it's NFT token tokenAddress string N Nft token address if it's NFT token Balance数据结构 字段 类型 必现 说明 accountId integer 是 账户ID tokenId integer 是 通证ID totalAmount string 是 用户余额 amountLocked string 是 冻结的余额 "},"websocket/order.html":{"url":"websocket/order.html","title":"用户订单更新","keywords":"","body":"用户订单更新 订阅此主题以接收特定交易对定单更新的通知。 订阅规则 主题名称：order 订阅该主题是否需要提供ApiKey：是 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） 状态码 状态码 描述 104110 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, \"ts\":1565844328, \"data\": { \"hash\": \"11212\", \"clientOrderId\": \"myOrder\", \"size\": \"500000000\", \"volume\": \"210000000\", \"price\": \"0.000004\", \"filledSize\": \"30000000\", \"filledVolume\": \"100000\", \"filledFee\": \"1000000\", \"status\": \"processing\", \"createdAt\": \"1494900087\", \"validSince\": \"1494900087\", \"validUntil\": \"1495900087\", \"side\": \"buy\", \"market\": \"LRC-ETH\" } } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data Order 是 订单数据 Order数据结构 字段 类型 必现 说明 hash string 是 订单哈希 clientOrderId string 是 用户自定义ID size string 是 Base Token 的数量 volume string 是 Quote Token 的数量 price string 是 订单价格 filledSize string 是 已经成交的Base Token的数量 filledVolume string 是 已经成交的Quote Token的数量 filledFee string 是 已支付的手续费 status string 是 订单状态 createdAt integer 是 订单创建时间 updateAt integer 是 订单最后一次的更新时间 side string 是 买或卖 market string 是 交易对 订单状态取值范围 状态 说明 processing 订单有效（订单等待成交或者已经成交一部分） processed 订单完全成交 cancelling 取消中 cancelled 订单取消 expired 订单过期 waiting 订单还未生效 "},"websocket/orderbook.html":{"url":"websocket/orderbook.html","title":"订单簿更新","keywords":"","body":"订单簿更新 订阅此主题以接收特定交易对定单薄更新的通知。 订阅规则 主题名称：orderbook 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） level 是 深度聚合级别 count 否 买卖深度条目数量，值不可以超过50。仅在snapshot = true时生效 snapshot 否 默认为false。 如果该值为true，并且当深度条目有任何一条变化，那么指定数量的深度条目会被全量推送给客户端。 状态码 状态码 描述 104107 主题或参数非法 推送示例 { \"topic\": { \"topic:\": \"orderbook\", \"market\": \"LRC-USDT\", \"level\": 0 }, \"ts\": 1584717910000, \"startVersion\": 1212121, \"endVersion\": \"1212123\", \"data\": { \"bids\": [ [ \"295.97\", //price \"456781000000000\", //size \"3015000000000\", //volume \"4\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） startVersion integer 是 该次推送的起始版本号 endVersion integer 是 该次推送的终结版本号 data Orderbook 是 订单簿信息 Orderbook数据结构 字段 类型 必现 说明 bids List[List[string]] 是 代表买单深度的PriceSlot数组列表 asks List[List[string]] 是 代表卖单深度的PriceSlott数组列表 PriceSlot数组 序号 类型 必现 说明 1 string 是 价格 2 string 是 数量（基础通证的数量） 3 string 是 成交额（ 计价通证的数量） 4 string 是 聚合的订单数目 需要注意的是，每一个推送中的数量和成交额代表这个价格目前的数量和成交额的绝对值，而不是相对变化。 构建本地订单簿 您可以通过下列步骤构建本地订单簿： 订阅 orderbook主题。 开始缓存收到的更新。同一个价位，后收到的更新覆盖前面的。 访问接口 api/v1/depth 获得一个全量的深度快照。 3中获取的快照如果version大于本地version（endVersion），则直接覆盖，如果小于本地version，则相同的价格不覆盖，不同的价格则覆盖。 将深度快照中的内容更新到本地订单簿副本中，并从WebSocket接收到的第一个startVersion version + 1 且 endVersion >= 本地version 的event开始继续更新本地副本。 每一个新推送的startVersion应该恰好等于上一个event的endVersion + 1，否则可能出现了丢包，请从step3重新进行初始化。 如果某个价格对应的挂单量为0，表示该价位的挂单已经撤单或者被吃，应该移除这个价位。 "},"websocket/trade.html":{"url":"websocket/trade.html","title":"最新成交更新","keywords":"","body":"最新成交更新 订阅此主题以接收特定交易对最新成交的通知。 订阅规则 主题名称：trade 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） 状态码 状态码 描述 104109 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"trade\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ [ \"1584717910000\", //timestamp \"123456789\", //tradeId \"buy\", //side \"500000\", //size \"0.0008\", //price \"100\" //fee ] ] } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data List[List[string]] 是 Trade数组列表 Trade数组 序号 类型 必现 说明 1 integer 是 成交时间 2 integer 是 成交记录的编号 3 string 是 Taker的方向（买或卖） 4 string 是 Base Token的成交数量 5 string 是 成交价格 6 string 是 Base Token的收费 "},"websocket/ticker.html":{"url":"websocket/ticker.html","title":"Ticker更新","keywords":"","body":"Ticker更新 订阅此主题以接收特定交易对ticker更新的通知。 订阅规则 主题名称：ticker 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） 状态码 状态码 描述 104111 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"ticker\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ \"LRC-ETH\", //market \"1584717910000\", //timestamp \"5000000\", //size \"1000\", //volume \"0.0002\", //open \"0.00025\", //high \"0.0002\", //low \"0.00025\", //close \"5000\", //count \"0.00026\", //bid \"0.00027\" //ask ] } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data List[string] 是 Ticker数组 Ticker数组 序号 类型 必现 说明 1 string 是 交易对 2 integer 是 Ticker生成时间 3 string 是 Base Token的成交量 4 string 是 Quote Token 的成交量 5 string 是 开盘价 6 string 是 最高价 7 string 是 最低价 8 string 是 最新成交价 9 integer 是 成交笔数 10 string 是 买单最高价 11 string 是 卖单最低价 "},"websocket/candlestick.html":{"url":"websocket/candlestick.html","title":"Candlestick更新","keywords":"","body":"Candlestick更新 订阅此主题以接收特定交易对Candlestick更新的通知。 订阅规则 主题名称：candlestick 订阅该主题是否需要提供ApiKey：否 参数列表 参数名 必现 描述 market 是 交易对（支持的交易对可以通过api接口api/v2/exchange/markets获取） interval 是 时间间隔 时间间隔 间隔 说明 1min 1分钟 5min 5分钟 15min 15分钟 30min 30分钟 1hr 1小时 2hr 2小时 4hr 4小时 12hr 12小时 1d 1天 1w 1周 状态码 状态码 描述 104106 主题或参数非法 推送示例 { \"topic\": { \"topic\": \"candlestick\", \"interval\": \"2hr\" }, \"ts\":1584717910000, \"data\": [ \"1584717910000\", //start \"5000\", //count \"3997.3\", //open \"3998.7\", //close \"4031.9\", //high \"3982.5\", //low \"500000000000000000\", //size \"2617521141385000000\", //volume ] } 模型 推送消息数据结构 字段 类型 必现 说明 topic JSON 是 主题和参数 ts integer 是 推送时间（毫秒） data List[string] （Candlestick列表） 是 cCandlestick数组 Candlestick数组 序号 类型 必现 说明 1 integer 是 指开盘时间 2 integer 是 成交笔数 3 string 是 开盘价格 4 string 是 收盘价格 5 string 是 最高价 6 string 是 最低价 7 string 是 为wei为单位的Base Token的成交数量 8 string 是 为wei为单位 Quote Token的成交数量 "},"websocket/ammsnapshot.html":{"url":"websocket/ammsnapshot.html","title":"AMM资金池快照","keywords":"","body":"AMM Pool Snapshot Notification Subscribe to this topic to receive notifications about token balance updates for specific AMM Pool. Rules Topic name: ammpool ApiKey requred: No snapshot mode ONLY! Parameters Parameter Required Note poolAddress Y poolAddress Status code Value Note 102034 receive illegal arg for topic ammpool Notification example { \"topic\" : { \"topic\" : \"ammpool\", \"poolAddress\" : \"0x18920d6E6Fb7EbE057a4DD9260D6D95845c95036\", \"snapshot\" : true }, \"ts\" : 1611267558234, \"data\" : [ [ \"11792920485390000000000000\", \"3998385574130000000000\" ], \"41277091829000\" ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data [[string, string], string] Y Amm snapshot array PoolSnapshot Index Type Required Note 1 [string, string] Y Token balance of in pool token pair, i.e. [base token amount, quote token amount] 2 string Y Token balance of pool's LP token "},"websocket/blockgen.html":{"url":"websocket/blockgen.html","title":"二层提交块信息","keywords":"","body":"Block Generation Notification Subscribe to this topic to receive notifications about Loopring L2 block Rules Topic name: blockgen ApiKey requred: No Parameters This topic doesn't support any parameter. Subscription & response sample are as below: Sub: { \"op\": \"sub\", \"sequence\": 30006, \"unsubscribeAll\": false, \"topics\": [ { \"topic\": \"blockgen\" } ] } Response: { \"op\" : \"sub\", \"sequence\" : 30006, \"topics\" : [ { \"topic\" : \"blockgen\" } ], \"result\" : { \"status\" : \"OK\" } } Notification example { \"topic\": { \"topic:\": \"blockgen\" }, \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"amountLocked\": \"0\" } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data [BlockResp] Y Block generation messages, a list of BlockResp, refer to getBlock API for data format "}}