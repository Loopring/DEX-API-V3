{"./":{"url":"./","title":"Loopring","keywords":"","body":"Loopring Protocol & Exchange Loopring is the first scalable DEX protocol built with zkRollup for Ethereum. Using Loopring, people can build a high-performance, orderbook-based, decentralized exchanges that do not take custody of users' crypto-assets. Due to the use of zkRollup, a layer-2 scalability solution, Loopring is capable of settling more than 2,000 trades per second on Ethereum 1.0. If you would like to learn more about Loopring's design and technical details, please check out Loopring's official website: https://loopring.org. Loopring Exchange is the first decentralized trading platform built on top of the Loopring protocol. Loopring Exchange is accessible at Loopring.io. The current version of Loopring Exchange is beta2, which uses Loopring version 3.6. Loopring Exchange's contract address on Ethereum mainnet is: 0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4. The address has a permanent ENS as (exchange2.loopring.eth). Technical Advantages Loopring makes sure nobody can misappropriate users' crypto-assets deposited to an exchange. Even under extreme circumstances, such as an exchange's UI stopped functioning, or the exchange's operators are out of reach, users can still claim their rightful assets by providing valid Merkle proofs that are derivable from data on Ethereum. Loopring does not guarantee the efficiency and fairness of off-chain order-matching. Order-matching is a job for the relayer system, which is a centralized piece of the overall DEX solution. Different exchanges built on the same Loopring protocol can adopt very different relayer solutions and thus provide various quality of services. The Loopring protocol does guarantee that relayers must follow specific rules for trade settlement. We developed Loopring Exchange's relayer system as a closed source project. As of now, it offers a throughput of 200 trades per second.. Overall Architecture The overall architecture of Loopring Exchange is shown below: Some key points you need to know: Loopring Exchange provides API to handle user offchain requests, namely order submission and cancellation, and withdrawals. Other user requests, including account registration, password reset, and deposits, must be submitted using Ethereum transactions. These requests are called on-chain requests. Loopring offers a high-performance trading experience similar to centralized exchanges, which mainly benefits from the batch processing capability of the underlying Loopring protocol. Loopring uses Ethereum as a data availability layer and a ZKP verification layer; Loopring does not perform trading related computations on Ethereum. "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"Glossary","keywords":"","body":"Glossary DEX Decenralized EXchange. Zero-Knowledge Proofs A method by which one party (the prover) can prove to another party (the verifier) that they know a value x, without conveying any information apart from the fact that they know the value x. source: https://en.wikipedia.org/wiki/Zero-knowledge_proof Relayer Loopring Exchange's backend system that handles order matching and settlement, deposits, withdrawals, and Zero-Knowledge Proof generation, etc. On-chain Requests User requests sent to Loopring Exchange through Ethereum transactions. Off-chain Requests User requests sent to Loopring Exchange using Loopring's API. Base Token The target token to trade. For example, in the LRC-ETH trading pair, LRC is referred to as the base token. Quote Token The token to quote price. For example, in the LRC-ETH trading pair, ETH is referred to as the base token. Size The quantity of the base token in an order or a fill. Volume The quantity of the quote token in an order or a fill. EdDSA The signing algorithm used by Loopring to sign off-chain requests. EdDSA is more circuit friendly compared to Ethereum's ECDSA algorithm. "},"basics/general_info.html":{"url":"basics/general_info.html","title":"General Info","keywords":"","body":"General API Information Endpoints The base mainnet endpoint is: https://api3.loopring.com The base testnet endpoint is: https://uat2.loopring.com All endpoints return either a JSON object or array. HTTP Return Codes HTTP 400(BAD_REQUEST) return codes are used for malformed requests; the issue is on the sender's side. HTTP 429 return code is used when breaking a request rate limit. HTTP 5XX return codes are used for internal errors; the issue is on Loopring's side. Error Codes If there is an error, the API will return an error with a message of the reason. { \"code\": 100206, \"msg\": \"Invalid signature.\" } Specific error codes and messages are defined in Error Codes. General Information on Endpoints For GET endpoints, parameters must be sent as a query string. For POST, PUT, and DELETE endpoints, the parameters must be in the request body with content type application/json. LIMITS Each API has its own limit control, refer to specific API page for the configuation. A 429 will be returned when either rate limit is violated. "},"basics/key_mgmt.html":{"url":"basics/key_mgmt.html","title":"Key Management","keywords":"","body":"Key Management Before using Loopring's API, you need to know how to obtain and change your account's EdDSA key pair and ApiKey. When invoking the API, the ApiKey needs to be passed to the relayer as an HTTP header value; the EdDSA secret key is used to sign the request on the client-side digitally. Obtain EdDSA key pair and ApiKey First of all, you need to register an account on Loopring Exchange (LoopringV2). Then you can use the \"Export Account\" function to export account-related information as a JSON object. The JSON object includes your EdDSA key pair and your account's ApiKey. The exported JSON should look like the following: { \"exchangeName\": \"LoopringDEX: Beta 1\", \"exchangeAddress\": \"0x944644Ea989Ec64c2Ab9eF341D383cEf586A5777\", \"accountAddress\": \"0xe9577b420d96adfc97ff1e9e0557f8c73d7247fe\", \"accountId\": 12345, \"apiKey\": \"qXJpfTKrF0O5jIDPYIu7YkVgLFbvm5uIgPKBmHP2kBpcdKZjgfFKhIlE8evo9lKa\", \"publicKeyX\": \"0x2cba32a1bdb218aa380c1e42a8d7dcbf345ec9c914ecf37e34006b34260d1981\", \"publicKeyY\": \"0xb02f0e022052972c3f8b25d69e6f289cb8f847063c62840ea880089b2dc096e\", \"privateKey\": \"0x2bf7d29ae0293dd8b7538681341934a26ec5c98bd2f8c58e4d67bbede05d1b7\" } The first four fields are constants to the current version of the Loopring Exchange; other fields are about your account. Among them, publicKeyX andpublicKeyY are collectively the EdDSA public key of your account, and privateKey is the EdDSA private key. Please keep your EdDSA key pair and ApiKey strictly confidential. If you leak these information, your assets will be at risk. In any case, Loopring Exchange's UI and its API will never ask you for your EdDSA private key. Change EdDSA key pair and ApiKey You can change your EdDSA key pair through the \"Change Password\" function on Loopring Exchange. Because changing the password involves an Ethereum transaction and zero-knowledge proof generation, it will take a while for your new EdDSA key pair to becomes effective. You can get account information through the /api/v3/account API. If thefrozen field is true, it means that your account is in the processing of applying the new EdDSA key pair, during such a period, neither your previous EdDSA key pair nor your new EdDSA key pair can be used to sign requests. When you change your password on Loopring.io, your ApiKey will also be automatically updated. You can also change your ApiKey using API. EdDSA Generation The Loopring protocol does not specify how to generate or manage EdDSA key pairs. Loopring Exchange uses each account's Ethereum address and trading password to derive the EdDSA key pair. As Ethereum addresses are public information, the strength of your trading password is thus critical to the security of your trading assets. If you use Loopring Exchange's website to set the trading password, your password should be strong enough not to worry about being brute-forced; otherwise, you need to be careful not to use a simple password. Unlike a centralized exchange, brute-forcing your EdDSA key does not have to go through Loopring relayer - your EdDSA public key is stored on Ethereum, and hackers can read it out for brute force comparison. The algorithm for compute the EdDSA key pair is as follows (Python): seed = keccakHash('LOOPRING' + address.toLowerCase() + keccakHash(password)) keyPair = myEdDSAGenerator.generate(seed) where keccakHash returns the hex string of the kecca256 result. ApiKey Generation ApiKey is a globally unique string randomly generated by the Loopring relayer and bound to your account when your account is registered. "},"basics/signing.html":{"url":"basics/signing.html","title":"Request Signing","keywords":"","body":"Request Signing The Loopring API involves two different categories of signatures. One is the common API request signature, which is used to verify that the API invocations have been authenticated; the other is Loopring Protocol's off-chain request signature, which is used by Loopring to verify that off-chain requests have been authenticated. We will explain each of these two categories separately. Special API Request Signatures Algorithm Initialize signatureBase to an empty string. Append the API's HTTP method to signatureBase. Append 'ï¼†' to signatureBase. Append percent-encoded full URL path (without ? or any query parameters) to signatureBase. Append '&' to signatureBase. Initialize parameterString to an empty string. For GET / DELETE requests: Sort query parameters in ascending order lexicographically; Append percent-encoded key name to parameterString; Append an '=' to parameterString; Append percent-encoded value to parameterString; Append a '&' if there are more key value pairs. For POST / PUT requests: Append request body as a string to parameterString. Append percent-encoded parameterString to signatureBase Calculate the SHA-256 hash of signatureBase as hash. Signhash with the private EdDSA key and get Rx, Ry, and S. Concatenate Rx,Ry, andS using ',' as: ${Rx},${Ry},${S}. HTTP Method and URL Please make sure you use only the following HTTP methods, in upper case letters. GET POST PUT DELETE Also make sure the HTTPS header is included and is in lower case. For example: https://api.loopring.io/api/v3/apiKey Example Actually So far only 2 API need this special EDDSA API signing -- updateApiKey & cancel order, let's see how the signatureBase is contructed. Update user API key For the above url with the following url query parameters: https://api.loopring.io/api/v3/apiKey?accountId=10005 or Query param Value accountId 10005 parameterString shoule be: accountId=10005 and signatureBase should be: GET&https%3A%2F%2Fapi.loopring.io%2Fapi%2Fv2%2FapiKey&accountId%3D10005 Cancel Order For the above url with the following url query parameters: https://api3.loopring.io/api/v3/order?accountId=10005&clientOrderId=Sample or Query param Value accountId 10005 clientOrderId Sample parameterString shoule be: accountId=10005&clientOrderId=Sample and signatureBase should be: DELETE&https%3A%2F%2Fapi3.loopring.io%2Fapi%2Fv3%2Forder&accountId%3D10005%26clientOrderId%3DSample Off-chain Request Signatures Loopring 3.6 supports support lots of off-chain requests: orders, order cancellation, swap, join AMM pool, exit AMM pool , transfer and off-chain withdrawals, etc. Since these off-chain requests will result in modifications to the exchange's state Merkel tree, when you submit these types of requests using Loopring's API, sometimes you must provide EXTRA special signatures required by the Loopring protocol. Overview of signatures and requests Below is a signature type table for all those requests, each request asks for different signature methods due to different business models. Request Type eddsaSignature ecdsaSignature approvedHash X-API-SIG submitOrder(AMM swap) Y N N N cancelOrder N N N Special API Request EDDSA Signatures updateApiKey N N N Special API Request EDDSA Signatures joinAmmPool Y Disabled Y N exitAmmPool Y Disabled Y N submitTransfer Y Disabled Y EIP712 signature of request structure submitOffchainWithdraw Y Disabled Y EIP712 signature of request structure updateAccount Y Y Y EIP712 signature of request structure eddsaSignature, ecdsaSignature, approvedHash are located in REST request body. X-API-SIG is located in REST request header. Y means support. N means not support. Disabled means no longer support. We STRONGLY suggest using Level-2 EDDSA key to sign every requests, which saves both time & money of both user and Loopring as no Eth mainnet transaction and the corresponding block confirmation. For more details, please refer to Key Management. Below we take signing order and signing transfer/withdrawal as examples, as you will see, the first one order signing needs merely Level-2 EDDSA signature, but the later two need extra EIP712 signature in request header, you can see the difference on the way of submitting the requests. Signing Orders You need to seralized specific fields of an order into an integer array, then calculate the Poseidon hash of the array, and then sign the hash with your EdDSA private key. The rules for serialization of orders, hashing, and signature methods must strictly follow Loopring's Specification. Below we use Python code as a demo: class EddsaSignHelper: def __init__(self, poseidon_params, private_key): self.poseidon_sign_param = poseidon_params self.private_key = private_key # print(f\"self.private_key = {self.private_key}\") def hash(self, structure_data): serialized_data = self.serialize_data(structure_data) msgHash = poseidon(serialized_data, self.poseidon_sign_param) return msgHash def sign(self, structure_data): msgHash = self.hash(structure_data) signedMessage = PoseidonEdDSA.sign(msgHash, FQ(int(self.private_key, 16))) return \"0x\" + \"\".join([ hex(int(signedMessage.sig.R.x))[2:].zfill(64), hex(int(signedMessage.sig.R.y))[2:].zfill(64), hex(int(signedMessage.sig.s))[2:].zfill(64) ]) class OrderEddsaSignHelper(EddsaSignHelper): def __init__(self, private_key): super(OrderEddsaSignHelper, self).__init__( poseidon_params(SNARK_SCALAR_FIELD, 12, 6, 53, b'poseidon', 5, security_target=128), private_key ) def serialize_data(self, order): return [ int(order[\"exchange\"], 16), int(order[\"storageId\"]), int(order[\"accountId\"]), int(order[\"sellToken\"]['tokenId']), int(order[\"buyToken\"]['tokenId']), int(order[\"sellToken\"]['volume']), int(order[\"buyToken\"]['volume']), int(order[\"validUntil\"]), int(order[\"maxFeeBips\"]), int(order[\"fillAmountBOrS\"]), int(order.get(\"taker\", \"0x0\"), 16) ] If you don't use the ethsnarks library to calculate Poseidon hash, please pay attention to the values of the Poseidon parameters to ensure that they are entirely consistent with those used by Loopring. Otherwise, signature verification will fail. Signing Off-chain Withdrawals Following structure shows a offchain withdrawal request: { \"exchange\": \"0x35990C74eB567B3bbEfD2Aa480467b1031b23eD9\", \"accountId\": 5, \"owner\": \"0x23a51c5f860527f971d0587d130c64536256040d\", \"token\": { \"tokenId\": 0, \"volume\": str(1000000000000000000), }, \"maxFee\" : { \"tokenId\": 0, \"volume\": str(1000000000000000), }, \"to\": \"0xc0ff3f78529ab90f765406f7234ce0f2b1ed69ee\", \"onChainDataHash\": \"0x\" + bytes.hex(onchainDataHash), \"storageId\": 5, \"validUntil\" : 0xfffffff, \"minGas\": 300000, \"extraData\": bytes.hex(extraData) } The code for signing it in Python is as follows. Just like the order, the only difference is the request itself, so we just adjust params which calculate the poseidon hash. class WithdrawalEddsaSignHelper(EddsaSignHelper): def __init__(self, private_key): super(WithdrawalEddsaSignHelper, self).__init__( poseidon_params(SNARK_SCALAR_FIELD, 10, 6, 53, b'poseidon', 5, security_target=128), private_key ) def serialize_data(self, withdraw): return [ int(withdraw['exchange'], 16), int(withdraw['accountId']), int(withdraw['token']['tokenId']), int(withdraw['token']['volume']), int(withdraw['maxFee']['tokenId']), int(withdraw['maxFee']['volume']), int(withdraw['onChainDataHash'], 16), int(withdraw['validUntil']), int(withdraw['storageId']), ] Signing Internal Transfer You need to seralized specific fields of an transfer into an integer array, then calculate the Poseidon hash of the array, and then sign the hash with your EdDSA private key. The following is an example of internal transfers: { \"exchange\": \"0x35990C74eB567B3bbEfD2Aa480467b1031b23eD9\", \"payerId\": 0, \"payerAddr\": \"0x611db73454c27e07281d2317aa088f9918321415\", \"payeeId\": 0, \"payeeAddr\": \"0xc0ff3f78529ab90f765406f7234ce0f2b1ed69ee\", \"token\": { \"tokenId\": 0, \"volume\": str(1000000000000000000), }, \"maxFee\" : { \"tokenId\": 0, \"volume\": str(1000000000000000), }, \"storageId\": 1, \"validUntil\": 0xfffffff } where storageId must start from 1 and increment by 2. The code for signing it in Python is as follows: class OriginTransferEddsaSignHelper(EddsaSignHelper): def __init__(self, private_key): super(OriginTransferEddsaSignHelper, self).__init__( poseidon_params(SNARK_SCALAR_FIELD, 13, 6, 53, b'poseidon', 5, security_target=128), private_key ) def serialize_data(self, originTransfer): return [ int(originTransfer['exchange'], 16), int(originTransfer['payerId']), int(originTransfer['payeeId']), # payer_toAccountID int(originTransfer['token']['tokenId']), int(originTransfer['token']['volume']), int(originTransfer['maxFee']['tokenId']), int(originTransfer['maxFee']['volume']), int(originTransfer['payeeAddr'], 16), # payer_to 0, #int(originTransfer.get('dualAuthKeyX', '0'),16), 0, #int(originTransfer.get('dualAuthKeyY', '0'),16), int(originTransfer['validUntil']), int(originTransfer['storageId']) ] Extra ECDSA authentic in header As the above table shows, some requests need extra authentic in request header. Listed as below: Request EDDSA ECDSA Approved Hash X-API-SIG in header submitTransfer Y Optional Y EIP712 signed structure submitOffchainWithdraw Y Optional Y EIP712 signed structure updateAccount Y Y Y EIP712 signed structure So, If a user wants to do submitTransfer, submitOffchainWithdraw and updateAccount, in addition to EDSSA signature, you also need to use ECDSA to sign them and put the signature in request header. Loopring 3.6 uses the EIP712 standard, A user need to serialize specific fields of an request, say transfer into a EIP712 compatible structure, and then use standard EIP712 hash algorithm to calculate the hash of the structure, and then, use personal _sign to sign the combined string. The code for EIP712 signing it in python is as follows: def createOriginTransferMessage(req: dict): class Transfer(EIP712Struct): pass setattr(Transfer, 'from', Address()) Transfer.to = Address() Transfer.tokenID = Uint(16) Transfer.amount = Uint(96) Transfer.feeTokenID = Uint(16) Transfer.maxFee = Uint(96) Transfer.validUntil = Uint(32) Transfer.storageID = Uint(32) transfer = Transfer(**{ \"from\" : req['payerAddr'], \"to\" : req['payeeAddr'], \"tokenID\" : req['token']['tokenId'], \"amount\" : int(req['token']['volume']), \"feeTokenID\" : req['maxFee']['tokenId'], \"maxFee\" : int(req['maxFee']['volume']), \"validUntil\" : req['validUntil'], \"storageID\" : req['storageId'] }) # print(f\"transfer type hash = {bytes.hex(transfer.type_hash())}\") return EIP712.hash_packed( EIP712.exchangeDomain.hash_struct(), transfer.hash_struct() ) message = createUpdateAccountMessage(transfer_request) v, r, s = sig_utils.ecsign(message, self.ecdsaKey) The EIP712 structure declarations of each requests types can be found in Loopring contract, or just get it from our reference code base. Below are withdrawal request EIP712 structure. struct Withdrawal { address owner; uint32 accountID; uint16 tokenID; uint amount; uint16 feeTokenID; uint fee; address to; bytes32 extraDataHash; uint minGas; uint32 validUntil; uint32 storageID; } So the signing logic is: def createOffchainWithdrawalMessage(req: dict): class Withdrawal(EIP712Struct): owner = Address() accountID = Uint(32) tokenID = Uint(16) amount = Uint(96) feeTokenID = Uint(16) maxFee = Uint(96) to = Address() extraData = Bytes() minGas = Uint() validUntil = Uint(32) storageID = Uint(32) # \"Withdrawal(address owner,uint32 accountID,uint16 tokenID,uint96 amount,uint16 feeTokenID,uint96 maxFee,address to,bytes extraData,uint256 minGas,uint32 validUntil,uint32 storageID)\" withdrawal = Withdrawal(**{ \"owner\" : req['owner'], \"accountID\" : req['accountId'], \"tokenID\" : req['token']['tokenId'], \"amount\" : int(req['token']['volume']), \"feeTokenID\" : req['maxFee']['tokenId'], \"maxFee\" : int(req['maxFee']['volume']), \"to\" : req['to'], \"extraData\" : bytes.fromhex(req['extraData']), \"minGas\" : int(req['minGas']), \"validUntil\" : req['validUntil'], \"storageID\" : req['storageId'], }) # print(f\"extraData hash = {bytes.hex(Web3.keccak(bytes.fromhex(req['extraData'])))}\") # print(f\"withdrawal type hash = {bytes.hex(withdrawal.type_hash())}\") return EIP712.hash_packed( EIP712.exchangeDomain.hash_struct(), withdrawal.hash_struct() ) message = createUpdateAccountMessage(withdrawal_request) v, r, s = sig_utils.ecsign(message, self.ecdsaKey) Please NOTE: The final string in request header is a 134 bytes hex string which is constructed as below code shows: v, r, s = sig_utils.ecsign(message, self.ecdsaKey) header['X-API-SIG'] = \"0x\" + bytes.hex(v_r_s_to_signature(v, r, s)) + \"02\" It starts with '0x' to indicate hex format and ends with '02' which stands for EIP_712 signature type. Forget to add '02' type leads to signature verification failure as Relay has no hint on the way of verifiction. References You can learn more about the Poseidon hash and EdDSA signature through the following literature and github repositories. ethsnarks: https://github.com/HarryR/ethsnarks.git SHA256 Hash: https://en.wikipedia.org/wiki/SHA-2 EdDSA: https://en.wikipedia.org/wiki/EdDSA Poseidon Hash: https://www.poseidon-hash.info/ You can also refer to our example code for more details. "},"basics/orders.html":{"url":"basics/orders.html","title":"Orders","keywords":"","body":"Orders Uni-Directional Order Model Unlike the order models of most centralized exchanges, Loopring uses the Uni-Directional Order Model (UDOM). UDOM represents buy orders and sell orders uniformly with one single data structure. Let's start with a simplified UDOM model to give you a few examples of Loopring's limit price orders (Loopring doesn't support market price orders). In the LRC-ETH trading pair, a sell order that sells 500 LRC at the price of 0.03ETH/LRC can be expressed as: { // LRC-ETH: sell 500 LRC at 0.03ETH/LRC \"sellToken\": { \"token\" : \"LRC\", \"volume\" : 500 }, \"buyToken\": { \"token\" : \"ETH\", \"volume\" : 15 } } a buy order that buys 500 LRC at the price of 0.03ETH/LRC can be expressed as: { // LRC-ETH: buy 500 LRC at 0.03ETH/LRC \"sellToken\": { \"token\" : \"ETH\", \"volume\" : 15 }, \"buyToken\": { \"token\" : \"LRC\", \"volume\" : 500 } } As you may have noticed, UDOM does not specify trading pairs or prices explicitly. However, there is a problem with this simplified model: the match-engine doesn't know when an order should be considered as fully filled. We need to introduce another parameter called buy for this purpose. If buy == true, the match-engine shall check the total fill amount of tokenB against amountB to determine if an order has been fully filled; otherwise, it shall use the total fill amount of tokenS against amountS. With this new field, the above orders will look like the following: { // LRC-ETH: sell 500 LRC at 0.03ETH/LRC \"sellToken\": { \"token\" : \"LRC\", \"volume\" : 500 }, \"buyToken\": { \"token\" : \"ETH\", \"volume\" : 15 }, // = 500 * 0.03, \"fillAmountBOrS\": false // check sell token's fill amount against [\"sellToken\"][\"volume\"] } { // LRC-ETH: buy 500 LRC at 0.03ETH/LRC \"sellToken\": { \"token\" : \"ETH\", \"volume\" : 15 }, // = 500 * 0.03, \"buyToken\": { \"token\" : \"LRC\", \"volume\" : 500 } \"fillAmountBOrS\": true // check buy token's fill amount against [\"buyToken\"][\"volume\"] } Note: If the above sell order is fully filled, the amount of ETH bought may be larger than 15ETH; and if the buy order is fully filled, the ETH paid may be less than 15ETH, which is the impact of the fillAmountBOrS parameter on the match engine's behaviors. What is the effect of reversing the fillAmountBOrS value in the two orders above? The sell order for the LRC-ETH trading pair becomes a buy order for the ETH-LRC trading pair, and the buy order for the LRC-ETH trading pair becomes a sell order for the ETH-LRC trading pair. It means one Loopring trading pair, such as LRC-ETH, is equivalent to two trading pairs in many centralized exchanges, i.e., LRC-ETH and ETH-LRC. Besides its elegancy and simplicity, Loopring's UDOM also makes it possible to implement much simpler settlement logic in ZKP circuits. So far AMM swap order does NOT support fillAmountBOrS, so, please set fillAmountBOrS to false in swap request. Order object Loopring's actual order format is a bit more complex. You can use the following JSON to express a limit price order. For details of specific parameters, see Submit Order. order = { // sign part \"exchange\" : \"0x7489DE8c7C1Ee35101196ec650931D7bef9FdAD2\", \"accountId\" : 10004, \"storageId\" : 0, \"sellToken\": { \"tokenId\": 0, // ETH \"volume\": \"15000000000000000000\" }, \"buyToken\" : { \"tokenId\": 1, // LRC \"volume\": \"500000000000000000000\" }, \"validUntil\" : 1700000000, \"maxFeeBips\" : 50, \"fillAmountBOrS\": true, \"taker\" : \"0000000000000000000000000000000000000000\", // aux data \"allOrNone\" : false, \"clientOrderId\" : \"SampleOrder\", \"orderType\" : \"LIMIT_ORDER\", // \"AMM\", \"MAKER_ONLY\", \"TAKER_ONLY\" \"channelId\" : \"channel1::maker1\" // signature \"eddsaSignature\":\"0x1c31e81cdde3c9f92e31ab35733e3403de45325cb5f90832c9d4f8673ec22f501de9e9b97c8d7b475ab12836d87c9c6f2a78a91cd650bc77ec4079ffd966933f10d6a5c133ee270013f1d8596c706f2623d0ba1c3dccbc3f202db606bb00d6bc\" // 0x + 192 bytes hex string, i.e., 0x+Rx+Ry+s } Next, we will further explain some of these data fields for you. Tokens and Amounts In an actual order, tokens are not expressed by their names or ERC20 addresses, but by their token ID, the index at which the tokens have been registered in the Loopring Exchange's smart contract. Note that the same ERC20 token may have different IDs on different exchanges built on top of the same Loopring protocol. In the above example, we assume that the IDs of LRC and ETH are 1 and 0, respectively. You can query token's information using Token Information Supported by the Exchange. The amounts of tokens are in their smallest unit as strings. Taking LRC as an example, its decimals is 18, so 1.0LRC should be expressed as \" 1000000000000000000 \" (1 followed by 18 0s). Each token's decimals is coded in its smart contract; the decimals of ETH is 18. Trading Fee maxFeeBips = 50 specifies that the maximum trading fee the order is willing to pay to the exchange is 0.5% (the unit of maxFeeBips is 0.01%). Loopring charges trading fees in tokenB as a percentage of the token bought from a trade. Assuming that the order above has bought \"10000000000000000000\" ETH (10ETH), the actual trading fee will not exceed 0.05ETH (\"10000000000000000000\"* 0.5%). Loopring's relayer offers different trading fee discounts based on the user VIP tiers. The bottom line is that the actual trading fees can never exceed the maximum orders are willing to pay, specified by maxFeeBips. When you place an order, you must set maxFeeBips to be no less than the trading fee rate in the specified trading pair for your account (based on your VIP level). This information can be obtained by querying /api/v3/user/feeRates. If you trust Loopring Exchange, you can also set maxFeeBips to 63, the maximum value allowed by the Loopring protocol. Timestamps validUntil specifies the order expiration timestamp, both in seconds since epoch. When the relayer receives an order, it will verify these two timestamps in the order; Loopring's ZKP circuit code will also check these two timestamps during settlement. Due to the delay of zkRollup batch processing, and the possible deviation of the time on Ethereum blockchain and our servers, we strongly recommend that validSince be set to the current time,and the window between validSince andvalidUntil is no shorter than 1 week; otherwise, your order may be rejected or cancelled by the relayer. You can take advantage of the validUntil timestamp to avoid unnecessary proactive cancellation of orders. Fill Status and Storage ID Loopring 3.6 reserves half of 16384 (2142 ^ {14} 2â€‹14â€‹â€‹) slots for each token to track token amounts changs introduced by order and AMM swap order, and the other half slots for each token to track the user's offchain requests include AMM join/exit, transfer and withdraw . If an order's storage ID is N, then the slot used is N % 16384. In other words, if the slot number is m, it will be used to track orders with the following IDs: m, m + 16384, m + 16384 * 2, ... and so on. Each slot also remembers the ID of the current order being tracked (the initial storage ID is the slot number), and subsequent orders with smaller storage IDs will be rejected. Suppose that slot 1 is tracking order 32769 (1 + 16384 * 2). When the user places orders with ID of 1 or16385, the server will reject these orders and return errors. If you have more than 16384 active orders for a trading pair, you need to cancel some of them to release slots before you can submit new orders. Storage IDis the upgraded Order ID of Loopring 3.1, which has big enough capacity, and more usages, See Below table: Storage ID Ranges Count Usages Even numbers {0, 2, 4,...,4294967292ï¼Œ 4294967294} 2147483648 transferwithdrawalAMM joinAMM exit Odd numbers {1, 3, 5,...,4294967293ï¼Œ 4294967295} 2147483648 orderAMM swap order The maximum value of storage ID is 4294967296 (2322^{32}2â€‹32â€‹â€‹). After reaching this ID limit, you can neither place orders nor transfer/withdraw balance on the corresponding token. For most users, this is not a problem, as 4294967296 is big enough, although it is possible that an ultra high-frequent (>100 TPS for all time) trader or transfer payer meet out of ID error. It is worth noting that all sell orders from the same account in multiple trading pairs with the same base token (such as LRC-ETH and LRC-USDT) share the same 16384 slots. If you do not plan to maintain the allocation of storage IDs and slots between trading pairs on the client-side, you can register multiple accounts, as recommended above. We know the inconvenience caused by the slot design. However, this is a design decision made in the Loopring protocol itself. We hope future technological advances can remove this limitation. Other Fields exchange: Unlike Looping 3.1, we now use Loopring Exchange's address as a unique numeric ID in the Looping protocol. accountId: User's account ID. allOrNone: true if the order must be fully filled or cancelled. This parameter is not supported yet by our matching engine, so please set it to \"false\" for now. clientOrderId: Used to label orders by the client without user awareness. It also has no impact on trading. channelId: Used to lable order's channel. For more details, please refer to Submit Order. "},"basics/examples.html":{"url":"basics/examples.html","title":"Example Code","keywords":"","body":"Example Code https://github.com/Loopring/hello_loopring contains some simple examples to help you quickly get started using the Loopring API. Among them: Now it's in loopring-v3 branch, will merge to master soon hash_and_sign/: Use Python and the ethsnarks to calculate the Poseidon hash of any strings; sign and verify EdDSA signatures. v3explorer/: Everything you can do in Loopring3.6, include but not limited to order, swap, join/exit AMM, transfer, withdrawal, etc. trading/: Legacy 3.1 API, deprecated. We will continue to improve and open source more example code in the future. Stay tuned. "},"basics/contracts.html":{"url":"basics/contracts.html","title":"Smart Contracts","keywords":"","body":"Smart Contracts The following is a list of smart contract addresses for the Loopring Protocol and Loopring Exchange on Ethereum mainnet. LRC LRC Address: 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD (lrctoken.eth) Loopring Exchange V2 (Added at 2020-12-21) ExchangeV3: 0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4 (exchange2.loopring.eth) DefaultDepositContract: 0x674bdf20A0F284D710BC40872100128e2d66Bd3f (deposit2.loopring.eth) LoopringIOExchangeOwner: 0x5c367c1b2603ed166C62cEc0e4d47e9D5DC1c073 ExchangeV3 Implementation: 0x2fefbeF4d1445F523941c56349C2414cd5e9675d LoopringV3: 0xe56D6ccab6551932C0356E4e8d5dAF0630920C71 BlockVerifier: 0x6150343E0F43A17519c0327c41eDd9eBE88D01ef (verifier2.loopring.eth) AgentRegistry: 0x39B9bf169a7e225ba037C443A40460c77438ea14 (agents2.loopring.eth) FastWithdrawalAgent: 0xec3Cc6Cf0252565b56FC7AC396017Df5b9B78a31 (fastwithdraw2.loopring.eth) Open Sourced The code of the Loopring Protocol is entirely open-sourced, including its design document, smart contracts, and ZKP circuits. If you have any questions, please email the Loopring Foundation at foundation@loopirng.org. "},"basics/uat_token.html":{"url":"basics/uat_token.html","title":"Uat Tokens","keywords":"","body":"token addresses on goerli testnet: LRC Address: 0xFc28028D9b1F6966Fe74710653232972F50673BE, decimals: 18 tokenId: 1 USDT Address: 0xd4E71C4bb48850f5971cE40Aa428b09F242D3e8a, decimals: 6 tokenId: 3 DAI: 0xCd2c81B322A5b530b5fA3432E57Da6803b0317f7, decimals: 18, tokenId: 6 LRC and USDT token faucet addressï¼š https://github.com/Loopring/lightcone/blob/master/docs/loopring36_goerli.md token faucet: https://goerli.etherscan.io/address/0x3a7fc292b0a669298ee481e10b3270b00323c556#writeContract "},"REST_APIS.html":{"url":"REST_APIS.html","title":"REST API","keywords":"","body":"REST API This article describes some common parts for Loopring's REST API. Base URL https://api.loopring.io Rate Limit Each API has its rate limit settings. The relayer will reject all API invocations beyond this limit, with status code 429. Stop excessive API invocations to avoid your account from being suspended. HTTP Headers X-API-KEY All API except querying user ApiKey need to specify the X-API-KEY HTTP header with the user's ApiKey as the value. X-API-SIG The following API needs to specify the X-API-SIG HTTP header to provide an EdDSA signature: Query ApiKey Cancel order Change ApiKey Setting HTTP Headers To set the HTTP headers using Python, use the code below: def init_request_session(apiKey, sig): session = requests.session() session.headers.update({ 'Accept': 'application/json', 'X-API-KEY': apiKey, 'X-API-SIG': sig, }) return session Response Except for network errors, all API will return the 200 HTTP status code and a JSON object representing the actual API result. The JSON contains a resultInfo structure that has a code field for application-specific status code, and a data JSON object that represents API-specific response. Response Field Type Required Description Example resultInfo ResultInfo Y Result of API invocation - ResultInfo Struct Field Type Required Description Example code integer Y Status code 0 message string Y Return message. This is used for debug only. Do not show to users \"SUCCESS\" Status code Status code Description 0 Success 100000 Unknown internal error 100001 Invalid parameter 100002 Request timeout 100202 Update fail 100203 Internal persistence error 100204 Duplicate request "},"dex_apis/getTimestamp.html":{"url":"dex_apis/getTimestamp.html","title":"Get relayer's current time","keywords":"","body":"Get relayer's current time Rate limit: every seconds API Overview HTTP method GET Path /api/v3/timestamp Summary Returns the relayer's current time in millisecond API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/timestamp HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/timestamp Response fields Field Type Required Description Example timestamp integer N Current time in millisecond 1584683483382 Response example { \"timestamp\" : 1584683483382 } Status code Value Description 100000 Unknown error "},"dex_apis/getApiKey.html":{"url":"dex_apis/getApiKey.html","title":"Get user ApiKey","keywords":"","body":"Get user ApiKey Rate limit: every seconds API Overview HTTP method GET Path /api/v3/apiKey Summary Get the ApiKey associated with the user's account. API description HTTP Header Field Type Required Description Example X-API-SIG string Y EDDSA Signature \"0xeb14773e8a07d19bc4fe56e36d041dcb0026bf21e05c7652f7e92160deaf5ea9c4fe56e34773e86d041dcbeb1a07d19b002652f7e92160deaf5e6bf21e05c7a9002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb\" Request parameters Field Type Required Description Example accountId integer Y AccountID 10 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/apiKey?accountId=10 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-SIG: dkkfinfasdfcurl -H \"X-API-SIG:dkkfinfasdf\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/apiKey\\?accountId\\=10 Response fields Field Type Required Description Example apiKey string Y ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" Response example { \"apiKey\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } Status code Value Description 100000 Unknown error 101002 User not found 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID 104004 No signature information provided 104005 Wrong signature information "},"dex_apis/applyApiKey.html":{"url":"dex_apis/applyApiKey.html","title":"Update user's ApiKey","keywords":"","body":"Update user's ApiKey Rate limit: every seconds API Overview HTTP method POST Path /api/v3/apiKey Summary Change the ApiKey associated with the user's account. The current ApiKey must be provided as the value of the X-API-KEY HTTP header. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y AccountID 1 Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/apiKey HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"accountId\" : 1 }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/apiKey -d \\ '{ \"accountId\" : 1 }' Response fields Field Type Required Description Example apiKey string Y ApiKey \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" Response example { \"apiKey\" : \"6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt\" } Status code Value Description 100000 Unknown error 101002 User not found 100001 Invalid argument 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID 104004 No signature information provided 104005 Wrong signature information "},"dex_apis/getNextStorageId.html":{"url":"dex_apis/getNextStorageId.html","title":"Get next storage ID","keywords":"","body":"Get next storage ID Rate limit: every seconds API Overview HTTP method GET Path /api/v3/storageId Summary Fetches the next order id for a given sold token. If the need arises to repeatedly place orders in a short span of time, the order id can be initially fetched through the API and then managed locally. Each new order id can be derived from adding 2 to the last one API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Looprings account identifier 1 sellTokenId integer Y The unique identifier of the token which the user wants to sell in the next order. 0 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/storageId?accountId=1&sellTokenId=0 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/storageId\\?accountId\\=1\\&sellTokenId\\=0 Response fields Field Type Required Description Example orderId integer N Next storage ID for order request, must be even 100 offchainId integer N Next storage ID for offchain requests, i.e., transfer/withdraw/updateAccount, must be odd 101 Response example { \"orderId\" : 100, \"offchainId\" : 101 } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID "},"dex_apis/getOrderDetail.html":{"url":"dex_apis/getOrderDetail.html","title":"Get order details","keywords":"","body":"Get order details Rate limit: every seconds API Overview HTTP method GET Path /api/v3/order Summary Get the details of an order based on order hash. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string Y Order hash \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859 Response fields Field Type Required Description Example hash string Y Order hash \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string Y Order's client-side ID \"200310143135081332\" side string Y Order's sideAllowable : ['SELL', 'BUY'] \"SELL\" market string Y Trading pair \"LRC-ETH\" price string Y Order price \"0.01987608\" volumes OrderVolumesV3 Y Wraps data regarding the orders volumes (base, quote, and filled.) \"0\" validity OrderValidityV3 Y Wraps data regarding time validity constraints (since and until) \"{start: 1234, end: 2345}\" orderType string Y Whether the order has to be treated as a limit, maker, or taker operation.Allowable : ['LIMIT_ORDER', 'TAKER_ONLY', 'MAKER_ONLY'] \"LIMIT_ORDER\" status string Y Order statusAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" Response example { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"side\" : \"SELL\", \"market\" : \"LRC-ETH\", \"price\" : \"0.01987608\", \"volumes\" : { \"baseAmount\" : \"0\", \"quoteAmount\" : \"0\", \"baseFilled\" : \"0\", \"quoteFilled\" : \"0\", \"fee\" : \"0\" }, \"validity\" : { \"start\" : 0, \"end\" : 0 }, \"orderType\" : \"LIMIT_ORDER\", \"status\" : \"processing\" } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 107002 Order Hash cannot be empty 107003 Order does not exist 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model OrderVolumesV3 Wraps data regarding the orders volumes (base, quote, and filled.) Field Type Required Description Example baseAmount string Y The amount of base tokens involved in the order. \"0\" quoteAmount string Y The amount of quote tokens involved in the order. \"0\" baseFilled string Y The amount of requested base tokens filled in the order. \"0\" quoteFilled string Y The amount of requested quote tokens filled in the order. \"0\" fee string Y The amount of quote or base token amount used to pay for the orders fee. Whether this data refers to the base or quote token, one can find out by looking at the orders side \"0\" OrderValidityV3 Wraps data regarding time validity constraints (since and until Field Type Required Description Example start integer Y Timestamp from when the order officially becomes valid and fillable 0 end integer Y Timestamp from when the order ceases to be valid and fillable 0 "},"dex_apis/submitOrderV3.html":{"url":"dex_apis/submitOrderV3.html","title":"Submit an order","keywords":"","body":"Submit an order Rate limit: every seconds API Overview HTTP method POST Path /api/v3/order Summary Submit an order API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example exchange string Y The adderss of the exchange which has to process this order \"1\" accountId integer Y Loopring's account ID 1 storageId integer Y The unique identifier of the L2 Merkle tree storage slot where the burn made in order to exit the pool will or has been stored. 1 sellToken TokenVolumeV3 Y Wrapper object used to describe a token associated with a certain quantity. \"TokenVolume{tokenId: 0, volume: 1234}\" buyToken TokenVolumeV3 Y Wrapper object used to describe a token associated with a certain quantity. \"TokenVolume{tokenId: 0, volume: 1234}\" allOrNone string Y Whether the order supports partial fills or not.Currently only supports false as a valid value \"false\" fillAmountBOrS string Y Fill size by buy token or by sell token \"true\" validUntil integer Y Order expiration time, accuracy is in seconds 1567053142 maxFeeBips integer Y Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63 20 eddsaSignature string Y The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation. \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string N An arbitrary, client-set unique order identifier, max length is 120 bytes \"1\" orderType string N Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLYAllowable : ['LIMIT_ORDER', 'TAKER_ONLY', 'MAKER_ONLY', 'AMM'] \"LIMIT_ORDER\" taker string N Used by the P2P order which user specify the taker, so far its 0x0000000000000000000000000000000000000000 \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\" poolAddress string N The AMM pool address if order type is AMM \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\" channelId string N Aux data to mark the order source \"hebao::subchannel::0001\" Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/order HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"exchange\" : \"1\", \"accountId\" : 1, \"storageId\" : 1, \"sellToken\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"buyToken\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"allOrNone\" : \"false\", \"fillAmountBOrS\" : \"true\", \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"eddsaSignature\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"orderType\" : \"LIMIT_ORDER\", \"taker\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"poolAddress\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"channelId\" : \"hebao::subchannel::0001\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/order -d \\ '{ \"exchange\" : \"1\", \"accountId\" : 1, \"storageId\" : 1, \"sellToken\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"buyToken\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"allOrNone\" : \"false\", \"fillAmountBOrS\" : \"true\", \"validUntil\" : 1567053142, \"maxFeeBips\" : 20, \"eddsaSignature\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"1\", \"orderType\" : \"LIMIT_ORDER\", \"taker\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"poolAddress\" : \"0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18\", \"channelId\" : \"hebao::subchannel::0001\" }' Response fields Field Type Required Description Example hash string Y Order hash of submit order response \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string Y The clientOrderId of the submitted order \"client_order_id\" status string Y Order status of submit order responseAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'failed'] \"cancelled\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"false\" Response example { \"hash\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"client_order_id\", \"status\" : \"cancelled\", \"isIdempotent\" : false } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102002 Unsupported TokenId in the order 102003 Invalid account ID 102004 Invalid order ID 102005 Market does not support 102006 Illegal rate field 102007 Order already exists 102008 Order has expired 102010 Order is missing signature information 102011 Insufficient user balance 102012 The order amount is too small 102014 Failed to freeze the amount, please try again later 102020 Exceeded the maximum order amount 102027 Submit order failed 102120 Order is not valid 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID 104004 No signature information provided 104005 Wrong signature information Model TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/cancelOrder.html":{"url":"dex_apis/cancelOrder.html","title":"Cancel order","keywords":"","body":"Cancel order Rate limit: every seconds API Overview HTTP method DELETE Path /api/v3/order Summary Cancel order using order hash or client-side ID. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string Y EDDSA Signature \"0xeb14773e8a07d19bc4fe56e36d041dcb0026bf21e05c7652f7e92160deaf5ea9c4fe56e34773e86d041dcbeb1a07d19b002652f7e92160deaf5e6bf21e05c7a9002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 orderHash string N Order HASH \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string N The unique order ID of the client \"20200318000000001010\" Request example HTTPCURLDELETE http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/order?accountId=1&orderHash=13375450901292179417154974849571793069911517354720397125027633242680470075859&clientOrderId=20200318000000001010 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdfcurl -X DELETE -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/order\\?accountId\\=1\\&orderHash\\=13375450901292179417154974849571793069911517354720397125027633242680470075859\\&clientOrderId\\=20200318000000001010 Response fields Field Type Required Description Example hash string Y Order hash of submit order response \"13375450901292179417154974849571793069911517354720397125027633242680470075859\" clientOrderId string Y The clientOrderId of the submitted order \"client_order_id\" status string Y Order status of submit order responseAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'failed'] \"cancelled\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"false\" Response example { \"hash\" : \"13375450901292179417154974849571793069911517354720397125027633242680470075859\", \"clientOrderId\" : \"client_order_id\", \"status\" : \"cancelled\", \"isIdempotent\" : false } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 102117 No orders to cancel 102118 Failed to cancel orders, please try again later 104002 Invalid ApiKey 104003 Invalid Account ID "},"dex_apis/getOrders.html":{"url":"dex_apis/getOrders.html","title":"Get multiple orders","keywords":"","body":"Get multiple orders Rate limit: every seconds API Overview HTTP method GET Path /api/v3/orders Summary Get a list of orders satisfying certain criteria. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 market string N Trading pair \"LRC-ETH\" start integer N Lower bound of order's creation timestamp in millisecondDefault : 0L 1567053142000 end integer N Upper bound of order's creation timestamp in millisecondDefault : 0L 1567053242000 side string N \"BUY\" or \"SELL\"Allowable : ['BUY', 'SELL'] \"BUY\" status string N Order status. You can specify one of the following values:Allowable : ['processing', 'processed', 'failed', 'cancelled', 'cancelling', 'expired'] \"processing,processed\" limit integer N Limit of orders (default 50) 50 offset integer N Offset of orders (default 0)Default : 0L 0 orderTypes string N request.getOrders.orderTypesAllowable : ['LIMIT_ORDER', 'MAKER_ONLY', 'TAKER_ONLY', 'AMM'] \"LIMIT_ORDER\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/orders?accountId=1&market=LRC-ETH&start=1567053142000&end=1567053242000&side=BUY&status=processing,processed&limit=50&offset=0&orderTypes=LIMIT_ORDER HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/orders\\?accountId\\=1\\&market\\=LRC-ETH\\&start\\=1567053142000\\&end\\=1567053242000\\&side\\=BUY\\&status\\=processing,processed\\&limit\\=50\\&offset\\=0\\&orderTypes\\=LIMIT_ORDER Response fields Field Type Required Description Example totalNum integer Y Total number of orders 10 orders List[OrderDetailV3] N List of order / Response example { \"totalNum\" : 10, \"orders\" : [ { \"hash\" : \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\", \"clientOrderId\" : \"200310143135081332\", \"side\" : \"SELL\", \"market\" : \"LRC-ETH\", \"price\" : \"0.01987608\", \"volumes\" : { \"baseAmount\" : \"0\", \"quoteAmount\" : \"0\", \"baseFilled\" : \"0\", \"quoteFilled\" : \"0\", \"fee\" : \"0\" }, \"validity\" : { \"start\" : 0, \"end\" : 0 }, \"orderType\" : \"LIMIT_ORDER\", \"status\" : \"processing\" } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model OrderDetailV3 Response details of order Field Type Required Description Example hash string Y Order hash \"0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf\" clientOrderId string Y Order's client-side ID \"200310143135081332\" side string Y Order's sideAllowable : ['SELL', 'BUY'] \"SELL\" market string Y Trading pair \"LRC-ETH\" price string Y Order price \"0.01987608\" volumes OrderVolumesV3 Y Wraps data regarding the orders volumes (base, quote, and filled.) \"0\" validity OrderValidityV3 Y Wraps data regarding time validity constraints (since and until) \"{start: 1234, end: 2345}\" orderType string Y Whether the order has to be treated as a limit, maker, or taker operation.Allowable : ['LIMIT_ORDER', 'TAKER_ONLY', 'MAKER_ONLY'] \"LIMIT_ORDER\" status string Y Order statusAllowable : ['processing', 'processed', 'cancelling', 'cancelled', 'expired', 'waiting'] \"processing\" OrderVolumesV3 Wraps data regarding the orders volumes (base, quote, and filled.) Field Type Required Description Example baseAmount string Y The amount of base tokens involved in the order. \"0\" quoteAmount string Y The amount of quote tokens involved in the order. \"0\" baseFilled string Y The amount of requested base tokens filled in the order. \"0\" quoteFilled string Y The amount of requested quote tokens filled in the order. \"0\" fee string Y The amount of quote or base token amount used to pay for the orders fee. Whether this data refers to the base or quote token, one can find out by looking at the orders side \"0\" OrderValidityV3 Wraps data regarding time validity constraints (since and until Field Type Required Description Example start integer Y Timestamp from when the order officially becomes valid and fillable 0 end integer Y Timestamp from when the order ceases to be valid and fillable 0 "},"dex_apis/getMarkets.html":{"url":"dex_apis/getMarkets.html","title":"Get market configurations","keywords":"","body":"Get market configurations Rate limit: every seconds API Overview HTTP method GET Path /api/v3/exchange/markets Summary Returns the configurations of all supported markets (trading pairs) API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/exchange/markets HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/exchange/markets Response fields Field Type Required Description Example markets List[MarketInfo] Y Markets list / Response example { \"markets\" : [ { \"market\" : \"LRC-USDT\", \"baseTokenId\" : 2, \"quoteTokenId\" : 0, \"precisionForPrice\" : 6, \"orderbookAggLevels\" : 4, \"enabled\" : false } ] } Status code Value Description 100000 Unknown error Model MarketInfo Field Type Required Description Example market string Y Trading pair ID \"LRC-USDT\" baseTokenId integer Y The base token ID 2 quoteTokenId integer Y The quote token ID 0 precisionForPrice integer Y The precision of price 6 orderbookAggLevels integer Y The max level of orderbook price aggregation 4 enabled boolean Y True if trading is enabled for this trading pair \"false\" "},"dex_apis/getTokens.html":{"url":"dex_apis/getTokens.html","title":"Get token configurations","keywords":"","body":"Get token configurations Rate limit: every seconds API Overview HTTP method GET Path /api/v3/exchange/tokens Summary Returns the configurations of all supported tokens, including Ether. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/exchange/tokens HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/exchange/tokens Response fields Field Type Required Description Example type string Y Token TypeAllowable : ['ERC20', 'ETH'] \"ERC20\" tokenId integer Y Token's numeric ID 2 symbol string Y Token symbol \"LRC\" name string Y Token name \"Loopring\" address string Y Token ERC20 contract address \"0x97241525fe425C90eBe5A41127816dcFA5954b06\" decimals integer Y Token decimals 18 precision integer Y Max decimals that relayer uses for the token, smaller amount will be treated as zero. 6 orderAmounts OrderAmountsV3 Y The amount requirements for submitting orders. \"{min:100000, max:900000, dust:10}\" fastWithdrawLimit string Y The maximum amount for single fast withdrawal \"1000000000000000\" enabled boolean Y Whether the token is currently enabled for deposits and withdrawals. \"true\" Response example { \"type\" : \"ERC20\", \"tokenId\" : 2, \"symbol\" : \"LRC\", \"name\" : \"Loopring\", \"address\" : \"0x97241525fe425C90eBe5A41127816dcFA5954b06\", \"decimals\" : 18, \"precision\" : 6, \"orderAmounts\" : { \"minimum\" : \"10000000000000000\", \"maximum\" : \"1000000000000000000\", \"dust\" : \"1000000000000000\" }, \"fastWithdrawLimit\" : \"1000000000000000\", \"enabled\" : true } Status code Value Description 100000 Unknown error Model OrderAmountsV3 Contains information about the order amounts that are valid for usage with the token in order-related APIs. Field Type Required Description Example minimum string Y The minimum amount enforced when submitting orders for the token. \"10000000000000000\" maximum string Y The maximum amount enforced when submitting orders for the token. \"1000000000000000000\" dust string Y The dust amount enforced when submitting orders for the token. \"1000000000000000\" "},"dex_apis/getExchangeInfo.html":{"url":"dex_apis/getExchangeInfo.html","title":"Get exchange configurations","keywords":"","body":"Get exchange configurations Rate limit: every seconds API Overview HTTP method GET Path /api/v3/exchange/info Summary Return various configurations of Loopring.io API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/exchange/info HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/exchange/info Response fields Field Type Required Description Example chainId integer Y Loopring's smart contract network ID. 1 exchangeAddress string Y Contract address of exchange. \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\" depositAddress string Y field.ExchangeInfo.depositAddress \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\" onchainFees List[FeeInfo] Y Fees settings. / updateFees List[OffFeeInfo] Y field.ExchangeInfo.updateFees / transferFees List[OffFeeInfo] Y Transfer fee settings. / withdrawalFees List[OffFeeInfo] Y Off-chain withdrawal fee settings. / Response example { \"chainId\" : 1, \"exchangeAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"depositAddress\" : \"0xbA1D5779131aa529F51B4B00186E9e97f3BeB854\", \"onchainFees\" : [ { \"type\" : \"withdraw\", \"fee\" : \"2000000000000000\" } ], \"updateFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"transferFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ], \"withdrawalFees\" : [ { \"token\" : \"ETH\", \"fee\" : \"2000000000000000\" } ] } Status code Value Description 100000 Unknown error Model FeeInfo Information about fees charged by the exchange. Field Type Required Description Example type string Y Fee category. \"withdraw\" fee string Y Fee amount in Ether as wei. \"2000000000000000\" OffFeeInfo Off-chain fee info charged by loopring exchange. Field Type Required Description Example token string Y fee token \"ETH\" fee string Y fee amount \"2000000000000000\" "},"dex_apis/getDepth.html":{"url":"dex_apis/getDepth.html","title":"Get market orderbook","keywords":"","body":"Get market orderbook Rate limit: every seconds API Overview HTTP method GET Path /api/v3/depth Summary Returns the order book of a given trading pair. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y The ID of a trading pair. \"LRC-ETH\" level integer Y Order book aggregation level, larger value means further price aggregation. 2 limit integer N Maximum numbers of bids/asks.Default : 50 50 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/depth?market=LRC-ETH&level=2&limit=50 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/depth\\?market\\=LRC-ETH\\&level\\=2\\&limit\\=50 Response fields Field Type Required Description Example version integer Y An ever-increasing numeric version number that reflects its change history. 147 timestamp integer Y Update timestamp 432312312 bids List[List[string]] Y Array of bids, each item is an array that contains the price, size, volume and the number of orders aggregated at this price. \"[[\"0.002\",\"21000\",\"33220000\",\"4\"]]\" asks List[List[string]] Y Array of asks, each item is an array that contains the price, size, volume and the number of orders aggregated at this price. \"[]\" Response example { \"version\" : 147, \"timestamp\" : 432312312, \"bids\" : [[\"0.002\",\"21000\",\"33220000\",\"4\"]], \"asks\" : [] } Status code Value Description 100000 Unknown error 108000 Unsupported market 108001 Unsupported depth level "},"dex_apis/getTicker.html":{"url":"dex_apis/getTicker.html","title":"Get market ticker","keywords":"","body":"Get market ticker Rate limit: every seconds API Overview HTTP method GET Path /api/v3/ticker Summary Gets a markets ticker. Generally speaking, a ticker in Loopring consists in data from the market taken last 24Hours. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Market pair, support multiple markets \"LRC-ETH,LRC-USDT\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/ticker?market=LRC-ETH,LRC-USDT HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/ticker\\?market\\=LRC-ETH,LRC-USDT Response fields Field Type Required Description Example tickers List[List[string]] N Each item in the list is an array that contains the following: trading pair ID, update timestamp, base token volume, quote token volume, open-price, highest price, lowest price, closing price, number of trades, highest bid price, lowest ask price, base fee amount, quote fee amount. All values are returned as strings. Fee amount is for AMM only. \"[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]]\" Response example { \"tickers\" : [[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]] } Status code Value Description 100000 Unknown error 100001 Invalid argument "},"dex_apis/getCandlestick.html":{"url":"dex_apis/getCandlestick.html","title":"Get market candlestick","keywords":"","body":"Get market candlestick Rate limit: every seconds API Overview HTTP method GET Path /api/v3/candlestick Summary Return the candlestick data of a given trading pair. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Trading pair ID, multi-market is not supported \"LRC-ETH\" interval string Y Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w \"5min\" start integer N Start time 1584479105000 end integer N End time 1584565505000 limit integer N Number of data points. If more data points are available, the API will only return the first 'limit' data points. 120 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/candlestick?market=LRC-ETH&interval=5min&start=1584479105000&end=1584565505000&limit=120 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/candlestick\\?market\\=LRC-ETH\\&interval\\=5min\\&start\\=1584479105000\\&end\\=1584565505000\\&limit\\=120 Response fields Field Type Required Description Example candlesticks List[List[string]] N Candlestick data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token \"[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]\" Response example { \"candlesticks\" : [[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]] } Status code Value Description 100000 Unknown error 100001 Invalid argument "},"dex_apis/getPrice.html":{"url":"dex_apis/getPrice.html","title":"Get token fiat prices","keywords":"","body":"Get token fiat prices Rate limit: every seconds API Overview HTTP method GET Path /api/v3/price Summary Fetches, for all the tokens supported by Loopring, their fiat price. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example legal string Y The fiat currency to uses. Currently the following values are supported: USD,CNY,JPY,EUR,GBP,HKD \"USD\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/price?legal=USD HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/price\\?legal\\=USD Response fields Field Type Required Description Example prices List[PriceV3] N field.GetPriceResponseV3.prices / Response example { \"prices\" : [ { \"symbol\" : \"LRC\", \"price\" : \"0\", \"updatedAt\" : 0 } ] } Status code Value Description 100000 Unknown error Model PriceV3 Token fiat price Field Type Required Description Example symbol string Y Token symbol \"LRC\" price string Y Fiat price \"0\" updatedAt integer Y Last update timestamp 0 "},"dex_apis/getMarketTrade.html":{"url":"dex_apis/getMarketTrade.html","title":"Get market recent trades","keywords":"","body":"Get market recent trades Rate limit: every seconds API Overview HTTP method GET Path /api/v3/trade Summary Query trades with specified market API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example market string Y Single market to query \"LRC-USDT\" limit integer N Number of queries 20 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/trade?market=LRC-USDT&limit=20 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/trade\\?market\\=LRC-USDT\\&limit\\=20 Response fields Field Type Required Description Example totalNum integer Y field.MarketTradesV3.totalNum 0 trades List[List[string]] Y field.MarketTradesV3.trades \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" Response example { \"totalNum\" : 0, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } Status code Value Description 100000 Unknown error "},"dex_apis/submitTransfer.html":{"url":"dex_apis/submitTransfer.html","title":"Submit internal transfer","keywords":"","body":"Submit internal transfer Rate limit: every seconds API Overview HTTP method POST Path /api/v3/transfer Summary Submit internal transfer API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string Y ECDSA Signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" Request parameters Field Type Required Description Example exchange string Y exchange address \"1\" payerId integer Y payer account ID 1 payerAddr string Y payer account address \"0xABCD\" payeeId integer Y payee account ID 1 payeeAddr string Y payer account address \"0xCDEF\" token TokenVolumeV3 Y token to be transfer \"{tokenId: 0, volume: 1000000}\" maxFee TokenVolumeV3 Y maximum fee of the transfer \"{tokenId: 0, volume: 1000000}\" storageId integer Y offchain Id 1 validUntil integer Y Timestamp for order to become invalid 1598431481 eddsaSignature string N eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string N ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" hashApproved string N An approved hash string which was already submitted on eth mainnet \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" memo string N transfer memo \"Air Drop\" Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/transfer HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdf Content-Type: application/json { \"exchange\" : \"1\", \"payerId\" : 1, \"payerAddr\" : \"0xABCD\", \"payeeId\" : 1, \"payeeAddr\" : \"0xCDEF\", \"token\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"memo\" : \"Air Drop\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/transfer -d \\ '{ \"exchange\" : \"1\", \"payerId\" : 1, \"payerAddr\" : \"0xABCD\", \"payeeId\" : 1, \"payeeAddr\" : \"0xCDEF\", \"token\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"memo\" : \"Air Drop\" }' Response fields Field Type Required Description Example hash string Y The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string Y Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processedAllowable : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"true\" Response example { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102021 Nonce is invalid 102022 Transfer sender is invalid 102023 Transfer receiver is invalid 102024 Fee token is unsupported 102025 Transfer token isnt consistent with fee token Model TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/getAccount.html":{"url":"dex_apis/getAccount.html","title":"Query user information","keywords":"","body":"Query user information Rate limit: every seconds API Overview HTTP method GET Path /api/v3/account Summary Returns data associated with the user's exchange account. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y Ethereum address \"0x123456\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/account?owner=0x123456 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/account\\?owner\\=0x123456 Response fields Field Type Required Description Example accountId integer Y Account ID 10 owner string Y Ethereum address \"0xABCD\" frozen boolean Y The frozen state of the account, true stands for frozen, if the account is frozen, the user cant submit order. \"false\" publicKey PublicKey Y The user's public key \"{x:0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f,y:0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c}\" tags string N Comma separated list of tags such as VIP levels, etc \"vip_1\" nonce integer Y field.DexAccountV3.nonce 0 Response example { \"accountId\" : 10, \"owner\" : \"0xABCD\", \"frozen\" : false, \"publicKey\" : { \"x\" : \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\", \"y\" : \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" }, \"tags\" : \"vip_1\", \"nonce\" : 0 } Status code Value Description 100000 Unknown error 101001 The address was not found 101002 User not found Model PublicKey Describes the users public key which is a point of the selected eclipse curve. Field Type Required Description Example x string Y The public keys x part. \"0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f\" y string Y The public keys y part. \"0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c\" "},"dex_apis/submitUpdateAccount.html":{"url":"dex_apis/submitUpdateAccount.html","title":"Update account EDDSA key","keywords":"","body":"Update account EDDSA key Rate limit: every seconds API Overview HTTP method POST Path /api/v3/account Summary Updates the EDDSA key associated with the specified account, making the previous one invalid in the process. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string Y ECDSA Signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" Request parameters Field Type Required Description Example exchange string Y exchange address \"1\" owner string Y owner address \"0xB4A70168340C75119523019f79F5Ffd9c60DceC7\" accountId integer Y user account ID 1 publicKey string Y The user's public key \"0xABCD\" maxFee TokenVolumeV3 Y maximum of fee token \"{tokenId: 0, volume: 1000000}\" validUntil integer Y Timestamp for order to become invalid 1583183141 nonce integer Y Nonce of users exchange account that used in off-chain requests. 1 eddsaSignature string N eddsa signature of this request \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string N ecdsa signature of this request \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" hashApproved string N An approved hash string which was submitted on eth mainnet \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/account HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdf Content-Type: application/json { \"exchange\" : \"1\", \"owner\" : \"0xB4A70168340C75119523019f79F5Ffd9c60DceC7\", \"accountId\" : 1, \"publicKey\" : \"0xABCD\", \"maxFee\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"validUntil\" : 1583183141, \"nonce\" : 1, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/account -d \\ '{ \"exchange\" : \"1\", \"owner\" : \"0xB4A70168340C75119523019f79F5Ffd9c60DceC7\", \"accountId\" : 1, \"publicKey\" : \"0xABCD\", \"maxFee\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"validUntil\" : 1583183141, \"nonce\" : 1, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }' Response fields Field Type Required Description Example hash string Y The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string Y Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processedAllowable : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"true\" Response example { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102021 Nonce is invalid 102022 Transfer sender is invalid 102023 Transfer receiver is invalid 102024 Fee token is unsupported 102025 Transfer token isnt consistent with fee token Model TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/getUserCreate.html":{"url":"dex_apis/getUserCreate.html","title":"Get user registration transactions","keywords":"","body":"Get user registration transactions Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/createInfo Summary Returns a list Ethereum transactions from users for exchange account registration. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/createInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&offset=1 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/createInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&offset\\=1 Response fields Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[UserAccountTxData] Y List of UserRegistrationRecord / Response example { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"owner\" : \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model UserAccountTxData Response data Field Type Required Description Example id integer Y Unique ID 1 hash string Y hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" owner string Y Owner address of the Tx \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\" txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y Fee amount in wei \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 "},"dex_apis/getUserUpdate.html":{"url":"dex_apis/getUserUpdate.html","title":"Get password reset transactions","keywords":"","body":"Get password reset transactions Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/updateInfo Summary Returns a list Ethereum transactions from users for resetting exchange passwords. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/updateInfo?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&offset=1 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/updateInfo\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&offset\\=1 Response fields Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[UserAccountTxData] Y List of UserPasswordChangeRecord / Response example { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"owner\" : \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model UserAccountTxData Response data Field Type Required Description Example id integer Y Unique ID 1 hash string Y hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" owner string Y Owner address of the Tx \"0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee\" txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y Fee amount in wei \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 "},"dex_apis/getUserBalances.html":{"url":"dex_apis/getUserBalances.html","title":"Get user exchange balances","keywords":"","body":"Get user exchange balances Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/balances Summary Returns user's Ether and token balances on exchange. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y AccountID 1 tokens string N Query tokens \"0,1\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/balances?accountId=1&tokens=0,1 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/balances\\?accountId\\=1\\&tokens\\=0,1 Response fields Field Type Required Description Example tokenId integer Y Token ID 10 total string Y Amount of the asset \"100\" locked string Y The part of the total balance which is currently not liquid and not at the users disposal (because of pending withdrawals or orders for example) \"100\" pending PendingBalance Y Users pending balances \"100\" Response example { \"tokenId\" : 10, \"total\" : \"100\", \"locked\" : \"100\", \"pending\" : { \"withdraw\" : \"10000000000000\", \"deposit\" : \"10000000000000\" } } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model PendingBalance Users pending balances Field Type Required Description Example withdraw string Y Withdrawal pending balance which means the token is in withdrawal state but not arrived L1 \"10000000000000\" deposit string Y Deposit pending balance which means the token is in deposit state but not arrived L2 \"10000000000000\" "},"dex_apis/getUserDeposits.html":{"url":"dex_apis/getUserDeposits.html","title":"Get user deposit history","keywords":"","body":"Get user deposit history Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/deposits Summary Returns a list of deposit records for the given user. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 tokenSymbol string N Token to filter. If you want to return deposit records for all tokens, omit this parameter \"ETH\" offset integer N Number of records to skipDefault : 0L 1 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/deposits?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&tokenSymbol=ETH&offset=1 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/deposits\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&tokenSymbol\\=ETH\\&offset\\=1 Response fields Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[DepositData] Y List of DepositRecord / Response example { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000 } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model DepositData Response data Field Type Required Description Example id integer Y Unique ID 1 hash string Y hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" symbol string Y Token symbol \"LRC\" amount string Y Amount requested by the user \"1000000000000000000\" txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 "},"dex_apis/getUserWithdrawals.html":{"url":"dex_apis/getUserWithdrawals.html","title":"Get user onchain withdrawal history","keywords":"","body":"Get user onchain withdrawal history Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/withdrawals Summary Get user onchain withdrawal history. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 tokenSymbol string N Token to filter. If you want to return deposit records for all tokens, omit this parameter \"LRC\" offset integer N Number of records to skipDefault : 0L 1 withdrawalTypes string N request.getUserTxs.withdrawalTypesAllowable : ['force_withdrawal', 'offchain_withdrawal'] \"force_withdrawal\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/withdrawals?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&tokenSymbol=LRC&offset=1&withdrawalTypes=force_withdrawal HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/withdrawals\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&tokenSymbol\\=LRC\\&offset\\=1\\&withdrawalTypes\\=force_withdrawal Response fields Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[WithdrawalData] Y List of OnchainWithdrawalRecord / Response example { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"txType\" : \"FORCE_WITHDRAWAL\", \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"txHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"blockNum\" : 100, \"updatedAt\" : 1578572292000, \"distributeHash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"requestId\" : 1, \"fastStatus\" : \"EMPTY\" } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model WithdrawalData Response data Field Type Required Description Example id integer Y Unique ID 1 txType string Y User transaction type \"FORCE_WITHDRAWAL\" hash string Y hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" symbol string Y Token symbol \"LRC\" amount string Y Amount requested by the user \"1000000000000000000\" txHash string Y Transaction hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" feeAmount string Y Fee amount in wei \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 blockNum integer Y Block height 100 updatedAt integer Y Update time 1578572292000 distributeHash string Y Distribute Hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" requestId integer N Request Id 1 fastStatus string N Fast withdrawal statusAllowable : ['EMPTY', 'PROCEEING', 'SUCCESSED', 'FAILED'] \"EMPTY\" "},"dex_apis/submitOffChainWithdrawal.html":{"url":"dex_apis/submitOffChainWithdrawal.html","title":"Submit offchain withdraw request","keywords":"","body":"Submit offchain withdraw request Rate limit: every seconds API Overview HTTP method POST Path /api/v3/user/withdrawals Summary Submit offchain withdraw request API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" X-API-SIG string Y ECDSA Signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" Request parameters Field Type Required Description Example exchange string Y exchange address \"1\" accountId integer Y field.OriginTransferRequestV3.accountId 1 owner string Y field.OriginTransferRequestV3.owner \"1\" token TokenVolumeV3 Y model.OriginTransferRequestV3.token \"{tokenId: 0, volume: 1000000}\" maxFee TokenVolumeV3 Y maximum fee of the transfer \"{tokenId: 0, volume: 1000000}\" storageId integer Y offchain Id 1 validUntil integer Y Timestamp for order to become invalid 1519217383 minGas integer Y min gas for on-chain withdraw 1519217383 to string Y withdraw to address \"0x12345678\" extraData string N extra data for complex withdraw mode, normally none \"0xABCD1234\" fastWithdrawalMode boolean N is fast withdraw mode \"false\" eddsaSignature string N eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string N ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" hashApproved string N An approved hash string which was already submitted on eth mainnet \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/withdrawals HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa X-API-SIG: dkkfinfasdf Content-Type: application/json { \"exchange\" : \"1\", \"accountId\" : 1, \"owner\" : \"1\", \"token\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1519217383, \"minGas\" : 1519217383, \"to\" : \"0x12345678\", \"extraData\" : \"0xABCD1234\", \"fastWithdrawalMode\" : false, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"X-API-SIG:dkkfinfasdf\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/withdrawals -d \\ '{ \"exchange\" : \"1\", \"accountId\" : 1, \"owner\" : \"1\", \"token\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"maxFee\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" }, \"storageId\" : 1, \"validUntil\" : 1519217383, \"minGas\" : 1519217383, \"to\" : \"0x12345678\", \"extraData\" : \"0xABCD1234\", \"fastWithdrawalMode\" : false, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\", \"hashApproved\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" }' Response fields Field Type Required Description Example hash string Y The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string Y Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processedAllowable : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"true\" Response example { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102021 Nonce is invalid 102022 Transfer sender is invalid 102023 Transfer receiver is invalid 102024 Fee token is unsupported 102025 Transfer token isnt consistent with fee token Model TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/getUserTransfers.html":{"url":"dex_apis/getUserTransfers.html","title":"Get user transfer list","keywords":"","body":"Get user transfer list Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/transfers Summary Get user transfer list. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 start integer N Start time in millisecondsDefault : 0L 1578558098000 end integer N End time in millisecondsDefault : 0L 1578558098000 status string N Comma separated status valuesAllowable : ['processing', 'processed', 'received', 'failed'] \"processing,processed\" limit integer N Number of records to return 50 tokenSymbol string N Token to filter. If you want to return deposit records for all tokens, omit this parameter \"LRC\" offset integer N Number of records to skipDefault : 0L 1 transferTypes string N request.getUserTxs.transferTypes \"transfer, transfer_red\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/transfers?accountId=1&start=1578558098000&end=1578558098000&status=processing,processed&limit=50&tokenSymbol=LRC&offset=1&transferTypes=transfer, transfer_red HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/transfers\\?accountId\\=1\\&start\\=1578558098000\\&end\\=1578558098000\\&status\\=processing,processed\\&limit\\=50\\&tokenSymbol\\=LRC\\&offset\\=1\\&transferTypes\\=transfer, transfer_red Response fields Field Type Required Description Example totalNum integer Y Total number of records found 1 transactions List[TransferData] Y User's transfer list / Response example { \"totalNum\" : 1, \"transactions\" : [ { \"id\" : 1, \"hash\" : \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\", \"txType\" : \"transfer\", \"symbol\" : \"LRC\", \"amount\" : \"1000000000000000000\", \"senderAddress\" : \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\", \"receiver\" : 1, \"receiverAddress\" : \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\", \"feeAmount\" : \"1000000000000000\", \"status\" : \"processing\", \"progress\" : \"100%\", \"timestamp\" : 1578572292000, \"updatedAt\" : 1578572292000, \"memo\" : \"Air Drop\" } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model TransferData Field Type Required Description Example id integer Y Unique ID 1 hash string Y hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" txType string Y User transaction type \"transfer\" symbol string Y Token symbol \"LRC\" amount string Y Amount requested by the user \"1000000000000000000\" senderAddress string N field.TxData.senderAddress \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\" receiver integer N Receiver ID 1 receiverAddress string N The transfer receiver's address \"0x0306b9d5c9Ed358FC7b77780bACD15398D242f26\" feeAmount string Y Fee amount in wei \"1000000000000000\" status string Y Current statusAllowable : ['processing', 'processed', 'received', 'failed'] \"processing\" progress string Y Progress \"100%\" timestamp integer Y Create time 1578572292000 updatedAt integer Y Update time 1578572292000 memo string N field.TxData.memo \"Air Drop\" "},"dex_apis/getUserTrades.html":{"url":"dex_apis/getUserTrades.html","title":"Get user trade history","keywords":"","body":"Get user trade history Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/trades Summary Get user trade history. API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 market string N Trading pair \"LRC-ETH\" orderHash string N Order hash \"0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\" offset integer N Number of records to skip 1 limit integer N Number of records to return 50 fromId integer N The begin id of the query. 1 fillTypes string N request.getUserTxs.fillTypesAllowable : ['dex', 'amm'] \"dex\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/trades?accountId=1&market=LRC-ETH&orderHash=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632&offset=1&limit=50&fromId=1&fillTypes=dex HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/trades\\?accountId\\=1\\&market\\=LRC-ETH\\&orderHash\\=0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632\\&offset\\=1\\&limit\\=50\\&fromId\\=1\\&fillTypes\\=dex Response fields Field Type Required Description Example totalNum integer Y Total number of tradings 100 trades List[List[string]] Y field.marketTrades.trades \"[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]\" Response example { \"totalNum\" : 100, \"trades\" : [[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]] } Status code Value Description 100000 Unknown error 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID "},"dex_apis/getUserFeeRates.html":{"url":"dex_apis/getUserFeeRates.html","title":"Query user place order fee rate","keywords":"","body":"Query user place order fee rate Rate limit: every seconds API Overview HTTP method GET Path /api/v3/user/feeRates Summary Returns the fee rate of users placing orders in specific markets API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer Y Account ID 1 markets string Y List of markets to be queried separated by \",\" \"LRC-USDT,LRC-ETH\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/feeRates?accountId=1&markets=LRC-USDT,LRC-ETH HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/user/feeRates\\?accountId\\=1\\&markets\\=LRC-USDT,LRC-ETH Response fields Field Type Required Description Example symbol string Y Market \"LRC-USDT\" makerRate integer Y Maker rate 20 takerRate integer Y Taker rate 20 Response example { \"symbol\" : \"LRC-USDT\", \"makerRate\" : 20, \"takerRate\" : 20 } Status code Value Description 100000 Unknown error "},"dex_apis/getAmmPools.html":{"url":"dex_apis/getAmmPools.html","title":"Get AMM pool configurations","keywords":"","body":"Get AMM pool configurations Rate limit: every seconds API Overview HTTP method GET Path /api/v3/amm/pools Summary Returns the configurations of all supported AMM pools API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters None Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/pools HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/pools Response fields Field Type Required Description Example pools List[AmmPoolInfoV3] Y AMM pool list / Response example { \"pools\" : [ { \"name\" : \"LRC-USDT-Pool-1\", \"market\" : \"AMM-LRC-USDT\", \"address\" : \"0xa6fa83b62b09174694EFD7EE3aE608ad478a138E\", \"version\" : \"1.0.0\", \"tokens\" : { \"pooled\" : [2,3,5], \"lp\" : 0 }, \"feeBips\" : 6, \"precisions\" : { \"price\" : 6, \"amount\" : 6 }, \"status\" : 7 } ] } Status code Value Description 100000 Unknown error Model AmmPoolInfoV3 AMM pool info Field Type Required Description Example name string Y AMM pool name, used to calculate domainSeparator of EIP712 hash if use chooses ECDSA sign path. \"LRC-USDT-Pool-1\" market string Y AMM pool market name, can be used to query market related info like ticker, etc \"AMM-LRC-USDT\" address string Y AMM pool address \"0xa6fa83b62b09174694EFD7EE3aE608ad478a138E\" version string Y AMM pool contract version \"1.0.0\" tokens AmmPoolTokens Y AMM pool token info \"{[2,3],5}\" feeBips integer Y AMM fee bips 6 precisions AmmPoolPrecisions Y AMM pool precision configuration \"{price:6, amount: 8}\" status integer Y AMM market status 7 AmmPoolTokens Wrapper object containing information about the tokens in the pool Field Type Required Description Example pooled List[object] Y An array containing the unique identifiers of those tokens that are currently in the pool, seq matters as most requests ask for the same sequence. \"[2,3,5]\" lp integer Y The unique identifier of the pool-specific LP token. This token is minted when supplying liquidity to the pool, and represents liquidity stakes in it 0 AmmPoolPrecisions The precision requirement of a AMM pool Field Type Required Description Example price integer Y The price precision requirement of a AMM pool 6 amount integer Y The amount precision requirement of a AMM pool 6 "},"dex_apis/getAmmPoolBalance.html":{"url":"dex_apis/getAmmPoolBalance.html","title":"Get AMM pool balance snapshot","keywords":"","body":"Get AMM pool balance snapshot Rate limit: every seconds API Overview HTTP method GET Path /api/v3/amm/balance Summary Returns the snapshot of specific AMM pool API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example poolAddress string Y input AMM pool address \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/balance?poolAddress=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/balance\\?poolAddress\\=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd Response fields Field Type Required Description Example pooled List[TokenVolumeV3] Y AMM in pool tokens balances \"[{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}]\" lp TokenVolumeV3 Y AMM pool mint token balance \"{tokenId: 0, volume:1000000000}\" Response example { \"pooled\" : [{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}], \"lp\" : { \"tokenId\" : \"0\", \"volume\" : \"1000000000000\" } } Status code Value Description 100000 Unknown error Model TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/submitAmmPoolJoin.html":{"url":"dex_apis/submitAmmPoolJoin.html","title":"Join into AMM pool","keywords":"","body":"Join into AMM pool Rate limit: every seconds API Overview HTTP method POST Path /api/v3/amm/join Summary Return the join request processing status API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y The account owner adderss \"0xe25c94ba036d91b48833acb637f719038f07372d\" poolAddress string Y AMM pool address to be joined \"0xe25c94ba036d91b48833acb637f719038f07372d\" joinTokens AmmPoolJoinTokens Y Token amounts to be joined and the minimum mint token to be paied back \"{\"pooled\": [{\"id\": 0,\"amount\": 0}],\"minimumLp\": 0}\" storageIds string Y Offchain request storage Id \"1\" validUntil integer Y Timestamp for order to become invalid 1598431481 eddsaSignature string N AMM join request eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string N AMM join request ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/join HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"joinTokens\" : { \"pooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"minimumLp\" : \"1000000000\" }, \"storageIds\" : \"1\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/join -d \\ '{ \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"joinTokens\" : { \"pooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"minimumLp\" : \"1000000000\" }, \"storageIds\" : \"1\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }' Response fields Field Type Required Description Example hash string Y The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string Y Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processedAllowable : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"true\" Response example { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102021 Nonce is invalid 102022 Transfer sender is invalid 102023 Transfer receiver is invalid 102024 Fee token is unsupported 102025 Transfer token isnt consistent with fee token Model AmmPoolJoinTokens escribes an AMM join transaction Field Type Required Description Example pooled List[TokenVolumeV3] Y Describes an amount of a specific token to be supplied to the pool, the seq matters, and must be the same as the pool token list returned by pool info \"[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]\" minimumLp string Y The minimum amoun of LP token desired in exchange for supplying liquidity to the pool \"1000000000\" TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/submitAmmPoolExit.html":{"url":"dex_apis/submitAmmPoolExit.html","title":"Exit an AMM pool","keywords":"","body":"Exit an AMM pool Rate limit: every seconds API Overview HTTP method POST Path /api/v3/amm/exit Summary Return the exit request processing status API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example owner string Y The account owner adderss \"0xe25c94ba036d91b48833acb637f719038f07372d\" poolAddress string Y AMM pool address to be joined \"0xe25c94ba036d91b48833acb637f719038f07372d\" exitTokens AmmPoolExitTokens Y Exit token amounts, include mint token to burn and the minimum exit tokens to be get back \"{\"burned\": 0,\"unpooled\": [{\"id\": 0,\"amount\": 0}]}\" storageId integer Y Offchain request storage Id 1 maxFee string Y field.AmmPoolExitRequestV3.maxFee \"1000000000000000000\" validUntil integer Y Timestamp for order to become invalid 1598431481 eddsaSignature string N AMM join request eddsa signature \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\" ecdsaSignature string N AMM join request ecdsa signature \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" Request example HTTPCURLPOST http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/exit HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfa Content-Type: application/json { \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"exitTokens\" : { \"unPooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"burned\" : \"1000000000\" }, \"storageId\" : 1, \"maxFee\" : \"1000000000000000000\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }curl -X POST -H \"X-API-KEY:sra1aavfa\" -H \"Content-Type:application/json\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/exit -d \\ '{ \"owner\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"poolAddress\" : \"0xe25c94ba036d91b48833acb637f719038f07372d\", \"exitTokens\" : { \"unPooled\" : [{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}], \"burned\" : \"1000000000\" }, \"storageId\" : 1, \"maxFee\" : \"1000000000000000000\", \"validUntil\" : 1598431481, \"eddsaSignature\" : \"0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02\", \"ecdsaSignature\" : \"0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9\" }' Response fields Field Type Required Description Example hash string Y The order hash identifier set by the user at the time of submission \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\" status string Y Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processedAllowable : ['received', 'processing', 'processed', 'failed'] \"received\" isIdempotent boolean Y Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be trueAllowable : [True, False] \"true\" Response example { \"hash\" : \"0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3\", \"status\" : \"received\", \"isIdempotent\" : true } Status code Value Description 100000 Unknown error 102001 Exchange ID is incorrect 102021 Nonce is invalid 102022 Transfer sender is invalid 102023 Transfer receiver is invalid 102024 Fee token is unsupported 102025 Transfer token isnt consistent with fee token Model AmmPoolExitTokens escribes an AMM join transaction Field Type Required Description Example unPooled List[TokenVolumeV3] Y Describes list of the amount of a specific token to be removed from the pool, tokens seq should be same as AMM pool info \"[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]\" burned string Y The minimum amoun of LP token to burn \"1000000000\" TokenVolumeV3 Wrapper object used to describe a token associated with a certain quantity. Field Type Required Description Example tokenId string Y The Loopring's token identifier. \"0\" volume string N The volume of the token \"1000000000000\" "},"dex_apis/getAmmUserTransactions.html":{"url":"dex_apis/getAmmUserTransactions.html","title":"User's AMM join/exit transactions","keywords":"","body":"User's AMM join/exit transactions Rate limit: every seconds API Overview HTTP method GET Path /api/v3/amm/user/transactions Summary Return the user's AMM join/exit transactions API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example accountId integer N Looprings account identifier. 1578558098000 start integer N Date from which to start fetching AMM transactions. 1578558098000 end integer N End Date of the query 1578558098000 limit integer N Used to limit the number of returned records. Useful in implementing pagination. 50 offset integer N Used to apply an offset when looking for valid records. Useful in implementing 0 txTypes string N Transaction type: join or exit \"0\" txStatus string N The AMM transaction status. \"0\" ammPoolAddress string N The address of the pool on which the swap was submitted. \"0\" Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/user/transactions?accountId=1578558098000&start=1578558098000&end=1578558098000&limit=50&offset=0&txTypes=0&txStatus=0&ammPoolAddress=0 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/user/transactions\\?accountId\\=1578558098000\\&start\\=1578558098000\\&end\\=1578558098000\\&limit\\=50\\&offset\\=0\\&txTypes\\=0\\&txStatus\\=0\\&ammPoolAddress\\=0 Response fields Field Type Required Description Example totalNum integer Y Number of AMM pool transactions 10 transactions List[AmmTransactionDataV3] Y List of AMM pool transactions / Response example { \"totalNum\" : 10, \"transactions\" : [ { \"hash\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"txType\" : \"join\", \"txStatus\" : \"processing\", \"ammPoolAddress\" : \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\", \"ammLayerType\" : \"layer_2\", \"poolTokens\" : [ { \"tokenId\" : 0, \"amount\" : \"1000000\", \"actualAmount\" : \"100000\", \"feeAmount\" : \"500000\" } ], \"lpToken\" : { \"tokenId\" : 0, \"amount\" : \"1000000\", \"actualAmount\" : \"100000\", \"feeAmount\" : \"500000\" }, \"createdAt\" : 1608189538074, \"updatedAt\" : 1608209538074 } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model AmmTransactionDataV3 AMM transaction info data Field Type Required Description Example hash string Y AMM transaction hash \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" txType string Y AMM transaction type, i.e., join, exit, etcAllowable : ['join', 'exit'] \"join\" txStatus string Y AMM transaction processing status, i.e., processing, processed, failed, etcAllowable : ['processing', 'cancelled', 'processed'] \"processing\" ammPoolAddress string Y AMM pool address of query \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" ammLayerType string Y AMM transaction layer, 1 or 2Allowable : ['layer_1', 'layer_2'] \"layer_2\" poolTokens List[AmmTransferDataV3] Y The in pool tokens transfers records of the AMM transaction / lpToken AmmTransferDataV3 Y The lp tokens transfers records of the AMM transaction / createdAt integer Y Transaction creation time 1608189538074 updatedAt integer Y Transaction update time 1608209538074 AmmTransferDataV3 AMM transfer info data Field Type Required Description Example tokenId integer Y AMM transfer token id 0 amount string Y AMM transfer token amount \"1000000\" actualAmount string Y Actual AMM transfer token amount due to precision processing \"100000\" feeAmount string Y Actual AMM transfer fee amount \"500000\" "},"dex_apis/getAmmTrades.html":{"url":"dex_apis/getAmmTrades.html","title":"get AMM pool trade transactions","keywords":"","body":"get AMM pool trade transactions Rate limit: every seconds API Overview HTTP method GET Path /api/v3/amm/trades Summary get AMM pool trade transactions API description HTTP Header Field Type Required Description Example X-API-KEY string Y ApiKey \"HlkcGxbqBeaF76j4rvPaOasyfPwnkQ6B6DQ6THZWbvrAGxzEdulXQvOKLrRWZLnN\" Request parameters Field Type Required Description Example ammPoolAddress string Y The address of the pool on which the swap was submitted. \"0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\" limit integer N Used to limit the number of returned records. Useful in implementing pagination. 50 offset integer N Used to apply an offset when looking for valid records. Useful in implementing 0 Request example HTTPCURLGET http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/trades?ammPoolAddress=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd&limit=50&offset=0 HTTP/1.1 Host: aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com Connection: keep-alive Accept: */* Accept-Encoding: gzip, deflate, br Accept-Language: zh,en;q=0.9 X-API-KEY: sra1aavfacurl -H \"X-API-KEY:sra1aavfa\" http://aa90cd58e38014a1b864ddc488129b7a-624979106.us-east-2.elb.amazonaws.com/api/v3/amm/trades\\?ammPoolAddress\\=0xbbbbca6a901c926f240b89eacb641d8aec7aeafd\\&limit\\=50\\&offset\\=0 Response fields Field Type Required Description Example totalNum integer Y Number of trades 12345 trades List[AmmTradeDataV3] Y AMM trade list / Response example { \"totalNum\" : 12345, \"trades\" : [ { \"accountId\" : 12345, \"orderHash\" : \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\", \"market\" : \"AMM-DAI-ETH\", \"side\" : \"BUY\", \"size\" : \"100000000\", \"price\" : 0.03, \"feeAmount\" : \"100000000\", \"createdAt\" : 1608189538074 } ] } Status code Value Description 100000 Unknown error 107001 User ID cannot be empty 104001 Empty ApiKey 104002 Invalid ApiKey 104003 Invalid Account ID Model AmmTradeDataV3 AMM trade info data Field Type Required Description Example accountId integer Y trader's accountId 12345 orderHash string Y AMM trade's order hash \"0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085\" market string Y The trade market \"AMM-DAI-ETH\" side string Y The trade direction, buy or sellAllowable : ['BUY', 'SELL'] \"BUY\" size string Y The trade volume \"100000000\" price number Y The trade price 0.03 feeAmount string Y The trade fee \"100000000\" createdAt integer Y The trade's creation time 1608189538074 "},"websocket/overview.html":{"url":"websocket/overview.html","title":"WebSocket API","keywords":"","body":"WebSocket API Base URL mainnet: wss://ws.loopring.io/v3/ws testnet(goerli): wss://ws.uat2.loopring.io/v3/ws Before Subscription Before subscription, user needs to get a connect key, otherwise, websocket connection will be refused. The full connection steps are listed below: Get wsApiKey by access REST path \"/v3/ws/key\", and you will get response like {\"key\":\"fx2xW5hoVFbcaanWS\"} Use fx2xW5hoVFbcaanWS as a wsApiKey param in ws path, i.e., wss://ws.uat2.loopring.io/v3/ws?wsApiKey=fx2xW5hoVFbcaanWS. Subscription Clients can send JSON to subscribe to multiple topics: { \"op\": \"sub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": true, \"topics\": [ { \"topic\": \"account\" }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic\": \"orderbook\", \"market\": \"LRC-ETH\", \"level\": 0 }, { \"topic\": \"orderbook\", \"market\": \"LRC-USDT\", \"level\": 0, \"count\": 20, \"snapshot\": true } ] } In one subscription request, if at least one topic requires the ApiKey, then the apiKey filed is required; In one subscription request, the same topic configuration can only occur once; In one subscription request, if there are any configuration errors, the entire subscription request fails; If unsubscribeAll is true, all previous subscriptions will be cancelled; If sequence is provided, the relayer will use the same sequence number in its response. Unsubscription Clients can send JSON to unsubscribe from multiple topics: { \"op\":\"unSub\", \"sequence\": 10000, \"apiKey\": \".....\", \"unsubscribeAll\": false, \"topics\": [ { \"topic\": \"account\", }, { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, { \"topic\": \"order\", \"market\": \"LRC-USDT\" }, { \"topic\": \"orderbook\", \"unsubscribeAll\":true } ] }, In one unsubscription request, if at least one topic requires the ApiKey, then the apiKey filed is required; In one unsubscription request, the same topic configuration can only occur once; In one unsubscription request, if there are any configuration errors, the entire unsubscription request fails; If the top-level unsubscribeAll is true, all previous subscriptions will be cancelled; if the per-topic unsubscribeAll is true, then all subscriptions to that topic will be cancelled; If sequence is provided, the relayer will use the same sequence number in its response. Subscribe up to 20 topics in total. Heartbeat After a WebSocket connection is established, the relay will send a \"ping\" message to the client for heartbeat detection every 30 seconds. If the client does not reply with a \"pong\" message within 2 minutes, the relay will disconnect. If the number of \"pong\" messages exceeds the number of \"ping\" messages, the relay will also disconnect. Response Field Type Required Note op string Y \"sub\" or \"unSub\" sequence integer N A client-side sequence number topics JSON Y Topics and their configurations result Result Y Subscription result Result Field Type Required Note status string Y Status code error Error N Error Error Field Type Required Note code integer Y Value message string Y Error message Status code Value Note 104100 Topic missing 104101 Invalid op code 104102 Invalid topic 104103 Duplicate topic configs 104104 Missing ApiKey 104105 ApiKey mismatched 104112 Invalid ApiKey 104113 Subscription not found 104114 Invalid ApiKey (user not found) 104115 Invalid topic config 104116 exceed maximum subscriptions Examples A successful subscriptionï¼š { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic\": \"orderbook\", \"market\": \"LRC-ETH\", \"level\": 0 } ], \"result\": { \"status\": \"ok\" } } A failed subscriptionï¼š { \"op\": \"sub\", \"sequence\": 10000, \"topics\": [ { \"topic\": \"candlestick\", \"market\": \"LRC-ETH\", \"count\": 10 } ], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104106, \"message\": \"receive illegal arg for candlestick:lrc-eth\" } } } Another failed subscriptionï¼š { \"op\": \"sub\", \"topics\": [], \"result\": { \"status\": \"failed\", \"error\": { \"code\": 104115, \"message\": \"unexpected msg:xxx\" } } } "},"websocket/account.html":{"url":"websocket/account.html","title":"Account Notification","keywords":"","body":"Account Notification Subscribe to this topic to receive notifications about user balance update. Rules Topic name: account ApiKey requred: Yes Parameters This topic doesn't support any parameter. Notification example { \"topic\": { \"topic:\": \"account\" }, \"ts\":1584717910000, \"data\": { \"accountId\":1, \"totalAmount\": \"24439253519655\", \"tokenId\": 2, \"amountLocked\": \"0\" } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data Balance Y User's new balances Balance Field Type Required Note accountId integer Y Account ID tokenId integer Y Token ID totalAmount string Y Total token balance amountLocked string Y Token balance locked by orders "},"websocket/order.html":{"url":"websocket/order.html","title":"Order Notification","keywords":"","body":"Order Notification Subscribe to this topic to receive notifications about order updates for specific trading pairs. Rules Topic name: order ApiKey requred: Yes Parameters Parameter Required Note market Y Trading pair Status code Value Note 104110 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"order\", \"market\": \"LRC-ETH\" }, \"ts\":1565844328, \"data\": { \"hash\": \"11212\", \"clientOrderId\": \"myOrder\", \"size\": \"500000000\", \"volume\": \"210000000\", \"price\": \"0.000004\", \"filledSize\": \"30000000\", \"filledVolume\": \"100000\", \"filledFee\": \"1000000\", \"status\": \"processing\", \"createdAt\": \"1494900087\", \"validSince\": \"1494900087\", \"validUntil\": \"1495900087\", \"side\": \"buy\", \"market\": \"LRC-ETH\" } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data Order Y The order Order Field Type Required Note hash string Y Order hash clientOrderId string Y Client defined order ID size string Y Amount (quantity of base token) volume string Y Total (quantity of quote token) price string Y Order price filledSize string Y Filled amount of base token filledVolume string Y Filled amount of quote token filledFee string Y Fees paid status string Y Order status createdAt integer Y Order creation timestamp updateAt integer Y Order last update timestamp side string Y Buy or sell market string Y Trading pair Order status Value Note processing Active (aka Open, may be partially filled) processed Fully filled cancelling Being cancelled cancelled Cancelled expired Expired waiting Pending active "},"websocket/orderbook.html":{"url":"websocket/orderbook.html","title":"Orderbook Notification","keywords":"","body":"Orderbook Notification Subscribe to this topic to receive notifications about orderbook updates for specific trading pairs. Rules Topic name: orderbook ApiKey requred: No Parameters Parameter Required Note market Y Trading pair level Y Price aggregation level count N Number of bids/ask price slots, count can not be larger than 50, and only take effect when snapshot is true. snapshot N Default to false. If true, the client will receive full notification with up to count bid/ask price slots when at least one slot has update. Status code Value Note 104107 Invalid topic or parameters Notification example { \"topic\": { \"topic:\": \"orderbook\", \"market\": \"LRC-USDT\", \"level\": 0 }, \"ts\": 1584717910000, \"startVersion\": 1212121, \"endVersion\": \"1212123\", \"data\": { \"bids\": [ [ \"295.97\", //price \"456781000000000\", //size \"3015000000000\", //volume \"4\" //count ] ], \"asks\": [ [ \"298.97\", \"456781000000000000\", \"301500000000000\", \"2\" ] ] } } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) startVersion integer Y Previous version number endVersion integer Y Updated versionnumber data OrderBook Y The orderbook OrderBook Field Type Required Note bids List[List[string]] Y PriceSlot array for bids asks List[List[string]] Y PriceSlot array for asks PriceSlot Index Type Required Note 1 string Y Price 2 string Y Amount (quantity of base token) 3 string Y Total (quantity of quote token) 4 string Y Number of orders at this price Note that amount and total are the curent values, not the delta between the current and the previous values. "},"websocket/trade.html":{"url":"websocket/trade.html","title":"Trade Notification","keywords":"","body":"Trade Notification Subscribe to this topic to receive notifications about bew trades for specific trading pairs. Rules Topic name: trade ApiKey requred: No Parameters Parameter Required Note market Y Trading pair Status code Value Note 104109 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"trade\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ [ \"1584717910000\", //timestamp \"123456789\", //tradeId \"buy\", //side \"500000\", //size \"0.0008\", //price \"100\" //fee ] ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data List[List[string]] Y Trade array list Trade Index Type Required Note 1 integer Y Trade timestamp 2 integer Y Fill sequence number 3 string Y Taker's side (buy or sell) 4 string Y Filled amount of base token 5 string Y Fill price 6 string Y Fee paid in base token "},"websocket/ticker.html":{"url":"websocket/ticker.html","title":"Ticker Notification","keywords":"","body":"Ticker Notification Subscribe to this topic to receive notifications about ticker updates for specific trading pairs. Rules Topic name: ticker ApiKey requred: No Parameters Parameter Required Note market Y Trading pair Status code Value Note 104111 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"ticker\", \"market\": \"LRC-ETH\" }, \"ts\": 1584717910000, \"data\": [ \"LRC-ETH\", //market \"1584717910000\", //timestamp \"5000000\", //size \"1000\", //volume \"0.0002\", //open \"0.00025\", //high \"0.0002\", //low \"0.00025\", //close \"5000\", //count \"0.00026\", //bid \"0.00027\" //ask ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data List[string] Y Ticker array Ticker Index Type Required Note 1 string Y Trading pair 2 integer Y Ticker update timestamp 3 string Y Amount (quantity of base token) 4 string Y Total (quantity of quote token) 5 string Y Open price 6 string Y Highest price 7 string Y Lowest price 8 string Y Latest price 9 integer Y Number of trades 10 string Y Highest bid price 11 string Y Lowest ask price "},"websocket/candlestick.html":{"url":"websocket/candlestick.html","title":"Candlestick Notification","keywords":"","body":"Candlestick Notification Subscribe to this topic to receive notifications about candlestick updates for specific trading pairs. Rules Topic name: candlestick ApiKey requred: No Parameters Parameter Required Note market Y Trading pair interval Y Time interval Time intervals Value Note 1min 1 minute 5min 5 minutes 15min 15 minutes 30min 30 minutes 1hr 1 hour 2hr 2 hours 4hr 4 hours 12hr 12 hours 1d 1 day 1w 1 week Status code Value Note 104106 Invalid topic or parameters Notification example { \"topic\": { \"topic\": \"candlestick\", \"interval\": \"2hr\" }, \"ts\":1584717910000, \"data\": [ \"1584717910000\", //open timestamp (ms) \"5000\", //count \"3997.3\", //open \"3998.7\", //close \"4031.9\", //high \"3982.5\", //low \"500000000000000000\", //size \"2617521141385000000\", //volume ] } Data Model Notification Field Type Required Note topic JSON Y Topic and parameters ts integer Y Notification timestamp (milliseconds) data List[string] Y Candlestick array Candlestick Index Type Required Note 1 integer Y Open timestamp 2 integer Y Nubmer of trades 3 string Y Open price 4 string Y Close price 5 string Y Highest price 6 string Y Lowest price 7 string Y Traded amount of Base Tokens (in Wei) 8 string Y Traded amount of quote Tokens (in Wei) "}}