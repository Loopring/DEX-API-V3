{
  "swagger" : "2.0",
  "info" : {
    "description" : "LightCone DEX function interpretation",
    "version" : "1.0",
    "title" : "LightCone 2.0 API Documentation",
    "termsOfService" : "http://Loopring.com",
    "contact" : {
      "name" : "Loopring@Loopring.com"
    },
    "license" : {
      "name" : "license Loopring",
      "url" : "https://loopring.org"
    }
  },
  "host" : "api.loopring.network",
  "basePath" : "/",
  "tags" : [ {
    "name" : "Loopring DEX Restful API"
  }, {
    "name" : "LightCone WebSocket API"
  } ],
  "paths" : {
    "/api/v2/exchange/tokens" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get token configurations",
        "description" : "Returns the configurations of all supported tokens, including Ether.",
        "operationId" : "getTokens",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTokenInfoResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/transfer" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit internal transfer",
        "description" : "Submit internal transfer",
        "operationId" : "submitTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Submit internal transfer post message body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OriginTransferRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/account" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Query user information",
        "description" : "Returns data associated with the user's exchange account.",
        "operationId" : "getAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "description" : "Ethereum address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x123456"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAccountResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "101001" : {
            "description" : "The address was not found"
          },
          "101002" : {
            "description" : "User not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Update account EDDSA key",
        "description" : "Updates the EDDSA key associated with the specified account, making the previous one invalid in the process.",
        "operationId" : "submitUpdateAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.submitUpdateAccount.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateAccountRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/user/offchainFee" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getBusinessFee2.value",
        "description" : "api.getBusinessFee2.notes",
        "operationId" : "getBusinessFee2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "request.getBusinessFee2.accountId",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "requestType",
          "in" : "query",
          "description" : "request.getBusinessFee2.requestType",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1,
          "enum" : [ "0:ORDER", "1:OFFCHAIN_WITHDRAWAL", "2:UPDATE_ACCOUNT", "3:TRANSFER", "4:FAST_OFFCHAIN_WITHDRAWAL", "5:OPEN_ACCOUNT", "6:AMM_EXIT", "7:DEPOSIT", "8:AMM_JOIN" ]
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "request.getBusinessFee2.tokenSymbol",
          "required" : false,
          "type" : "string",
          "x-example" : "LRC"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "request.getBusinessFee2.amount",
          "required" : false,
          "type" : "string",
          "x-example" : "10000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOffchainFee2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/exchange/markets" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market configurations",
        "description" : "Returns the configurations of all supported markets (trading pairs)",
        "operationId" : "getMarkets",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetMarketInfoResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/orders" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get multiple orders",
        "description" : "Get a list of orders satisfying certain criteria.",
        "operationId" : "getOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Lower bound of order's creation timestamp in millisecond",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1567053142000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "Upper bound of order's creation timestamp in millisecond",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1567053242000
        }, {
          "name" : "side",
          "in" : "query",
          "description" : "\"BUY\" or \"SELL\"",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "BUY",
          "enum" : [ "BUY", "SELL" ]
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Order status. You can specify one of the following values:",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "failed", "cancelled", "cancelling", "expired" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of orders (default 50)",
          "required" : false,
          "type" : "integer",
          "default" : "None ",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of orders (default 0)",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 0
        }, {
          "name" : "orderTypes",
          "in" : "query",
          "description" : "request.getOrders.orderTypes",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LIMIT_ORDER",
          "enum" : [ "LIMIT_ORDER", "MAKER_ONLY", "TAKER_ONLY", "AMM" ]
        }, {
          "name" : "tradeChannels",
          "in" : "query",
          "description" : "field.SubmitOrderRequest.tradeChannel",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "ORDER_BOOK",
          "enum" : [ "ORDER_BOOK:0", "AMM_POOL:1", "MIXED:2" ]
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOrdersResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.CancelOrders.value",
        "description" : "api.CancelOrders.notes",
        "operationId" : "cancelOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "request.cancelOrders.accountId",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "request.cancelOrders.orderHash",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        }, {
          "name" : "clientOrderId",
          "in" : "query",
          "description" : "request.cancelOrders.clientOrderId",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "20200318000000001010"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CancelOrdersResponseData"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "102117" : {
            "description" : "No orders to cancel"
          },
          "102118" : {
            "description" : "Failed to cancel orders, please try again later"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/depth" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market orderbook",
        "description" : "Returns the order book of a given trading pair.",
        "operationId" : "getDepth",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "The ID of a trading pair.",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Order book aggregation level, larger value means further price aggregation.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 2
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum numbers of bids/asks.",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32",
          "x-example" : 50
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDepthResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "108000" : {
            "description" : "Unsupported market"
          },
          "108001" : {
            "description" : "Unsupported depth level"
          }
        }
      }
    },
    "/api/v2/mix/depth" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market orderbook",
        "description" : "Returns the order book of a given trading pair.",
        "operationId" : "getMixedDepth",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "The ID of a trading pair.",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Order book aggregation level, larger value means further price aggregation.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 2
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum numbers of bids/asks.",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "showOverlap",
          "in" : "query",
          "description" : "request.getDepth.showOverlap",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "x-example" : false
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDepthResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "108000" : {
            "description" : "Unsupported market"
          },
          "108001" : {
            "description" : "Unsupported depth level"
          }
        }
      }
    },
    "/api/v2/ticker" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market ticker",
        "description" : "Gets a markets ticker. Generally speaking, a ticker in Loopring consists in data from the market taken last 24Hours.",
        "operationId" : "getTicker",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Market pair, support multiple markets",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH,LRC-USDT"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTickerResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v2/mix/ticker" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market ticker",
        "description" : "Gets a markets ticker. Generally speaking, a ticker in Loopring consists in data from the market taken last 24Hours.",
        "operationId" : "getMixedTicker",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Market pair, support multiple markets",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH,LRC-USDT"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTickerResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v2/price" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get token fiat prices",
        "description" : "Fetches, for all the tokens supported by Loopring, their fiat price.",
        "operationId" : "getPrice",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "legal",
          "in" : "query",
          "description" : "request.getPrice.legal",
          "required" : true,
          "type" : "string",
          "x-example" : "USD"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetPriceV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/trade" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market recent trades",
        "description" : "Query trades with specified market",
        "operationId" : "getMarketTrade",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Single market to query",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-USDT"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of queries",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 20
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetMarketTradesV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/candlestick" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market candlestick",
        "description" : "Return the candlestick data of a given trading pair.",
        "operationId" : "getCandlestick",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair ID, multi-market is not supported",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "interval",
          "in" : "query",
          "description" : "Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w",
          "required" : true,
          "type" : "string",
          "x-example" : "5min"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584479105000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584565505000
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of data points. If more data points are available, the API will only return the first 'limit' data points.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 120
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetCandlestickResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v2/mix/candlestick" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market candlestick",
        "description" : "Return the candlestick data of a given trading pair.",
        "operationId" : "getMixedCandlestick",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair ID, multi-market is not supported",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "interval",
          "in" : "query",
          "description" : "Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w",
          "required" : true,
          "type" : "string",
          "x-example" : "5min"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584479105000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584565505000
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of data points. If more data points are available, the API will only return the first 'limit' data points.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 120
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetCandlestickResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v3/eth/nonce" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user's next Ethereum nonce",
        "description" : "Returns the next nonce of the Ethereum address associated with the user's account",
        "operationId" : "getEthNonce",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "description" : "Ethereum address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x0000000000000000000000000000000000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetEthNonceV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104205" : {
            "description" : "Error in internal request"
          },
          "104208" : {
            "description" : "Unknown error in Ethereum node"
          }
        }
      }
    },
    "/api/v3/eth/balances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user's Ether balance on Ethereum mainnet",
        "description" : "Returns user's Ether balance on Ethereum mainnet (not the Ether balance on Loopring.io)",
        "operationId" : "getEthBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "description" : "Ethereum address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x0000000000000000000000000000000000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetEthBalancesV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104205" : {
            "description" : "Error in internal request"
          },
          "104208" : {
            "description" : "Unknown error in Ethereum node"
          }
        }
      }
    },
    "/api/v3/eth/tokenBalances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user token balance",
        "description" : "Returns user's token balance on Ethereum mainnet (not token's balance on Loopring.io)",
        "operationId" : "getTokenBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "description" : "Ethereum address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x0000000000000000000000000000000000000000"
        }, {
          "name" : "token",
          "in" : "query",
          "description" : "Token's ERC20 address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x0000000000000000000000000000000000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTokenBalancesV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104205" : {
            "description" : "Error in internal request"
          },
          "104208" : {
            "description" : "Unknown error in Ethereum node"
          }
        }
      }
    },
    "/api/v3/eth/allowances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user token allowance",
        "description" : "Returns the allowance of a given token that the user has authorized for Loopring.io",
        "operationId" : "getAllowance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "description" : "Ethereum address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x0000000000000000000000000000000000000000"
        }, {
          "name" : "token",
          "in" : "query",
          "description" : "The token address to query",
          "required" : true,
          "type" : "string",
          "x-example" : "0x0000000000000000000000000000000000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAllowancesV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104205" : {
            "description" : "Error in internal request"
          },
          "104208" : {
            "description" : "Unknown error in Ethereum node"
          }
        }
      }
    },
    "/api/v3/eth/recommendedGasPrice" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get recommended gas price",
        "description" : "Get recommended gas price in Gwei.",
        "operationId" : "getRecommendedGasPrice",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetRecommendedGasPriceResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "105001" : {
            "description" : "Failed to get recommended gas"
          }
        }
      }
    },
    "/api/v2/apiKey" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user ApiKey",
        "description" : "Get the ApiKey associated with the user's account.",
        "operationId" : "getApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "AccountID",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 10
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetApiKeyResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "101002" : {
            "description" : "User not found"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          },
          "104004" : {
            "description" : "No signature information provided"
          },
          "104005" : {
            "description" : "Wrong signature information"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Update user's ApiKey",
        "description" : "Change the ApiKey associated with the user's account. The current ApiKey must be provided as the value of the X-API-KEY HTTP header.",
        "operationId" : "applyApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.applyApiKey.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GetApiKeyRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetApiKeyResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "101002" : {
            "description" : "User not found"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          },
          "104004" : {
            "description" : "No signature information provided"
          },
          "104005" : {
            "description" : "Wrong signature information"
          }
        }
      }
    },
    "/api/v2/storageId" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get next storage ID",
        "description" : "Fetches the next order id for a given sold token. If the need arises to repeatedly place orders in a short span of time, the order id can be initially fetched through the API and then managed locally. Each new order id can be derived from adding 2 to the last one",
        "operationId" : "getNextStorageId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Looprings account identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "tokenSId",
          "in" : "query",
          "description" : "request.getNextStorageId.tokenSId",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetNextStorageIdResponseData"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/order" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get order details",
        "description" : "Get the details of an order based on order hash.",
        "operationId" : "getOrderDetail",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "Order hash",
          "required" : true,
          "type" : "string",
          "x-example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOrderDetailResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "107002" : {
            "description" : "Order Hash cannot be empty"
          },
          "107003" : {
            "description" : "Order does not exist"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.submitOrderV2.value",
        "description" : "api.submitOrderV2.notes",
        "operationId" : "submitOrderV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.submitOrderV2.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubmitOrderRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOrderResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102002" : {
            "description" : "Unsupported TokenId in the order"
          },
          "102003" : {
            "description" : "Invalid account ID"
          },
          "102004" : {
            "description" : "Invalid order ID"
          },
          "102005" : {
            "description" : "Market does not support"
          },
          "102006" : {
            "description" : "Illegal rate field"
          },
          "102007" : {
            "description" : "Order already exists"
          },
          "102008" : {
            "description" : "Order has expired"
          },
          "102010" : {
            "description" : "Order is missing signature information"
          },
          "102011" : {
            "description" : "Insufficient user balance"
          },
          "102012" : {
            "description" : "The order amount is too small"
          },
          "102014" : {
            "description" : "Failed to freeze the amount, please try again later"
          },
          "102020" : {
            "description" : "Exceeded the maximum order amount"
          },
          "102027" : {
            "description" : "code.102027"
          },
          "102120" : {
            "description" : "Order is not valid"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          },
          "104004" : {
            "description" : "No signature information provided"
          },
          "104005" : {
            "description" : "Wrong signature information"
          }
        }
      }
    },
    "/api/v2/batchOrders" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit multiple orders",
        "description" : "Submit up to 10 orders as a batch.",
        "operationId" : "batchSubmitOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Body of batch submit orders.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/BatchSubmitOrderRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchSubmitOrderResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "104209" : {
            "description" : "Partial batch operation failed"
          }
        }
      }
    },
    "/api/v2/orders/byHash" : {
      "delete" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Cancel multiple orders by hash",
        "description" : "Cancel up to 10 orders by order hash.",
        "operationId" : "batchCancelOrdersByOrderHash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "request.cancelOrders.accountId",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "Hash of order to be canceled,separate multiple hashes with commas.",
          "required" : true,
          "type" : "string",
          "x-example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859,13375450901292179417154974849571793069911517354720397125027633242680470075860"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchCancelOrderResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "104209" : {
            "description" : "Partial batch operation failed"
          }
        }
      }
    },
    "/api/v2/orders/byClientOrderId" : {
      "delete" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Cancel multiple orders by clientOrderId",
        "description" : "Cancel up to 10 orders by clientOrderId.",
        "operationId" : "batchCancelOrdersByClientOrderId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "request.cancelOrders.accountId",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "clientOrderId",
          "in" : "query",
          "description" : "ClientOrderIds of orders to be cancelled.",
          "required" : true,
          "type" : "string",
          "x-example" : "20200318000000001010,20200318000000001011"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BatchCancelOrderResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "104209" : {
            "description" : "Partial batch operation failed"
          }
        }
      }
    },
    "/api/v3/eth/sendTx" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Send a raw Ethereum transaction",
        "description" : "Relay a raw Ethereum transaction to Ethereum mainnet.",
        "operationId" : "sendTransaction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Body of send raw transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ForwardEthTxRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ForwardEthTxResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104202" : {
            "description" : "The current node service is not available"
          },
          "104205" : {
            "description" : "Error in internal request"
          },
          "104208" : {
            "description" : "Unknown error in Ethereum node"
          }
        }
      }
    },
    "/api/v2/dualAuthTransfer" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit dual authority transfer",
        "description" : "Submit dual authority transfer",
        "operationId" : "submitDualAuthTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Submit dual authority transfer post message body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DualAuthTransferRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v3/reward" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "submitReward",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/user/balances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user exchange balances",
        "description" : "Returns user's Ether and token balances on exchange.",
        "operationId" : "getUserBalances",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "AccountID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "tokens",
          "in" : "query",
          "description" : "Query tokens",
          "required" : false,
          "type" : "string",
          "x-example" : "0,1"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserBalancesResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/user/deposits" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user deposit history",
        "description" : "Returns a list of deposit records for the given user.",
        "operationId" : "getUserDeposits",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "ETH"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserDepositResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/user/withdrawals" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user onchain withdrawal history",
        "description" : "Get user onchain withdrawal history.",
        "operationId" : "getUserWithdrawals",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "withdrawalTypes",
          "in" : "query",
          "description" : "request.getUserTxs.withdrawalTypes",
          "required" : false,
          "type" : "string",
          "x-example" : "force_withdrawal",
          "enum" : [ "force_withdrawal", "offchain_withdrawal" ]
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserOnchainWithdrawalResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit offchain withdraw request",
        "description" : "Submit offchain withdraw request",
        "operationId" : "submitOffChainWithdrawal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Submit offchain withdraw request post message body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OffChainWithdrawalRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/user/transfers" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user transfer list",
        "description" : "Get user transfer list.",
        "operationId" : "getUserTransfers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "transferTypes",
          "in" : "query",
          "description" : "request.getUserTxs.transferTypes",
          "required" : false,
          "type" : "string",
          "x-example" : "transfer, transfer_red"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserTransferResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/user/createInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user registration transactions",
        "description" : "Returns a list Ethereum transactions from users for exchange account registration.",
        "operationId" : "getUserCreate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserCreateResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/user/updateInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get password reset transactions",
        "description" : "Returns a list Ethereum transactions from users for resetting exchange passwords.",
        "operationId" : "getUserUpdate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserAccountUpdateResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/user/trades" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user trade history",
        "description" : "Get user trade history.",
        "operationId" : "getUserTrades",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "If a value is provided, only returns the trades associated with the given order",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "fromId",
          "in" : "query",
          "description" : "Pagination of data to return records earlier than the requested ID",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "fillTypes",
          "in" : "query",
          "description" : "request.getUserTrades.fillTypes",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "dex",
          "enum" : [ "dex", "amm" ]
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserTradesResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/user/feeRates" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Query user place order fee rate",
        "description" : "Returns the fee rate of users placing orders in specific markets",
        "operationId" : "getUserFeeRates",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "markets",
          "in" : "query",
          "description" : "List of markets to be queried separated by \",\"",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-USDT,LRC-ETH"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserFeeRatesV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/user/orderFee" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Query user place order fee rate",
        "description" : "Returns the fee rate of users placing orders in specific markets",
        "operationId" : "getUserFeeRates2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "List of markets to be queried separated by \",\"",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "tokenB",
          "in" : "query",
          "description" : "Token ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "amountB",
          "in" : "query",
          "description" : "Amount to buy",
          "required" : true,
          "type" : "string",
          "x-example" : "10000000000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserFeeRates2Request"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/user/orderAmount" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getOrderAmount.value",
        "description" : "api.getOrderAmount.notes",
        "operationId" : "getOrderAmount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tokenSymbol",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOrderAmountResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/user/orderUserRateAmount" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getOrderAmount.value",
        "description" : "api.getOrderAmount.notes",
        "operationId" : "getOrderUserRateAmount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "market",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOrderGroupAmountResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/user/bills" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getUserBill",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "billType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "end",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        }, {
          "name" : "income",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : "None"
        }, {
          "name" : "transferAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/user/financeIncome" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getFinanceIncome",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "financeType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tokenAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/crawl" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "crawlSite",
        "parameters" : [ {
          "name" : "site",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/crawlPriceFromBinance" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "crawlPriceFromBinance",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/mix/markets" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market configurations",
        "description" : "Returns the configurations of all supported markets (trading pairs)",
        "operationId" : "getMixedMarkets",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetMixedMarketInfoResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/exchange/info" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get exchange configurations",
        "description" : "Return various configurations of Loopring.io",
        "operationId" : "getExchangeInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetExchangeInfoResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/exchange/feeInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get exchange configurations",
        "description" : "Return various configurations of Loopring.io",
        "operationId" : "getExchangeFeeInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetExchangeFeeInfoResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/exchange/withdrawalAgents" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getWithdrawalAgents.value",
        "description" : "api.getWithdrawalAgents.notes",
        "operationId" : "getWithdrawalAgents",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "amount",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetWithdrawalAgentsResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/refer" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "setReferrer",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/liquidityMining" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLiquidityMiningRewards",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "market",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/liquidityMiningTotal" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLiquidityMiningRewardTotal",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/liquidityMiningRank" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLiquidityMiningRank",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "top",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/liquidityMiningConf" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLiquidityMiningConf",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "running",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "pageIndex",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/activityRules" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getActivityRules",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/commissionReward" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getCommissionReward",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rewardType",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "taker",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/commissionRewardTotal" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getCommissionTotalReward",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/commissionRewardRank" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getCommissionRewardRank",
        "parameters" : [ {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "top",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rewardType",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/sidecar/profitShareReward" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getProfitSharingStatus",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "rewardType",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "taker",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/verifyAllEcdsa" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "verifyAllEcdsa",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/spi/tokenInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getTokenInfo.value",
        "description" : "api.getTokenInfo.notes",
        "operationId" : "getTokenInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tokenAddress",
          "in" : "query",
          "description" : "token address to be queried",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "ETH"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserBalancesResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/game/rank" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getTournamentRank",
        "parameters" : [ {
          "name" : "ammPoolMarket",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/game/user/rank" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getUserTournamentRank",
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ammPoolMarket",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/eth/recommendedGasPriceRange" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get recommended gas price",
        "description" : "Get recommended gas price in Gwei.",
        "operationId" : "getRecommendedGasPriceRange",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetRecommendedGasPriceResponseRangeV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "105001" : {
            "description" : "Failed to get recommended gas"
          }
        }
      }
    },
    "/api/v2/timestamp" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get relayer's current time",
        "description" : "Returns the relayer's current time in millisecond",
        "operationId" : "getTimestamp",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTimestampV2Response"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/luckyToken/agents" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getLuckyTokenAgents.value",
        "description" : "api.getLuckyTokenAgents.notes",
        "operationId" : "getLuckyTokenAgents",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetLuckyTokenAgentsResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/luckyToken/authorizedSigners" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getLuckyTokenSigners.value",
        "description" : "api.getLuckyTokenSigners.notes",
        "operationId" : "getLuckyTokenSigners",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetLuckyTokenAgentsResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/luckyToken/sendLuckyToken" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.sendLuckyToken.value",
        "description" : "api.sendLuckyToken.notes",
        "operationId" : "sendLuckyToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.sendLuckyToken.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendLuckyTokenRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/luckyToken/claimLuckyToken" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.claimLuckyToken.value",
        "description" : "api.claimLuckyToken.notes",
        "operationId" : "claimLuckyToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.claimLuckyToken.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClaimLuckyTokenRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetLuckyTokenClaimAmountResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/luckyToken/user/balances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getLuckyTokenBalance.value",
        "description" : "api.getLuckyTokenBalance.notes",
        "operationId" : "getLuckyTokenUserBalances",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "AccountID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "tokens",
          "in" : "query",
          "description" : "Query tokens",
          "required" : false,
          "type" : "string",
          "x-example" : "0,1"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserBalancesResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/luckyToken/user/withdrawals" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.withdrawLuckyToken.value",
        "description" : "api.withdrawLuckyToken.notes",
        "operationId" : "withdrawLuckyToken",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.withdrawLuckyToken.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WithdrawLuckyTokenRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/luckyToken/user/luckyTokens" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLuckyToken",
        "parameters" : [ {
          "name" : "senderId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "hash",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "partitions",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nodes",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "scopes",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "statuses",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "fromId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        }, {
          "name" : "official",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/luckyToken/user/claimedLuckyTokens" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getClaimLuckyToken",
        "parameters" : [ {
          "name" : "hashes",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/luckyToken/user/luckyTokenDetail" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getClaimLuckyTokenRecords",
        "parameters" : [ {
          "name" : "hash",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        }, {
          "name" : "showHelper",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/luckyToken/user/summary" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLuckyTokenSummary",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/luckyToken/user/withdraws" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getLuckyTokenWithdraw",
        "parameters" : [ {
          "name" : "statuses",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        }, {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "fromId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/luckyToken/user/claimHistory" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getClaimHistory",
        "parameters" : [ {
          "name" : "fromId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/v3/ws" : {
      "get" : {
        "tags" : [ "LightCone WebSocket API" ],
        "operationId" : "ws",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/WebSocket"
            }
          }
        }
      }
    },
    "/v2/ws/key" : {
      "get" : {
        "tags" : [ "LightCone WebSocket API" ],
        "operationId" : "getWsKey",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/v3/ws/key" : {
      "get" : {
        "tags" : [ "LightCone WebSocket API" ],
        "operationId" : "getWsKeyV3",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v2/amm/markets" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getAmmMarkets.value",
        "description" : "api.getAmmMarkets.notes",
        "operationId" : "getAmmMarkets",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmMarketInfoResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/amm/snapshot" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getAmmSnapshot.value",
        "description" : "api.getAmmSnapshot.notes",
        "operationId" : "getAmmSnapshot",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "poolAddress",
          "in" : "query",
          "description" : "request.getAmmSnapshot.address",
          "required" : true,
          "type" : "string",
          "x-example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmSnapshotResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/amm/snapshots" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getAmmSnapshots.value",
        "description" : "api.getAmmSnapshots.notes",
        "operationId" : "getAmmSnapshots",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmSnapshotResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/amm/depth" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market orderbook",
        "description" : "Returns the order book of a given trading pair.",
        "operationId" : "getAmmDepth",
        "parameters" : [ {
          "name" : "poolAddress",
          "in" : "query",
          "description" : "request.getAmmDepth.market",
          "required" : true,
          "type" : "string",
          "x-example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Order book aggregation level, larger value means further price aggregation.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 2
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum numbers of bids/asks.",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32",
          "x-example" : 50
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDepthResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "108000" : {
            "description" : "Unsupported market"
          },
          "108001" : {
            "description" : "Unsupported depth level"
          }
        }
      }
    },
    "/api/v2/amm/join" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Join into AMM pool",
        "description" : "Return the join request processing status",
        "operationId" : "submitAmmPoolJoin",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.AmmPoolJoinRequest.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AmmPoolJoinRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/amm/exit" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Exit an AMM pool",
        "description" : "Return the exit request processing status",
        "operationId" : "submitAmmPoolExit",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.submitAmmPoolExit.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AmmPoolExitRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v2/amm/transactions" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "get AMM involved join/exit transactions",
        "description" : "Return the AMM join/exit transactions",
        "operationId" : "getAmmTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "poolAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "billType",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "end",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "tokenId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        }, {
          "name" : "income",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : "None"
        }, {
          "name" : "transferAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmTransactionResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/amm/user/transactions" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "User's AMM join/exit transactions",
        "description" : "Return the user's AMM join/exit transactions",
        "operationId" : "getAmmUserTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64"
        }, {
          "name" : "end",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64"
        }, {
          "name" : "txTypes",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "None"
        }, {
          "name" : "txStatus",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "None"
        }, {
          "name" : "ammPoolAddress",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "None"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmTransactionResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/amm/trades" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "get AMM pool trade transactions",
        "description" : "get AMM pool trade transactions",
        "operationId" : "getAmmTrades",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ammPoolAddress",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmTradesResponseV2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v2/amm/poolsStats" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getPoolsStats.value",
        "description" : "api.getPoolsStats.notes",
        "operationId" : "getPoolsStats",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ammPoolMarkets",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "None"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmPoolsStatsResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v2/amm/user/rewards" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getPoolsStats.value",
        "description" : "api.getPoolsStats.notes",
        "operationId" : "getUserRewards",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "ammPoolMarkets",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "None"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmPoolsStatsResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/exchange/tokens" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get token configurations",
        "description" : "Returns the configurations of all supported tokens, including Ether.",
        "operationId" : "getTokens",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TokenInfoV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/transfer" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit internal transfer",
        "description" : "Submit internal transfer",
        "operationId" : "submitTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Submit internal transfer post message body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OriginTransferRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v3/account" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Query user information",
        "description" : "Returns data associated with the user's exchange account.",
        "operationId" : "getAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "owner",
          "in" : "query",
          "description" : "Ethereum address",
          "required" : true,
          "type" : "string",
          "x-example" : "0x123456"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DexAccountV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "101001" : {
            "description" : "The address was not found"
          },
          "101002" : {
            "description" : "User not found"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Update account EDDSA key",
        "description" : "Updates the EDDSA key associated with the specified account, making the previous one invalid in the process.",
        "operationId" : "submitUpdateAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.submitUpdateAccount.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateAccountRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v3/user/offchainFee" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getBusinessFee2.value",
        "description" : "api.getBusinessFee2.notes",
        "operationId" : "getBusinessFee2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "request.getBusinessFee2.accountId",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "requestType",
          "in" : "query",
          "description" : "request.getBusinessFee2.requestType",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1,
          "enum" : [ "0:ORDER", "1:OFFCHAIN_WITHDRAWAL", "2:UPDATE_ACCOUNT", "3:TRANSFER", "4:FAST_OFFCHAIN_WITHDRAWAL", "5:OPEN_ACCOUNT", "6:AMM_EXIT", "7:DEPOSIT", "8:AMM_JOIN" ]
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "request.getBusinessFee2.tokenSymbol",
          "required" : false,
          "type" : "string",
          "x-example" : "LRC"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "request.getBusinessFee2.amount",
          "required" : false,
          "type" : "string",
          "x-example" : "10000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OffFeeInfo2"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/exchange/markets" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market configurations",
        "description" : "Returns the configurations of all supported markets (trading pairs)",
        "operationId" : "getMarkets",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetMarketsResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/amm/pools" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get AMM pool configurations",
        "description" : "Returns the configurations of all supported AMM pools",
        "operationId" : "getAmmPools",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAmmPoolsResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/orders" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get multiple orders",
        "description" : "Get a list of orders satisfying certain criteria.",
        "operationId" : "getOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Lower bound of order's creation timestamp in millisecond",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1567053142000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "Upper bound of order's creation timestamp in millisecond",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1567053242000
        }, {
          "name" : "side",
          "in" : "query",
          "description" : "\"BUY\" or \"SELL\"",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "BUY",
          "enum" : [ "BUY", "SELL" ]
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Order status. You can specify one of the following values:",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "failed", "cancelled", "cancelling", "expired" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of orders (default 50)",
          "required" : false,
          "type" : "integer",
          "default" : "None ",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset of orders (default 0)",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 0
        }, {
          "name" : "orderTypes",
          "in" : "query",
          "description" : "request.getOrders.orderTypes",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LIMIT_ORDER",
          "enum" : [ "LIMIT_ORDER", "MAKER_ONLY", "TAKER_ONLY", "AMM" ]
        }, {
          "name" : "tradeChannels",
          "in" : "query",
          "description" : "field.SubmitOrderRequest.tradeChannel",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "ORDER_BOOK,AMM_POOL",
          "enum" : [ "ORDER_BOOK:0", "AMM_POOL:1", "MIXED:2" ]
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrdersDetailV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/depth" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market orderbook",
        "description" : "Returns the order book of a given trading pair.",
        "operationId" : "getDepth",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "The ID of a trading pair.",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Order book aggregation level, larger value means further price aggregation.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 2
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum numbers of bids/asks.",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32",
          "x-example" : 50
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DepthV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "108000" : {
            "description" : "Unsupported market"
          },
          "108001" : {
            "description" : "Unsupported depth level"
          }
        }
      }
    },
    "/api/v3/mix/depth" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market orderbook",
        "description" : "Returns the order book of a given trading pair.",
        "operationId" : "getMixedDepth",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "The ID of a trading pair.",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Order book aggregation level, larger value means further price aggregation.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 2
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum numbers of bids/asks.",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "showOverlap",
          "in" : "query",
          "description" : "request.getDepth.showOverlap",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "x-example" : false
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DepthV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "108000" : {
            "description" : "Unsupported market"
          },
          "108001" : {
            "description" : "Unsupported depth level"
          }
        }
      }
    },
    "/api/v3/ticker" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market ticker",
        "description" : "Gets a markets ticker. Generally speaking, a ticker in Loopring consists in data from the market taken last 24Hours.",
        "operationId" : "getTicker",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Market pair, support multiple markets",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH,LRC-USDT"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTickerResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v3/mix/ticker" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market ticker",
        "description" : "Gets a markets ticker. Generally speaking, a ticker in Loopring consists in data from the market taken last 24Hours.",
        "operationId" : "getMixedTicker",
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Market pair, support multiple markets",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH,LRC-USDT"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetTickerResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v3/price" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get token fiat prices",
        "description" : "Fetches, for all the tokens supported by Loopring, their fiat price.",
        "operationId" : "getPrice",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "legal",
          "in" : "query",
          "description" : "The fiat currency to uses. Currently the following values are supported: USD,CNY,JPY,EUR,GBP,HKD",
          "required" : true,
          "type" : "string",
          "x-example" : "USD"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetPriceResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/trade" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market recent trades",
        "description" : "Query trades with specified market",
        "operationId" : "getMarketTrade",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Single market to query",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-USDT"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of queries",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 20
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MarketTradesV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/candlestick" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market candlestick",
        "description" : "Return the candlestick data of a given trading pair.",
        "operationId" : "getCandlestick",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair ID, multi-market is not supported",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "interval",
          "in" : "query",
          "description" : "Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w",
          "required" : true,
          "type" : "string",
          "x-example" : "5min"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584479105000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584565505000
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of data points. If more data points are available, the API will only return the first 'limit' data points.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 120
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetCandlestickResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v3/mix/candlestick" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market candlestick",
        "description" : "Return the candlestick data of a given trading pair.",
        "operationId" : "getMixedCandlestick",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair ID, multi-market is not supported",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "interval",
          "in" : "query",
          "description" : "Candlestick interval, Supported values are: 1min, 5min, 15min, 30min, 1hr, 2hr, 4hr, 12hr, 1d, 1w",
          "required" : true,
          "type" : "string",
          "x-example" : "5min"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584479105000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1584565505000
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of data points. If more data points are available, the API will only return the first 'limit' data points.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 120
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetCandlestickResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          }
        }
      }
    },
    "/api/v3/apiKey" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user ApiKey",
        "description" : "Get the ApiKey associated with the user's account.",
        "operationId" : "getApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "AccountID",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 10
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetApiKeyResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "101002" : {
            "description" : "User not found"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          },
          "104004" : {
            "description" : "No signature information provided"
          },
          "104005" : {
            "description" : "Wrong signature information"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Update user's ApiKey",
        "description" : "Change the ApiKey associated with the user's account. The current ApiKey must be provided as the value of the X-API-KEY HTTP header.",
        "operationId" : "applyApiKey",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "api.applyApiKey.implicit.value",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GetApiKeyRequest"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetApiKeyResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "101002" : {
            "description" : "User not found"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          },
          "104004" : {
            "description" : "No signature information provided"
          },
          "104005" : {
            "description" : "Wrong signature information"
          }
        }
      }
    },
    "/api/v3/storageId" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get next storage ID",
        "description" : "Fetches the next order id for a given sold token. If the need arises to repeatedly place orders in a short span of time, the order id can be initially fetched through the API and then managed locally. Each new order id can be derived from adding 2 to the last one",
        "operationId" : "getNextStorageId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Looprings account identifier",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "sellTokenId",
          "in" : "query",
          "description" : "The unique identifier of the token which the user wants to sell in the next order.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NextStorageIdResponse"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/order" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get order details",
        "description" : "Get the details of an order based on order hash.",
        "operationId" : "getOrderDetail",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "Order hash",
          "required" : true,
          "type" : "string",
          "x-example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OrderDetailV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "107002" : {
            "description" : "Order Hash cannot be empty"
          },
          "107003" : {
            "description" : "Order does not exist"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit an order",
        "description" : "Submit an order",
        "operationId" : "submitOrderV3",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Submit order message body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubmitOrderRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOrderResponseItemV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102002" : {
            "description" : "Unsupported TokenId in the order"
          },
          "102003" : {
            "description" : "Invalid account ID"
          },
          "102004" : {
            "description" : "Invalid order ID"
          },
          "102005" : {
            "description" : "Market does not support"
          },
          "102006" : {
            "description" : "Illegal rate field"
          },
          "102007" : {
            "description" : "Order already exists"
          },
          "102008" : {
            "description" : "Order has expired"
          },
          "102010" : {
            "description" : "Order is missing signature information"
          },
          "102011" : {
            "description" : "Insufficient user balance"
          },
          "102012" : {
            "description" : "The order amount is too small"
          },
          "102014" : {
            "description" : "Failed to freeze the amount, please try again later"
          },
          "102020" : {
            "description" : "Exceeded the maximum order amount"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102027" : {
            "description" : "code.102027"
          },
          "102120" : {
            "description" : "Order is not valid"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          },
          "104004" : {
            "description" : "No signature information provided"
          },
          "104005" : {
            "description" : "Wrong signature information"
          }
        }
      },
      "delete" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Cancel order",
        "description" : "Cancel order using order hash or client-side ID.",
        "operationId" : "cancelOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "Order HASH",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859"
        }, {
          "name" : "clientOrderId",
          "in" : "query",
          "description" : "The unique order ID of the client",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "20200318000000001010"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOrderResponseItemV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "102117" : {
            "description" : "No orders to cancel"
          },
          "102118" : {
            "description" : "Failed to cancel orders, please try again later"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/balances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user exchange balances",
        "description" : "Returns user's Ether and token balances on exchange.",
        "operationId" : "getUserBalances",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "AccountID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "tokens",
          "in" : "query",
          "description" : "Query tokens",
          "required" : false,
          "type" : "string",
          "x-example" : "0,1"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BalanceV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/deposits" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user deposit history",
        "description" : "Returns a list of deposit records for the given user.",
        "operationId" : "getUserDeposits",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "ETH"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DepositDataList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/withdrawals" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user onchain withdrawal history",
        "description" : "Get user onchain withdrawal history.",
        "operationId" : "getUserWithdrawals",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "withdrawalTypes",
          "in" : "query",
          "description" : "request.getUserTxs.withdrawalTypes",
          "required" : false,
          "type" : "string",
          "x-example" : "force_withdrawal",
          "enum" : [ "force_withdrawal", "offchain_withdrawal" ]
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OnchainWithdrawalDataList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      },
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Submit offchain withdraw request",
        "description" : "Submit offchain withdraw request",
        "operationId" : "submitOffChainWithdrawal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Submit offchain withdraw request post message body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OffChainWithdrawalRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v3/user/transfers" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user transfer list",
        "description" : "Get user transfer list.",
        "operationId" : "getUserTransfers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "Token to filter. If you want to return deposit records for all tokens, omit this parameter",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "transferTypes",
          "in" : "query",
          "description" : "request.getUserTxs.transferTypes",
          "required" : false,
          "type" : "string",
          "x-example" : "transfer, transfer_red"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TransferDataList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/createInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user registration transactions",
        "description" : "Returns a list Ethereum transactions from users for exchange account registration.",
        "operationId" : "getUserCreate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserCreateDataList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/updateInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get password reset transactions",
        "description" : "Returns a list Ethereum transactions from users for resetting exchange passwords.",
        "operationId" : "getUserUpdate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Start time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End time in milliseconds",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Comma separated status values",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "processing,processed",
          "enum" : [ "processing", "processed", "received", "failed" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserAccountUpdateDataList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/trades" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get user trade history",
        "description" : "Get user trade history.",
        "operationId" : "getUserTrades",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "orderHash",
          "in" : "query",
          "description" : "Order hash",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Number of records to skip",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of records to return",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "fromId",
          "in" : "query",
          "description" : "The begin id of the query.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1
        }, {
          "name" : "fillTypes",
          "in" : "query",
          "description" : "request.getUserTxs.fillTypes",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "dex",
          "enum" : [ "dex", "amm" ]
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TradeList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/user/feeRates" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Query user place order fee rate",
        "description" : "Returns the fee rate of users placing orders in specific markets",
        "operationId" : "getUserFeeRates",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "markets",
          "in" : "query",
          "description" : "List of markets to be queried separated by \",\"",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-USDT,LRC-ETH"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FeeRate"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/user/orderFee" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Query user place order fee rate",
        "description" : "Returns the fee rate of users placing orders in specific markets",
        "operationId" : "getUserFeeRates2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 1
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "List of markets to be queried separated by \",\"",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        }, {
          "name" : "tokenB",
          "in" : "query",
          "description" : "Token ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "amountB",
          "in" : "query",
          "description" : "Amount to buy",
          "required" : true,
          "type" : "string",
          "x-example" : "10000000000000000"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserFeeRatesResponseData"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/user/orderAmount" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getOrderAmount.value",
        "description" : "api.getOrderAmount.notes",
        "operationId" : "getOrderAmount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tokenSymbol",
          "in" : "query",
          "description" : "request.getOrderAmount.tokenSymbol",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOrderAmountResponseData"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/user/orderUserRateAmount" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getOrderUserRateAmount.value",
        "description" : "api.getOrderUserRateAmount.notes",
        "operationId" : "getOrderUserRateAmount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Account ID",
          "required" : true,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 10086
        }, {
          "name" : "market",
          "in" : "query",
          "description" : "Trading pair",
          "required" : true,
          "type" : "string",
          "x-example" : "LRC-ETH"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetOrderGroupAmountData"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/mix/markets" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market configurations",
        "description" : "Returns the configurations of all supported markets (trading pairs)",
        "operationId" : "getMixedMarkets",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetMixedMarketsResponseV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/exchange/info" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get exchange configurations",
        "description" : "Return various configurations of Loopring.io",
        "operationId" : "getExchangeInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ExchangeInfo"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/exchange/feeInfo" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get exchange configurations",
        "description" : "Return various configurations of Loopring.io",
        "operationId" : "getExchangeFeeInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetExchangeFeeInfoResponseData"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/amm/depth" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get market orderbook",
        "description" : "Returns the order book of a given trading pair.",
        "operationId" : "getAmmDepth",
        "parameters" : [ {
          "name" : "poolAddress",
          "in" : "query",
          "description" : "request.getAmmDepth.market",
          "required" : true,
          "type" : "string",
          "x-example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
        }, {
          "name" : "level",
          "in" : "query",
          "description" : "Order book aggregation level, larger value means further price aggregation.",
          "required" : true,
          "type" : "integer",
          "format" : "int32",
          "x-example" : 2
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum numbers of bids/asks.",
          "required" : false,
          "type" : "integer",
          "default" : 50,
          "format" : "int32",
          "x-example" : 50
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DepthV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "108000" : {
            "description" : "Unsupported market"
          },
          "108001" : {
            "description" : "Unsupported depth level"
          }
        }
      }
    },
    "/api/v3/amm/join" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Join into AMM pool",
        "description" : "Return the join request processing status",
        "operationId" : "submitAmmPoolJoin",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "AMM join request params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AmmPoolJoinRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v3/amm/exit" : {
      "post" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Exit an AMM pool",
        "description" : "Return the exit request processing status",
        "operationId" : "submitAmmPoolExit",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "AMM exit request params",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AmmPoolExitRequestV3"
          }
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SubmitOffChainRequestItem"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "100001" : {
            "description" : "Invalid argument"
          },
          "102001" : {
            "description" : "Exchange ID is incorrect"
          },
          "102021" : {
            "description" : "Nonce is invalid"
          },
          "102022" : {
            "description" : "Transfer sender is invalid"
          },
          "102023" : {
            "description" : "Transfer receiver is invalid"
          },
          "102024" : {
            "description" : "Fee token is unsupported"
          },
          "102025" : {
            "description" : "Transfer token isnt consistent with fee token"
          }
        }
      }
    },
    "/api/v3/amm/transactions" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "get AMM involved join/exit transactions",
        "description" : "Return the AMM join/exit transactions",
        "operationId" : "getAmmTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "poolAddress",
          "in" : "query",
          "description" : "The address of the pool on which the swap was submitted.",
          "required" : true,
          "type" : "string",
          "x-example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
        }, {
          "name" : "billType",
          "in" : "query",
          "description" : "The bill type of the amm transaction",
          "required" : true,
          "type" : "string",
          "x-example" : "order",
          "enum" : [ "order", "transfer", "offchain_withdrawal" ]
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Date from which to start fetching AMM transactions.",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End Date of the query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Used to limit the number of returned records. Useful in implementing pagination.",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used to apply an offset when looking for valid records. Useful in implementing",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "tokenId",
          "in" : "query",
          "description" : "A unique token identifier",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32",
          "x-example" : 0
        }, {
          "name" : "income",
          "in" : "query",
          "description" : "transfer in or out",
          "required" : false,
          "type" : "boolean",
          "default" : "None",
          "x-example" : true
        }, {
          "name" : "transferAddress",
          "in" : "query",
          "description" : "transfer to address",
          "required" : false,
          "type" : "string",
          "x-example" : "true"
        }, {
          "name" : "fromAddress",
          "in" : "query",
          "description" : "transfer from address",
          "required" : false,
          "type" : "string",
          "x-example" : "true"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserBillList"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/amm/user/transactions" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "User's AMM join/exit transactions",
        "description" : "Return the user's AMM join/exit transactions",
        "operationId" : "getAmmUserTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountId",
          "in" : "query",
          "description" : "Looprings account identifier.",
          "required" : false,
          "type" : "integer",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "Date from which to start fetching AMM transactions.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "End Date of the query",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 1578558098000
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Used to limit the number of returned records. Useful in implementing pagination.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used to apply an offset when looking for valid records. Useful in implementing",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 0
        }, {
          "name" : "txTypes",
          "in" : "query",
          "description" : "Transaction type: join or exit",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "0"
        }, {
          "name" : "txStatus",
          "in" : "query",
          "description" : "The AMM transaction status.",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "0"
        }, {
          "name" : "ammPoolAddress",
          "in" : "query",
          "description" : "The address of the pool on which the swap was submitted.",
          "required" : false,
          "type" : "string",
          "default" : "None",
          "x-example" : "0"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AmmTransactionDataListV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/amm/trades" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "get AMM pool trade transactions",
        "description" : "get AMM pool trade transactions",
        "operationId" : "getAmmTrades",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ammPoolAddress",
          "in" : "query",
          "description" : "The address of the pool on which the swap was submitted.",
          "required" : true,
          "type" : "string",
          "x-example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Used to limit the number of returned records. Useful in implementing pagination.",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int32",
          "x-example" : 50
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used to apply an offset when looking for valid records. Useful in implementing",
          "required" : false,
          "type" : "integer",
          "default" : "None",
          "format" : "int64",
          "x-example" : 0
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AmmTradeDataListV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          },
          "107001" : {
            "description" : "User ID cannot be empty"
          },
          "104001" : {
            "description" : "Empty ApiKey"
          },
          "104002" : {
            "description" : "Invalid ApiKey"
          },
          "104003" : {
            "description" : "Invalid Account ID"
          }
        }
      }
    },
    "/api/v3/poolsStats" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getPoolsStats.value",
        "description" : "api.getPoolsStats.notes",
        "operationId" : "getPoolsStats",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ammPoolMarkets",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "None"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AmmPoolStatistics"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/user/daoSquareAccounts" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "operationId" : "getDaoSquareAccounts",
        "parameters" : [ {
          "name" : "startTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : "0L",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : { },
            "schema" : {
              "$ref" : "#/definitions/ActionAnyContent"
            }
          }
        }
      }
    },
    "/api/v3/amm/balance" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get AMM pool balance snapshot",
        "description" : "Returns the snapshot of specific AMM pool",
        "operationId" : "getAmmPoolBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "poolAddress",
          "in" : "query",
          "description" : "input AMM pool address",
          "required" : true,
          "type" : "string",
          "x-example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd"
        } ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AmmPoolBalanceV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/amm/balances" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "api.getAmmPoolsBalances.value",
        "description" : "api.getAmmPoolsBalances.notes",
        "operationId" : "getAmmPoolsBalances",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AmmPoolBalanceV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    },
    "/api/v3/timestamp" : {
      "get" : {
        "tags" : [ "Loopring DEX Restful API" ],
        "summary" : "Get relayer's current time",
        "description" : "Returns the relayer's current time in millisecond",
        "operationId" : "getTimestamp",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "0" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TimestampV3"
            }
          },
          "100000" : {
            "description" : "Unknown error"
          }
        }
      }
    }
  },
  "definitions" : {
    "GetTokenInfoResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "Token list",
          "items" : {
            "$ref" : "#/definitions/TokenInfo"
          }
        }
      },
      "description" : "Tokens information supported by the exchange"
    },
    "ResultInfo" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The returned code"
        },
        "message" : {
          "type" : "string",
          "example" : "SUCCESS",
          "description" : "The returned message"
        }
      },
      "description" : "Information returned by the API"
    },
    "TokenInfo" : {
      "type" : "object",
      "required" : [ "address", "decimals", "depositGas", "distributionGas", "dustOrderAmount", "enabled", "fastWithdrawLimit", "maxLuckyTokenAmount", "maxOrderAmount", "minLuckyTokenAmount", "minOrderAmount", "name", "precision", "precisionForOrder", "symbol", "tokenId", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "ERC20",
          "description" : "field.tokenInfo.type",
          "enum" : [ "ERC20", "ETH" ]
        },
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "field.tokenInfo.tokenId"
        },
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "field.tokenInfo.symbol"
        },
        "name" : {
          "type" : "string",
          "example" : "Loopring",
          "description" : "field.tokenInfo.name"
        },
        "address" : {
          "type" : "string",
          "example" : "0x97241525fe425C90eBe5A41127816dcFA5954b06",
          "description" : "field.tokenInfo.address"
        },
        "decimals" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 18,
          "description" : "field.tokenInfo.decimals"
        },
        "precision" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "field.tokenInfo.precision"
        },
        "precisionForOrder" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "field.tokenInfo.precision"
        },
        "minOrderAmount" : {
          "type" : "string",
          "example" : "10000000000000000",
          "description" : "field.tokenInfo.minOrderAmount"
        },
        "maxOrderAmount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.tokenInfo.maxOrderAmount"
        },
        "dustOrderAmount" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "field.tokenInfo.dustOrderAmount"
        },
        "maxLuckyTokenAmount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.tokenInfo.maxLuckyTokenAmount"
        },
        "minLuckyTokenAmount" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "field.tokenInfo.minLuckyTokenAmount"
        },
        "fastWithdrawLimit" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "field.tokenInfo.fastWithdrawLimit"
        },
        "distributionGas" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "field.tokenInfo.distributionGas"
        },
        "depositGas" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "field.tokenInfo.depositGas"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "field.tokenInfo.enabled"
        }
      },
      "description" : "field.tokenInfo.description"
    },
    "SubmitOffChainRequestItem" : {
      "type" : "object",
      "required" : [ "hash", "isIdempotent", "status" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "0x1d923ca7834dc90484fa2eb611f0f0bc7e741bb107007ebea19ba8caeab4f9d3",
          "description" : "The order hash identifier set by the user at the time of submission"
        },
        "status" : {
          "type" : "string",
          "example" : "received",
          "description" : "Whether the order was successfully submitted or not, please note, user may query after a while to get real process status, as most offchain requests are async processed",
          "enum" : [ "received", "processing", "processed", "failed" ]
        },
        "isIdempotent" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true",
          "enum" : [ true, false ]
        }
      },
      "description" : "Response detail of submitted off chain requests"
    },
    "SubmitOffChainRequestResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "field.submitOffChainRequest.data",
          "$ref" : "#/definitions/SubmitOffChainRequestItem"
        }
      },
      "description" : "model.submitOffChainRequest.response"
    },
    "OriginTransferRequest" : {
      "type" : "object",
      "required" : [ "amount", "exchange", "feeToken", "maxFeeAmount", "payeeAddr", "payeeId", "payerAddr", "payerId", "storageId", "token", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "field.SubmitOriginTransferRequest.exchange"
        },
        "payerId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SubmitOriginTransferRequest.payerId"
        },
        "payerAddr" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.SubmitOriginTransferRequest.payerAddr"
        },
        "payeeId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SubmitOriginTransferRequest.payeeId"
        },
        "payeeAddr" : {
          "type" : "string",
          "example" : "0xCDEF",
          "description" : "field.SubmitOriginTransferRequest.payeeAddr"
        },
        "token" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.SubmitOriginTransferRequest.token"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.SubmitOriginTransferRequest.amount"
        },
        "feeToken" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.SubmitOriginTransferRequest.feeToken"
        },
        "maxFeeAmount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.SubmitOriginTransferRequest.maxFeeAmount"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SubmitOriginTransferRequest.storageId"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "field.SubmitOriginTransferRequest.validUntil"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "0xX..{64}..XY..{64}..YZ..{64}..Z",
          "description" : "field.SubmitOriginTransferRequest.eddsaSig"
        },
        "ecdsaSig" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "field.SubmitOriginTransferRequest.ecdsaSig"
        },
        "memo" : {
          "type" : "string",
          "example" : "Air Drop",
          "description" : "field.SubmitOriginTransferRequest.memo"
        },
        "clientId" : {
          "type" : "string",
          "example" : "hebao1234567",
          "description" : "field.SubmitOriginTransferRequest.clientId"
        }
      },
      "description" : "model.SubmitOriginTransferRequest.description"
    },
    "UpdateAccountRequest" : {
      "type" : "object",
      "required" : [ "accountId", "exchange", "feeToken", "maxFeeAmount", "nonce", "owner", "publicKeyX", "publicKeyY", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "field.UpdateAccountRequest.exchange"
        },
        "owner" : {
          "type" : "string",
          "example" : "0xB4A70168340C75119523019f79F5Ffd9c60DceC7",
          "description" : "field.UpdateAccountRequest.owner"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.UpdateAccountRequest.accountId"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1583183141,
          "description" : "field.UpdateAccountRequest.validUntil"
        },
        "nonce" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.UpdateAccountRequest.nonce"
        },
        "publicKeyX" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.UpdateAccountRequest.publicKeyX"
        },
        "publicKeyY" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.UpdateAccountRequest.publicKeyY"
        },
        "feeToken" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.UpdateAccountRequest.feeTokenId"
        },
        "maxFeeAmount" : {
          "type" : "string",
          "example" : "1234",
          "description" : "field.UpdateAccountRequest.maxFee"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "0xX..{64}..XY..{64}..YZ..{64}..Z",
          "description" : "field.UpdateAccountRequest.eddsaSig"
        },
        "ecdsaSig" : {
          "type" : "string",
          "example" : "0x41853ea3..{130}..e6b32982bfc61c",
          "description" : "field.UpdateAccountRequest.ecdsaSig"
        }
      },
      "description" : "model.UpdateAccountRequest.description"
    },
    "GetOffchainFee2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "The results returned by query user fee rates",
          "$ref" : "#/definitions/GetOffchainFee2ResponseData"
        }
      },
      "description" : "The results returned by query user fee rates"
    },
    "GetOffchainFee2ResponseData" : {
      "type" : "object",
      "required" : [ "fees", "gasPrice" ],
      "properties" : {
        "gasPrice" : {
          "type" : "string"
        },
        "fees" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo2"
          }
        }
      },
      "description" : "The results returned by query place order amount"
    },
    "OffFeeInfo2" : {
      "type" : "object",
      "required" : [ "discount", "fee", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "ETH",
          "description" : "fee token"
        },
        "fee" : {
          "type" : "string",
          "example" : "2000000000000000",
          "description" : "fee amount"
        },
        "discount" : {
          "type" : "number",
          "format" : "double",
          "example" : 1.0,
          "description" : "token discount"
        }
      },
      "description" : "Off-chain fee info charged by loopring exchange."
    },
    "GetMarketInfoResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "field.getMarketInfoResponse.data",
          "items" : {
            "$ref" : "#/definitions/MarketInfo"
          }
        }
      },
      "description" : "model.getMarketInfoResponse"
    },
    "MarketInfo" : {
      "type" : "object",
      "required" : [ "baseTokenId", "enabled", "market", "orderbookAggLevels", "precisionForPrice", "quoteTokenId" ],
      "properties" : {
        "market" : {
          "type" : "string",
          "example" : "LRC-USDT",
          "description" : "Trading pair ID"
        },
        "baseTokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "The base token ID"
        },
        "quoteTokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The quote token ID"
        },
        "precisionForPrice" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "The precision of price"
        },
        "orderbookAggLevels" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 4,
          "description" : "The max level of orderbook price aggregation"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "True if trading is enabled for this trading pair"
        }
      }
    },
    "GetOrdersResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "Response orders",
          "$ref" : "#/definitions/OrdersDetail"
        }
      },
      "description" : "Response body"
    },
    "OrderDetail" : {
      "type" : "object",
      "required" : [ "clientOrderId", "createdAt", "filledFee", "filledSize", "filledVolume", "hash", "market", "orderType", "price", "side", "size", "status", "tradeChannel", "validUntil", "volume" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf",
          "description" : "Order hash"
        },
        "clientOrderId" : {
          "type" : "string",
          "example" : "200310143135081332",
          "description" : "Order's client-side ID"
        },
        "size" : {
          "type" : "string",
          "example" : "8210000000000001024",
          "description" : "field.OrderDetail.size"
        },
        "volume" : {
          "type" : "string",
          "example" : "163182534700000032",
          "description" : "field.OrderDetail.volume"
        },
        "price" : {
          "type" : "string",
          "example" : "0.01987608",
          "description" : "Order price"
        },
        "filledSize" : {
          "type" : "string",
          "example" : "0",
          "description" : "field.OrderDetail.filledSize"
        },
        "filledVolume" : {
          "type" : "string",
          "example" : "0",
          "description" : "field.OrderDetail.filledVolume"
        },
        "filledFee" : {
          "type" : "string",
          "example" : "0",
          "description" : "field.OrderDetail.filledFee"
        },
        "status" : {
          "type" : "string",
          "example" : "processing",
          "description" : "Order status",
          "enum" : [ "processing", "processed", "cancelling", "cancelled", "expired", "waiting" ]
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1586521591,
          "description" : "field.OrderDetail.validUntil"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1583933191494,
          "description" : "field.OrderDetail.createdAt"
        },
        "side" : {
          "type" : "string",
          "example" : "SELL",
          "description" : "Order's side",
          "enum" : [ "SELL", "BUY" ]
        },
        "market" : {
          "type" : "string",
          "example" : "LRC-ETH",
          "description" : "Trading pair"
        },
        "orderType" : {
          "type" : "string",
          "example" : "LIMIT_ORDER",
          "description" : "Whether the order has to be treated as a limit, maker, or taker operation.",
          "enum" : [ "LIMIT_ORDER", "TAKER_ONLY", "MAKER_ONLY" ]
        },
        "tradeChannel" : {
          "type" : "string",
          "example" : "ORDER_BOOK",
          "description" : "field.SubmitOrderRequest.tradeChannel",
          "enum" : [ "ORDER_BOOK:0", "AMM_POOL:1", "MIXED:2" ]
        }
      },
      "description" : "Response details of order"
    },
    "OrdersDetail" : {
      "type" : "object",
      "required" : [ "totalNum" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10,
          "description" : "Total number of orders"
        },
        "orders" : {
          "type" : "array",
          "description" : "List of order",
          "items" : {
            "$ref" : "#/definitions/OrderDetail"
          }
        }
      },
      "description" : "Response orders"
    },
    "Depth" : {
      "type" : "object",
      "required" : [ "asks", "bids", "market", "timestamp", "version" ],
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 147,
          "description" : "An ever-increasing numeric version number that reflects its change history."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 432312312,
          "description" : "Update timestamp"
        },
        "market" : {
          "type" : "string",
          "example" : "LRC-ETH",
          "description" : "field.trade.market"
        },
        "bids" : {
          "type" : "array",
          "example" : "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]",
          "description" : "Array of bids, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "asks" : {
          "type" : "array",
          "example" : "[]",
          "description" : "Array of asks, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Order book info"
    },
    "GetDepthResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "Order book detail.",
          "$ref" : "#/definitions/Depth"
        }
      },
      "description" : "response of querying order book"
    },
    "GetTickerResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "The returned message",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "example" : "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\"]]",
          "description" : "Each item in the list is an array that contains the following: trading pair ID, update timestamp, base token volume, quote token volume, open-price, highest price, lowest price, closing price, number of trades, highest bid price, lowest ask price, base fee amount, quote fee amount. All values are returned as strings. Fee amount is for AMM only.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "model.getTicker.description"
    },
    "GetPriceV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "field.getPriceResponse.data",
          "items" : {
            "$ref" : "#/definitions/Price"
          }
        }
      },
      "description" : "model.getPriceResponse"
    },
    "Price" : {
      "type" : "object",
      "required" : [ "price", "symbol", "timestamp" ],
      "properties" : {
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "Token symbol"
        },
        "price" : {
          "type" : "string",
          "example" : "0",
          "description" : "Fiat price"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Last update timestamp"
        }
      },
      "description" : "Token fiat price"
    },
    "GetMarketTradesV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "model.marketTrades",
          "$ref" : "#/definitions/MarketTrades"
        }
      },
      "description" : "Query market trades returns"
    },
    "MarketTrades" : {
      "type" : "object",
      "required" : [ "totalNum", "trades" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "field.marketTrades.totalNum"
        },
        "trades" : {
          "type" : "array",
          "example" : "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]",
          "description" : "field.marketTrades.trades",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "model.marketTrades"
    },
    "GetCandlestickResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "example" : "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]",
          "description" : "Candlestick data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "The response of query Candlestick data"
    },
    "GetEthNonceV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The result of nonce"
        }
      },
      "description" : "Query the result returned by Ethereum address nonce"
    },
    "GetEthBalancesV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "Balance in wei"
        }
      },
      "description" : "The query result of Ethereum address ETH balance"
    },
    "GetTokenBalancesV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "example" : "['1000000000000000000']",
          "description" : "Balance in wei",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "The query result of Ethereum address token balances"
    },
    "GetAllowancesV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "example" : "['0']",
          "description" : "Allowance amount in wei",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Query the allowance return of the Ethereum address on the exchange"
    },
    "GetRecommendedGasPriceResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "string",
          "example" : "10000000000",
          "description" : "Response value of current recommended gas price in Gwei"
        }
      },
      "description" : "Response body"
    },
    "DexAccount" : {
      "type" : "object",
      "required" : [ "accountId", "accountNonce", "frozen", "keyNonce", "owner", "publicKeyX", "publicKeyY" ],
      "properties" : {
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10,
          "description" : "field.dexAccount.accountId"
        },
        "owner" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.dexAccount.owner"
        },
        "frozen" : {
          "type" : "boolean",
          "example" : false,
          "description" : "field.dexAccount.isFreeze"
        },
        "publicKeyX" : {
          "type" : "string",
          "example" : "123",
          "description" : "field.dexAccount.publicKeyX"
        },
        "publicKeyY" : {
          "type" : "string",
          "example" : "456",
          "description" : "field.dexAccount.publicKeyY"
        },
        "tags" : {
          "type" : "string",
          "example" : "vip_1",
          "description" : "field.dexAccount.tags"
        },
        "keyNonce" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "field.dexAccount.keyNonce"
        },
        "accountNonce" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "field.dexAccount.accountNonce"
        }
      },
      "description" : "DexAccount data"
    },
    "GetAccountResponseV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "example" : "0",
          "description" : "DexAccount data",
          "$ref" : "#/definitions/DexAccount"
        }
      },
      "description" : "model.getAccountResponse"
    },
    "GetApiKeyResponseV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "string",
          "example" : "6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt",
          "description" : "field.getApiKeyResponseV2.data"
        }
      },
      "description" : "model.getApiKeyResponseV2"
    },
    "GetApiKeyRequest" : {
      "type" : "object",
      "required" : [ "accountId" ],
      "properties" : {
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "AccountID"
        }
      },
      "description" : "model.applyApiKey.description"
    },
    "GetNextStorageIdResponseData" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "field.GetNextStorageIdResponseData.data",
          "$ref" : "#/definitions/NextStorageIdResponse"
        }
      },
      "description" : "model.GetNextStorageIdResponseData.description"
    },
    "NextStorageIdResponse" : {
      "type" : "object",
      "properties" : {
        "orderId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "Next storage ID for order request, must be even"
        },
        "offchainId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 101,
          "description" : "Next storage ID for offchain requests, i.e., transfer/withdraw/updateAccount, must be odd"
        }
      },
      "description" : "{{model.NextStorageIdResponse.description}"
    },
    "SubmitOrderResponseV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "field.SubmitOrderResponseV2.data",
          "$ref" : "#/definitions/SubmitOrderResponseV2Item"
        }
      },
      "description" : "model.SubmitOrderResponseV2.description"
    },
    "SubmitOrderResponseV2Item" : {
      "type" : "object",
      "required" : [ "isIdempotent", "orderHash", "status" ],
      "properties" : {
        "orderHash" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "field.SubmitOrderResponseV2Item.orderHash"
        },
        "status" : {
          "type" : "string",
          "example" : "cancelled",
          "description" : "field.SubmitOrderResponseV2Item.status",
          "enum" : [ "processing", "processed", "cancelling", "cancelled", "expired", "failed" ]
        },
        "isIdempotent" : {
          "type" : "boolean",
          "example" : true,
          "description" : "field.SubmitOrderResponseV2Item.isIdempotent",
          "enum" : [ true, false ]
        }
      },
      "description" : "model.SubmitOrderResponseV2Item.description"
    },
    "SubmitOrderRequest" : {
      "type" : "object",
      "required" : [ "accountId", "amountB", "amountS", "eddsaSig", "exchange", "fillAmountBOrS", "maxFeeBips", "storageId", "tokenBId", "tokenSId", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "field.SubmitOrderRequest.exchange"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.SubmitOrderRequest.storageId"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SubmitOrderRequest.accountId"
        },
        "tokenSId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "field.SubmitOrderRequest.tokenSId"
        },
        "tokenBId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "field.SubmitOrderRequest.tokenBId"
        },
        "amountS" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.SubmitOrderRequest.amountS"
        },
        "amountB" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.SubmitOrderRequest.amountB"
        },
        "allOrNone" : {
          "type" : "string",
          "example" : "false",
          "description" : "field.SubmitOrderRequest.allOrNone"
        },
        "fillAmountBOrS" : {
          "type" : "string",
          "example" : "true",
          "description" : "field.SubmitOrderRequest.fillAmountBOrS"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1567053142,
          "description" : "field.SubmitOrderRequest.validUntil"
        },
        "maxFeeBips" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20,
          "description" : "field.SubmitOrderRequest.maxFeeBips"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "field.SubmitOrderRequest.eddsaSig"
        },
        "clientOrderId" : {
          "type" : "string",
          "example" : "1",
          "description" : "field.SubmitOrderRequest.clientOrderId"
        },
        "affiliate" : {
          "type" : "string",
          "example" : "10005",
          "description" : "field.SubmitOrderRequest.affiliate"
        },
        "orderType" : {
          "type" : "string",
          "example" : "LIMIT_ORDER",
          "description" : "field.SubmitOrderRequest.orderType",
          "enum" : [ "LIMIT_ORDER", "TAKER_ONLY", "MAKER_ONLY", "AMM(for back compatible)" ]
        },
        "tradeChannel" : {
          "type" : "string",
          "example" : "ORDER_BOOK",
          "description" : "field.SubmitOrderRequest.tradeChannel",
          "enum" : [ "ORDER_BOOK:0", "AMM_POOL:1", "MIXED:2" ]
        },
        "taker" : {
          "type" : "string",
          "example" : "0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18",
          "description" : "field.SubmitOrderRequest.taker"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18",
          "description" : "field.SubmitOrderRequest.taker"
        }
      },
      "description" : "model.SubmitOrderRequest.description"
    },
    "BatchSubmitOrderResponse" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "Result of batch submit orders.",
          "items" : {
            "$ref" : "#/definitions/SubmitOrderResult"
          }
        }
      },
      "description" : "Batch submit orders."
    },
    "SubmitOrderResult" : {
      "type" : "object",
      "required" : [ "hash" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf",
          "description" : "Hash of order submitted"
        },
        "error" : {
          "description" : "Error for order submission failure.",
          "$ref" : "#/definitions/ResultInfo"
        }
      },
      "description" : "Single order submission results."
    },
    "BatchSubmitOrderRequest" : {
      "type" : "object",
      "required" : [ "orders" ],
      "properties" : {
        "orders" : {
          "type" : "array",
          "description" : "Orders to submit.",
          "items" : {
            "$ref" : "#/definitions/SubmitOrderRequest"
          }
        }
      },
      "description" : "Batch submit order parameters."
    },
    "GetOrderDetailResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "Response details of order",
          "$ref" : "#/definitions/OrderDetail"
        }
      },
      "description" : "Response body"
    },
    "CancelOrdersResponseData" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "boolean",
          "example" : true,
          "description" : "field.CancelOrdersResponseData.data"
        }
      }
    },
    "BatchCancelOrderResponse" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "Results of batch order cancellation.",
          "items" : {
            "$ref" : "#/definitions/CancelOrderResult"
          }
        }
      },
      "description" : "Batch cancel orders."
    },
    "CancelOrderResult" : {
      "type" : "object",
      "required" : [ "id", "result" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "Hash or clientOrderId of order cancelled."
        },
        "result" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Order cancellation result."
        },
        "error" : {
          "description" : "Error for cancel order failure.",
          "$ref" : "#/definitions/ResultInfo"
        }
      },
      "description" : "result for order cancellation."
    },
    "ForwardEthTxResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "string",
          "example" : "0x28251d0415096a549604350e5ad1ff53f88b834bd195aa05b50610da41eff886",
          "description" : "Transaction hash"
        }
      },
      "description" : "Response of sending raw transaction"
    },
    "ForwardEthTxRequest" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "type" : "string",
          "example" : "0xf8aa0a8502540be400830186a0949032dbf5669341c3d95bc02b4bde90e4e051db3580b844095ea7b30000000000000000000000001d307532a97879b866a6fe33bf4a517bd28de854ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff25a071af95d2a3eb01bb11f84d9c66d09924d97a2b3ce38e0079a2d56dfb13035df0a07404b3a48c40cc3e7b9893d88512ef526a67bf3c274548ec09f94386e0062fc2",
          "description" : "Serialized Ethereum signature transaction as hexadecimal string"
        }
      },
      "description" : "Send a raw Ethereum transaction"
    },
    "DualAuthTransferRequest" : {
      "type" : "object",
      "required" : [ "amount", "dualAuthKeyX", "dualAuthKeyY", "dualEddsaSig", "dualPayeeAddr", "dualPayeeId", "eddsaSig", "exchange", "feeToken", "maxFeeAmount", "payerAddr", "payerId", "storageId", "token", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.SubmitDualAuthTransferRequest.exchange"
        },
        "payerId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.SubmitDualAuthTransferRequest.payerId"
        },
        "payerAddr" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.SubmitDualAuthTransferRequest.payerAddr"
        },
        "token" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.SubmitDualAuthTransferRequest.token"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.SubmitDualAuthTransferRequest.amount"
        },
        "feeToken" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.SubmitDualAuthTransferRequest.feeToken"
        },
        "maxFeeAmount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.SubmitDualAuthTransferRequest.maxFeeAmount"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SubmitDualAuthTransferRequest.storageId"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "field.SubmitDualAuthTransferRequest.validUntil"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "0xX..{64}..XY..{64}..YZ..{64}..Z",
          "description" : "field.SubmitDualAuthTransferRequest.eddsaSig"
        },
        "dualAuthKeyX" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "field.SubmitDualAuthTransferRequest.dualAuthKeyX"
        },
        "dualAuthKeyY" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "field.SubmitDualAuthTransferRequest.dualAuthKeyY"
        },
        "dualEddsaSig" : {
          "type" : "string",
          "example" : "0xX..{64}..XY..{64}..YZ..{64}..Z",
          "description" : "field.SubmitDualAuthTransferRequest.dualEddsaSig"
        },
        "dualPayeeId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SubmitDualAuthTransferRequest.dualPayeeId"
        },
        "dualPayeeAddr" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.SubmitDualAuthTransferRequest.dualPayeeAddr"
        },
        "memo" : {
          "type" : "string",
          "example" : "Air Drop",
          "description" : "field.SubmitDualAuthTransferRequest.memo"
        }
      },
      "description" : "model.SubmitDualAuthTransferRequest.description"
    },
    "Action" : {
      "type" : "object"
    },
    "ActionAnyContent" : {
      "type" : "object"
    },
    "Balance" : {
      "type" : "object",
      "required" : [ "accountId", "amountLocked", "pending", "tokenId", "totalAmount" ],
      "properties" : {
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10,
          "description" : "field.Balance.accountId"
        },
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "field.Balance.tokenId"
        },
        "totalAmount" : {
          "type" : "string",
          "example" : "100",
          "description" : "field.Balance.totalAmount"
        },
        "amountLocked" : {
          "type" : "string",
          "example" : "100",
          "description" : "field.Balance.frozenAmount"
        },
        "pending" : {
          "example" : "{withdraw:0, deposit:0}",
          "description" : "field.Balance.pending",
          "$ref" : "#/definitions/PendingBalance"
        }
      },
      "description" : "model.Balance.description"
    },
    "GetUserBalancesResponseV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "field.Balance.balances",
          "items" : {
            "$ref" : "#/definitions/Balance"
          }
        }
      },
      "description" : "The response of querying user's exchange balance"
    },
    "PendingBalance" : {
      "type" : "object",
      "required" : [ "deposit", "withdraw" ],
      "properties" : {
        "withdraw" : {
          "type" : "string",
          "example" : "10000000000000",
          "description" : "Withdrawal pending balance which means the token is in withdrawal state but not arrived L1"
        },
        "deposit" : {
          "type" : "string",
          "example" : "10000000000000",
          "description" : "Deposit pending balance which means the token is in deposit state but not arrived L2"
        }
      },
      "description" : "Users pending balances"
    },
    "DepositData" : {
      "type" : "object",
      "required" : [ "amount", "blockNum", "hash", "id", "progress", "status", "symbol", "timestamp", "txHash", "updatedAt" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Unique ID"
        },
        "hash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "hash"
        },
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "Token symbol"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "Amount requested by the user"
        },
        "txHash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "Transaction hash"
        },
        "status" : {
          "type" : "string",
          "example" : "processing",
          "description" : "Current status",
          "enum" : [ "processing", "processed", "received", "failed" ]
        },
        "progress" : {
          "type" : "string",
          "example" : "100%",
          "description" : "Progress"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Create time"
        },
        "blockNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "Block height"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Update time"
        }
      },
      "description" : "Response data"
    },
    "DepositDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Total number of records found"
        },
        "transactions" : {
          "type" : "array",
          "description" : "List of DepositRecord",
          "items" : {
            "$ref" : "#/definitions/DepositData"
          }
        }
      },
      "description" : "DepositDataList"
    },
    "GetUserDepositResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "TxDataList",
          "$ref" : "#/definitions/DepositDataList"
        }
      },
      "description" : "Response body"
    },
    "GetUserOnchainWithdrawalResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "TxDataList",
          "$ref" : "#/definitions/OnchainWithdrawalDataList"
        }
      },
      "description" : "Response body"
    },
    "OnchainWithdrawalDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Total number of records found"
        },
        "transactions" : {
          "type" : "array",
          "description" : "List of OnchainWithdrawalRecord",
          "items" : {
            "$ref" : "#/definitions/WithdrawalData"
          }
        }
      },
      "description" : "OnchainWithdrawalDataList"
    },
    "WithdrawalData" : {
      "type" : "object",
      "required" : [ "amount", "blockNum", "distributeHash", "feeAmount", "feeTokenSymbol", "hash", "id", "progress", "status", "symbol", "timestamp", "txHash", "txType", "updatedAt" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Unique ID"
        },
        "txType" : {
          "type" : "string",
          "example" : "FORCE_WITHDRAWAL",
          "description" : "User transaction type"
        },
        "hash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "hash"
        },
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "Token symbol"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "Amount requested by the user"
        },
        "txHash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "Transaction hash"
        },
        "feeTokenSymbol" : {
          "type" : "string",
          "example" : "ETH",
          "description" : "field.TxData.feeTokenSymbol"
        },
        "feeAmount" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "Fee amount in wei"
        },
        "status" : {
          "type" : "string",
          "example" : "processing",
          "description" : "Current status",
          "enum" : [ "processing", "processed", "received", "failed" ]
        },
        "progress" : {
          "type" : "string",
          "example" : "100%",
          "description" : "Progress"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Create time"
        },
        "blockNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "Block height"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Update time"
        },
        "distributeHash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "Distribute Hash"
        },
        "requestId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Request Id"
        },
        "fastStatus" : {
          "type" : "string",
          "example" : "EMPTY",
          "description" : "Fast withdrawal status",
          "enum" : [ "EMPTY", "PROCEEING", "SUCCESSED", "FAILED" ]
        }
      },
      "description" : "Response data"
    },
    "GetUserTransferResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "TxDataList",
          "$ref" : "#/definitions/TransferDataList"
        }
      },
      "description" : "Response body"
    },
    "TransferData" : {
      "type" : "object",
      "required" : [ "amount", "feeAmount", "feeTokenSymbol", "hash", "id", "progress", "status", "symbol", "timestamp", "txType", "updatedAt" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Unique ID"
        },
        "hash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "hash"
        },
        "txType" : {
          "type" : "string",
          "example" : "transfer",
          "description" : "User transaction type"
        },
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "Token symbol"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "Amount requested by the user"
        },
        "senderAddress" : {
          "type" : "string",
          "example" : "0x0306b9d5c9Ed358FC7b77780bACD15398D242f26",
          "description" : "field.TxData.senderAddress"
        },
        "receiver" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Receiver ID"
        },
        "receiverAddress" : {
          "type" : "string",
          "example" : "0x0306b9d5c9Ed358FC7b77780bACD15398D242f26",
          "description" : "The transfer receiver's address"
        },
        "feeTokenSymbol" : {
          "type" : "string",
          "example" : "ETH",
          "description" : "field.TxData.feeTokenSymbol"
        },
        "feeAmount" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "Fee amount in wei"
        },
        "status" : {
          "type" : "string",
          "example" : "processing",
          "description" : "Current status",
          "enum" : [ "processing", "processed", "received", "failed" ]
        },
        "progress" : {
          "type" : "string",
          "example" : "100%",
          "description" : "Progress"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Create time"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Update time"
        },
        "memo" : {
          "type" : "string",
          "example" : "Air Drop",
          "description" : "field.TxData.memo"
        }
      }
    },
    "TransferDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Total number of records found"
        },
        "transactions" : {
          "type" : "array",
          "description" : "User's transfer list",
          "items" : {
            "$ref" : "#/definitions/TransferData"
          }
        }
      },
      "description" : "model.TransferDataList.description"
    },
    "OffChainWithdrawalRequest" : {
      "type" : "object",
      "required" : [ "accountId", "amount", "exchange", "feeToken", "maxFeeAmount", "minGas", "owner", "storageId", "to", "token", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "exchange address"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "account id in exchange"
        },
        "owner" : {
          "type" : "string",
          "example" : "1",
          "description" : "owner of accountId in exchange"
        },
        "token" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "withdraw token id"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "withdraw amount of token, decimal string in WEI"
        },
        "feeToken" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "fee token id in exchange"
        },
        "maxFeeAmount" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "fee amount of token, decimal string in WEI"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "dex offchain request storageID of the account"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1519217383,
          "description" : "valid until"
        },
        "minGas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1519217383,
          "description" : "min gas"
        },
        "to" : {
          "type" : "string",
          "example" : "0x12345678",
          "description" : "to address"
        },
        "extraData" : {
          "type" : "string",
          "example" : "0xABCD1234",
          "description" : "extra data"
        },
        "fastWithdrawalMode" : {
          "type" : "boolean",
          "example" : false,
          "description" : "fastWithdrawal mode"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "0xX..{64}..XY..{64}..YZ..{64}..Z",
          "description" : "eddsaSig of this request, hex string"
        },
        "ecdsaSig" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "trading ecdsa_sig signature of this order, decimal string"
        }
      }
    },
    "GetUserCreateResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "TxDataList",
          "$ref" : "#/definitions/UserCreateDataList"
        }
      },
      "description" : "Response body"
    },
    "UserAccountTxData" : {
      "type" : "object",
      "required" : [ "blockNum", "feeAmount", "feeTokenSymbol", "hash", "id", "owner", "progress", "status", "timestamp", "txHash", "updatedAt" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Unique ID"
        },
        "hash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "hash"
        },
        "owner" : {
          "type" : "string",
          "example" : "0xC0Cf3f78529AB90F765406f7234cE0F2b1ed69Ee",
          "description" : "Owner address of the Tx"
        },
        "txHash" : {
          "type" : "string",
          "example" : "0x9d114267e8b261457d567093c13cf3deea5f14c9235be26c6fa833dba12a9632",
          "description" : "Transaction hash"
        },
        "feeTokenSymbol" : {
          "type" : "string",
          "example" : "ETH",
          "description" : "field.TxData.feeTokenSymbol"
        },
        "feeAmount" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "Fee amount in wei"
        },
        "status" : {
          "type" : "string",
          "example" : "processing",
          "description" : "Current status",
          "enum" : [ "processing", "processed", "received", "failed" ]
        },
        "progress" : {
          "type" : "string",
          "example" : "100%",
          "description" : "Progress"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Create time"
        },
        "blockNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "Block height"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1578572292000,
          "description" : "Update time"
        }
      },
      "description" : "Response data"
    },
    "UserCreateDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Total number of records found"
        },
        "transactions" : {
          "type" : "array",
          "description" : "List of UserRegistrationRecord",
          "items" : {
            "$ref" : "#/definitions/UserAccountTxData"
          }
        }
      },
      "description" : "UserCreateDataList"
    },
    "GetUserAccountUpdateResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "TxDataList",
          "$ref" : "#/definitions/UserAccountUpdateDataList"
        }
      },
      "description" : "Response body"
    },
    "UserAccountUpdateDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Total number of records found"
        },
        "transactions" : {
          "type" : "array",
          "description" : "List of UserPasswordChangeRecord",
          "items" : {
            "$ref" : "#/definitions/UserAccountTxData"
          }
        }
      },
      "description" : "UserChangePasswordDataList"
    },
    "GetUserTradesResponseV2" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "A list of trades",
          "$ref" : "#/definitions/TradeList"
        }
      },
      "description" : "Response body"
    },
    "TradeList" : {
      "type" : "object",
      "required" : [ "totalNum", "trades" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 100,
          "description" : "Total number of tradings"
        },
        "trades" : {
          "type" : "array",
          "example" : "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]",
          "description" : "field.marketTrades.trades",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "A list of trades"
    },
    "FeeRate" : {
      "type" : "object",
      "required" : [ "makerRate", "symbol", "takerRate" ],
      "properties" : {
        "symbol" : {
          "type" : "string",
          "example" : "LRC-USDT",
          "description" : "Market"
        },
        "makerRate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20,
          "description" : "Maker rate"
        },
        "takerRate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20,
          "description" : "Taker rate"
        }
      },
      "description" : "The data structure of user query market fee rate"
    },
    "GetUserFeeRatesV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "example" : "1584354752",
          "description" : "The results returned by query user fee rates",
          "items" : {
            "$ref" : "#/definitions/FeeRate"
          }
        }
      },
      "description" : "The results returned by query user fee rates"
    },
    "GetUserFeeRates2Request" : {
      "type" : "object",
      "required" : [ "accountId", "amountB", "market", "tokenB" ],
      "properties" : {
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Account ID"
        },
        "market" : {
          "type" : "string",
          "example" : "LRC-ETH",
          "description" : "Market symbol"
        },
        "tokenB" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Token ID"
        },
        "amountB" : {
          "type" : "string",
          "example" : "LRC-ETH",
          "description" : "Amount to buy"
        }
      }
    },
    "GetOrderAmountResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "The results returned by query place order amount",
          "$ref" : "#/definitions/GetOrderAmountResponseData"
        }
      },
      "description" : "The results returned by query place order amount"
    },
    "GetOrderAmountResponseData" : {
      "type" : "object",
      "required" : [ "amount", "gasPrice" ],
      "properties" : {
        "amount" : {
          "type" : "string",
          "example" : "100000000000000000000",
          "description" : "field.getOrderAmountResponseData.amount"
        },
        "gasPrice" : {
          "type" : "string",
          "example" : "5000000000000000",
          "description" : "field.getOrderAmountResponseData.gasPrice"
        }
      },
      "description" : "model.getOrderAmountResponseData"
    },
    "GetOrderGroupAmountData" : {
      "type" : "object",
      "properties" : {
        "gasPrice" : {
          "type" : "string",
          "example" : "10000000000",
          "description" : "field.getOrderAmountResponseData.gasPrice"
        },
        "amounts" : {
          "type" : "array",
          "description" : "field.getOrderAmountResponseData.amounts",
          "items" : {
            "$ref" : "#/definitions/TokenAmount"
          }
        },
        "cacheOverdueAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1614683483382,
          "description" : "field.getOrderAmountResponseData.cacheOverdueAt"
        }
      },
      "description" : "model.getOrderAmountResponseData"
    },
    "GetOrderGroupAmountResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "The results returned by query place order amount",
          "$ref" : "#/definitions/GetOrderGroupAmountData"
        }
      }
    },
    "OrderInfo" : {
      "type" : "object",
      "properties" : {
        "minAmount" : {
          "type" : "string",
          "example" : "10000000000",
          "description" : "field.orderInfo.minAmount"
        },
        "makerRate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "field.orderInfo.makerRate"
        },
        "takerRate" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "field.orderInfo.takerRate"
        }
      },
      "description" : "model.orderInfo"
    },
    "TokenAmount" : {
      "type" : "object",
      "properties" : {
        "tokenSymbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "field.tokenAmount.tokenSymbol"
        },
        "discount" : {
          "type" : "number",
          "format" : "double",
          "example" : 1.0,
          "description" : "field.tokenAmount.discount"
        },
        "baseOrderInfo" : {
          "description" : "field.tokenAmount.baseOrderInfo",
          "$ref" : "#/definitions/OrderInfo"
        },
        "userOrderInfo" : {
          "description" : "field.tokenAmount.userOrderInfo",
          "$ref" : "#/definitions/OrderInfo"
        }
      },
      "description" : "model.tokenAmount"
    },
    "CombineMarketInfo" : {
      "type" : "object",
      "required" : [ "baseTokenId", "createdAt", "enabled", "market", "orderbookAggLevels", "precisionForPrice", "quoteTokenId", "status" ],
      "properties" : {
        "market" : {
          "type" : "string",
          "example" : "LRC-USDT",
          "description" : "Trading pair ID"
        },
        "baseTokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "The base token ID"
        },
        "quoteTokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The quote token ID"
        },
        "precisionForPrice" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "The precision of price"
        },
        "orderbookAggLevels" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 4,
          "description" : "The max level of orderbook price aggregation"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "True if trading is enabled for this trading pair"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "3(0b11)",
          "description" : "field.CombineMarketInfo.status"
        },
        "createdAt" : {
          "type" : "string",
          "example" : "1609466400000",
          "description" : "field.AmmMarketInfo.createdAt"
        }
      }
    },
    "GetMixedMarketInfoResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "field.getMarketInfoResponse.data",
          "items" : {
            "$ref" : "#/definitions/CombineMarketInfo"
          }
        }
      },
      "description" : "model.getMarketInfoResponse"
    },
    "ExchangeInfo" : {
      "type" : "object",
      "required" : [ "ammExitFees", "chainId", "depositAddress", "exchangeAddress", "fastWithdrawalFees", "onchainFees", "openAccountFees", "transferFees", "updateFees", "withdrawalFees" ],
      "properties" : {
        "chainId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Loopring's smart contract network ID."
        },
        "exchangeAddress" : {
          "type" : "string",
          "example" : "0xbA1D5779131aa529F51B4B00186E9e97f3BeB854",
          "description" : "Contract address of exchange."
        },
        "depositAddress" : {
          "type" : "string",
          "example" : "0xbA1D5779131aa529F51B4B00186E9e97f3BeB854",
          "description" : "field.ExchangeInfo.depositAddress"
        },
        "onchainFees" : {
          "type" : "array",
          "description" : "Fees settings.",
          "items" : {
            "$ref" : "#/definitions/FeeInfo"
          }
        },
        "openAccountFees" : {
          "type" : "array",
          "description" : "field.ExchangeInfo.openAccountFee",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo"
          }
        },
        "updateFees" : {
          "type" : "array",
          "description" : "field.ExchangeInfo.updateFees",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo"
          }
        },
        "transferFees" : {
          "type" : "array",
          "description" : "Transfer fee settings.",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo"
          }
        },
        "withdrawalFees" : {
          "type" : "array",
          "description" : "Off-chain withdrawal fee settings.",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo"
          }
        },
        "fastWithdrawalFees" : {
          "type" : "array",
          "description" : "fast withdrawal fee settings.",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo"
          }
        },
        "ammExitFees" : {
          "type" : "array",
          "description" : "AMM pool exit fee settings.",
          "items" : {
            "$ref" : "#/definitions/OffFeeInfo"
          }
        }
      },
      "description" : "field.exchangeInfo.description"
    },
    "FeeInfo" : {
      "type" : "object",
      "required" : [ "fee", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "withdraw",
          "description" : "Fee category."
        },
        "fee" : {
          "type" : "string",
          "example" : "2000000000000000",
          "description" : "Fee amount in Ether as wei."
        }
      },
      "description" : "Information about fees charged by the exchange."
    },
    "GetExchangeInfoResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "Necessary data to interact with the exchange",
          "$ref" : "#/definitions/ExchangeInfo"
        }
      }
    },
    "OffFeeInfo" : {
      "type" : "object",
      "required" : [ "fee", "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "example" : "ETH",
          "description" : "fee token"
        },
        "fee" : {
          "type" : "string",
          "example" : "2000000000000000",
          "description" : "fee amount"
        }
      },
      "description" : "Off-chain fee info charged by loopring exchange."
    },
    "GetExchangeFeeInfoResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "Necessary data to interact with the exchange",
          "$ref" : "#/definitions/GetExchangeFeeInfoResponseData"
        }
      }
    },
    "GetExchangeFeeInfoResponseData" : {
      "type" : "object",
      "required" : [ "AMM_TRADING_FEES", "ORDERBOOK_TRADING_FEES", "ORDERBOOK_TRADING_FEES_STABLECOIN", "OTHER_FEES" ],
      "properties" : {
        "ORDERBOOK_TRADING_FEES_STABLECOIN" : {
          "type" : "object",
          "description" : "field.getExchangeFeeInfo.orderbook.stablecoin",
          "additionalProperties" : {
            "$ref" : "#/definitions/FeeRate"
          }
        },
        "ORDERBOOK_TRADING_FEES" : {
          "type" : "object",
          "description" : "field.getExchangeFeeInfo.orderbook",
          "additionalProperties" : {
            "$ref" : "#/definitions/FeeRate"
          }
        },
        "AMM_TRADING_FEES" : {
          "type" : "object",
          "description" : "field.getExchangeFeeInfo.amm",
          "additionalProperties" : {
            "$ref" : "#/definitions/FeeRate"
          }
        },
        "OTHER_FEES" : {
          "type" : "object",
          "description" : "field.getExchangeFeeInfo.other",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "AgentInfo" : {
      "type" : "object",
      "required" : [ "address", "freezeAmount", "symbol", "timestamp", "tokenId", "totalAmount" ],
      "properties" : {
        "address" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "field.AgentInfo.address"
        },
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "field.AgentInfo.tokenId"
        },
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "field.AgentInfo.symbol"
        },
        "totalAmount" : {
          "type" : "string",
          "example" : "1234",
          "description" : "field.AgentInfo.totalAmount"
        },
        "freezeAmount" : {
          "type" : "string",
          "example" : "1234",
          "description" : "field.AgentInfo.freezeAmount"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1234,
          "description" : "field.AgentInfo.timestamp"
        }
      },
      "description" : "field.AgentInfo.description"
    },
    "GetWithdrawalAgentsResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "Necessary data to interact with the exchange",
          "items" : {
            "$ref" : "#/definitions/AgentInfo"
          }
        }
      }
    },
    "GetRecommendedGasPriceResponseRangeV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "GetTimestampV2Response" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1584683483382,
          "description" : "field.getTimestampV2Response.data"
        }
      },
      "description" : "model.getTimestampV2Response"
    },
    "GetLuckyTokenAgentsResponse" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "model.GetAmmUserPoolsStatsResponse",
          "items" : {
            "$ref" : "#/definitions/LuckyTokenAgent"
          }
        }
      }
    },
    "LuckyTokenAgent" : {
      "type" : "object",
      "required" : [ "infos", "owner" ],
      "properties" : {
        "owner" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "field.luckyTokenAgent.owner"
        },
        "infos" : {
          "type" : "array",
          "example" : "['https://loopring.io']",
          "description" : "field.luckyTokenAgent.infos",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "model.luckyTokenAgent"
    },
    "SendLuckyTokenRequestV3" : {
      "type" : "object",
      "required" : [ "luckyToken", "memo", "numbers", "signerFlag", "templateId", "type", "validSince" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "1",
          "description" : "field.SendLuckyTokenRequestV3.exchange"
        },
        "numbers" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 5,
          "description" : "field.SendLuckyTokenRequestV3.numbers"
        },
        "memo" : {
          "type" : "string",
          "example" : "Lucky Draw for YOU",
          "description" : "field.SendLuckyTokenRequestV3.memo"
        },
        "signerFlag" : {
          "type" : "string",
          "example" : "true",
          "description" : "field.SendLuckyTokenRequestV3.signerFlag"
        },
        "templateId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SendLuckyTokenRequestV3.templateId"
        },
        "validSince" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1519217383,
          "description" : "field.SendLuckyTokenRequestV3.validSince"
        },
        "luckyToken" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.SendLuckyTokenRequestV3.luckyToken"
        }
      }
    },
    "GetLuckyTokenClaimAmountResponse" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "model.LuckyTokenClaimAmount",
          "$ref" : "#/definitions/LuckyTokenClaimAmount"
        }
      }
    },
    "LuckyTokenClaimAmount" : {
      "type" : "object",
      "required" : [ "amount" ],
      "properties" : {
        "amount" : {
          "type" : "string",
          "example" : "1000000",
          "description" : "field.LuckyTokenClaimAmount.amount"
        }
      }
    },
    "ClaimLuckyTokenRequestV3" : {
      "type" : "object",
      "required" : [ "claimer", "hash" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085",
          "description" : "field.ClaimLuckyTokenRequestV3.hash"
        },
        "claimer" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "field.SendLuckyTokenRequestV3.claimer"
        },
        "referrer" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "field.SendLuckyTokenRequestV3.referrer"
        }
      }
    },
    "BalanceV3" : {
      "type" : "object",
      "required" : [ "locked", "pending", "tokenId", "total" ],
      "properties" : {
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "Token ID"
        },
        "total" : {
          "type" : "string",
          "example" : "100",
          "description" : "Amount of the asset"
        },
        "locked" : {
          "type" : "string",
          "example" : "100",
          "description" : "The part of the total balance which is currently not liquid and not at the users disposal (because of pending withdrawals or orders for example)"
        },
        "pending" : {
          "example" : "100",
          "description" : "Users pending balances",
          "$ref" : "#/definitions/PendingBalance"
        }
      },
      "description" : "Asset information"
    },
    "GetUserBalancesResponseV3" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "type" : "array",
          "description" : "Asset information",
          "items" : {
            "$ref" : "#/definitions/BalanceV3"
          }
        }
      },
      "description" : "The response of querying user's exchange balance"
    },
    "WithdrawLuckyTokenRequestV3" : {
      "type" : "object",
      "required" : [ "amount", "claimer", "tokenId" ],
      "properties" : {
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "The user's account ID",
          "description" : "field.WithdrawLuckyTokenRequestV3.tokenId"
        },
        "amount" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "field.WithdrawLuckyTokenRequestV3.amount"
        },
        "claimer" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "field.WithdrawLuckyTokenRequestV3.claimer"
        }
      }
    },
    "WebSocket" : {
      "type" : "object"
    },
    "AmmMarketInfo" : {
      "type" : "object",
      "required" : [ "address", "amountPrecision", "createdAt", "enabled", "feeBips", "inPoolTokens", "market", "name", "poolTokenId", "pricePrecision", "status", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "LRC-USDT-Pool-1",
          "description" : "field.AmmMarketInfo.name"
        },
        "market" : {
          "type" : "string",
          "example" : "LP-LRC-USDT",
          "description" : "field.AmmMarketInfo.market"
        },
        "address" : {
          "type" : "string",
          "example" : "0xa6fa83b62b09174694EFD7EE3aE608ad478a138E",
          "description" : "field.AmmMarketInfo.address"
        },
        "version" : {
          "type" : "string",
          "example" : "1.0.0",
          "description" : "field.AmmMarketInfo.version"
        },
        "inPoolTokens" : {
          "type" : "array",
          "example" : "2,0",
          "description" : "field.AmmMarketInfo.inPoolTokens",
          "items" : {
            "type" : "object"
          }
        },
        "poolTokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "field.AmmMarketInfo.poolTokenId"
        },
        "feeBips" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "field.AmmMarketInfo.feeBips"
        },
        "pricePrecision" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "field.AmmMarketInfo.pricePrecision"
        },
        "amountPrecision" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "field.AmmMarketInfo.amountPrecision"
        },
        "createdAt" : {
          "type" : "string",
          "example" : "1609466400000",
          "description" : "field.AmmMarketInfo.createdAt"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "field.AmmMarketInfo.enabled"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "field.AmmMarketInfo.status"
        }
      }
    },
    "GetAmmMarketInfoResponse" : {
      "type" : "object",
      "required" : [ "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "field.getAmmMarketInfoResponse.data",
          "items" : {
            "$ref" : "#/definitions/AmmMarketInfo"
          }
        }
      },
      "description" : "model.getAmmMarketInfoResponse"
    },
    "AmmSnapshot" : {
      "type" : "object",
      "required" : [ "PoolTokenAmount", "poolAddress", "poolName", "poolTokenId", "risky", "tokenAmounts", "tokenIds" ],
      "properties" : {
        "poolName" : {
          "type" : "string",
          "example" : "LRC-ETH-Pool-1",
          "description" : "field.AmmSnapshot.poolName"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "10",
          "description" : "field.AmmSnapshot.poolAddress"
        },
        "poolTokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 10,
          "description" : "field.AmmSnapshot.poolTokenId"
        },
        "PoolTokenAmount" : {
          "type" : "string",
          "example" : "100",
          "description" : "field.AmmSnapshot.PoolTokenAmount"
        },
        "tokenIds" : {
          "type" : "array",
          "example" : "100",
          "description" : "field.AmmSnapshot.tokenIds",
          "items" : {
            "type" : "object"
          }
        },
        "tokenAmounts" : {
          "type" : "array",
          "example" : "100",
          "description" : "field.AmmSnapshot.tokenAmounts",
          "items" : {
            "type" : "string"
          }
        },
        "risky" : {
          "type" : "boolean",
          "example" : false,
          "description" : "field.AmmSnapshot.risky"
        }
      },
      "description" : "model.AmmSnapshot.description"
    },
    "GetAmmSnapshotResponse" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "description" : "field.AmmSnapshot.AmmSnapshot",
          "$ref" : "#/definitions/AmmSnapshot"
        }
      },
      "description" : "model.GetAmmSnapshotResponse"
    },
    "AmmPoolJoinRequest" : {
      "type" : "object",
      "required" : [ "ecdsaSig", "eddsaSig", "fee", "joinAmounts", "joinStorageIDs", "mintMinAmount", "owner", "poolAddress", "validUntil" ],
      "properties" : {
        "owner" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "field.AmmPoolJoinRequest.owner"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "field.AmmPoolJoinRequest.poolAddress"
        },
        "joinAmounts" : {
          "type" : "string",
          "example" : "10000000000,20000000000",
          "description" : "field.AmmPoolJoinRequest.joinAmounts"
        },
        "joinStorageIDs" : {
          "type" : "string",
          "example" : "1",
          "description" : "field.AmmPoolJoinRequest.joinStorageIDs"
        },
        "mintMinAmount" : {
          "type" : "string",
          "example" : "1000000000",
          "description" : "field.AmmPoolJoinRequest.mintMinAmount"
        },
        "fee" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.AmmPoolJoinRequest.fee"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "field.AmmPoolJoinRequest.validUntil"
        },
        "ecdsaSig" : {
          "type" : "string",
          "example" : "0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b",
          "description" : "field.AmmPoolJoinRequest.ecdsaSig"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b",
          "description" : "field.AmmPoolJoinRequest.eddsaSig"
        }
      },
      "description" : "model.AmmPoolJoinRequest.description"
    },
    "AmmPoolExitRequest" : {
      "type" : "object",
      "required" : [ "burnAmount", "burnStorageID", "ecdsaSig", "eddsaSig", "exitMinAmounts", "fee", "owner", "poolAddress", "validUntil" ],
      "properties" : {
        "owner" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "field.AmmPoolJoinRequest.owner"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "field.AmmPoolJoinRequest.poolAddress"
        },
        "burnAmount" : {
          "type" : "string",
          "example" : "100000000000000",
          "description" : "field.AmmPoolExitRequest.burnAmount"
        },
        "burnStorageID" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "field.AmmPoolExitRequest.burnStorageID"
        },
        "exitMinAmounts" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.AmmPoolExitRequest.exitMinAmounts"
        },
        "fee" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.AmmPoolExitRequest.fee"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "field.AmmPoolExitRequest.validUntil"
        },
        "ecdsaSig" : {
          "type" : "string",
          "example" : "0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b",
          "description" : "field.AmmPoolExitRequest.ecdsaSig"
        },
        "eddsaSig" : {
          "type" : "string",
          "example" : "0x30f2f3cf420ccd2a49533cf38b27b7cf06019019d8d7216f79ca5efccfbab66671388be422ac509aed5d76315862cd625e994865d4737ea5d93b712ddb9e36871b",
          "description" : "field.AmmPoolExitRequest.eddsaSig"
        }
      }
    },
    "AmmTransactionData" : {
      "type" : "object",
      "required" : [ "ammLayerType", "ammPoolAddress", "ammPoolId", "blockHeight", "createdAt", "hash", "id", "lpTokenAmount", "lpTokenId", "lpTokenSymbol", "owner", "transfers", "txHash", "txStatus", "txType", "updatedAt" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "hash" : {
          "type" : "string"
        },
        "txHash" : {
          "type" : "string"
        },
        "owner" : {
          "type" : "string"
        },
        "txType" : {
          "type" : "string"
        },
        "txStatus" : {
          "type" : "string"
        },
        "ammLayerType" : {
          "type" : "string"
        },
        "ammPoolId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ammPoolAddress" : {
          "type" : "string"
        },
        "lpTokenId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "lpTokenSymbol" : {
          "type" : "string"
        },
        "lpTokenAmount" : {
          "type" : "string"
        },
        "transfers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AmmTransferData"
          }
        },
        "blockHeight" : {
          "type" : "integer",
          "format" : "int64"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AmmTransactionDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64"
        },
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AmmTransactionData"
          }
        }
      }
    },
    "AmmTransferData" : {
      "type" : "object",
      "required" : [ "actualAmount", "amount", "feeAmount", "id", "tokenId", "tokenSymbol" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "tokenId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "tokenSymbol" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "string"
        },
        "actualAmount" : {
          "type" : "string"
        },
        "feeAmount" : {
          "type" : "string"
        }
      }
    },
    "GetAmmTransactionResponseV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "$ref" : "#/definitions/AmmTransactionDataList"
        }
      }
    },
    "AmmTradeData" : {
      "type" : "object",
      "required" : [ "accountId", "createdAt", "feeAmount", "market", "orderHash", "price", "sequenceId", "settlementRequestId", "side", "size" ],
      "properties" : {
        "sequenceId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "settlementRequestId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "orderHash" : {
          "type" : "string"
        },
        "market" : {
          "type" : "string"
        },
        "side" : {
          "type" : "string"
        },
        "size" : {
          "type" : "string"
        },
        "price" : {
          "type" : "number",
          "format" : "double"
        },
        "feeAmount" : {
          "type" : "string"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "AmmTradeDataList" : {
      "type" : "object",
      "required" : [ "totalNum", "trades" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64"
        },
        "trades" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AmmTradeData"
          }
        }
      }
    },
    "GetAmmTradesResponseV2" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "$ref" : "#/definitions/AmmTradeDataList"
        }
      }
    },
    "AmmPoolStatistics" : {
      "type" : "object",
      "required" : [ "apyBips", "fees", "isRecommended", "liquidity", "liquidityUSD", "lpLiquidity", "market", "ohlc", "rewards", "volume" ],
      "properties" : {
        "market" : {
          "type" : "string",
          "example" : "LRC-ETH-Pool-1",
          "description" : "field.AmmPoolStatistics.market"
        },
        "liquidity" : {
          "type" : "array",
          "example" : "[10000000, 10000000]",
          "description" : "field.AmmPoolStatistics.liquidity",
          "items" : {
            "type" : "string"
          }
        },
        "lpLiquidity" : {
          "type" : "string",
          "example" : "100",
          "description" : "field.AmmPoolStatistics.lpLiquidity"
        },
        "liquidityUSD" : {
          "type" : "string",
          "example" : "100",
          "description" : "field.AmmPoolStatistics.liquidityUSD"
        },
        "ohlc" : {
          "type" : "array",
          "example" : "[open, high, low, close]",
          "description" : "field.AmmPoolStatistics.ohlc",
          "items" : {
            "type" : "string"
          }
        },
        "volume" : {
          "type" : "array",
          "example" : "[10000000, 10000000]",
          "description" : "field.AmmPoolStatistics.volume",
          "items" : {
            "type" : "string"
          }
        },
        "fees" : {
          "type" : "array",
          "example" : "[10000000, 10000000]",
          "description" : "field.AmmPoolStatistics.fees",
          "items" : {
            "type" : "string"
          }
        },
        "apyBips" : {
          "type" : "string",
          "example" : "4000",
          "description" : "field.AmmPoolStatistics.apyBips"
        },
        "isRecommended" : {
          "type" : "boolean",
          "example" : true,
          "description" : "field.AmmPoolStatistics.isRecommended"
        },
        "rewards" : {
          "type" : "array",
          "example" : "{tokenId: 0, volume: 10000000}",
          "description" : "field.AmmPoolStatistics.rewards",
          "items" : {
            "$ref" : "#/definitions/TokenVolumeV3"
          }
        }
      },
      "description" : "model.AmmPoolStatistics"
    },
    "GetAmmPoolsStatsResponse" : {
      "type" : "object",
      "required" : [ "data", "resultInfo" ],
      "properties" : {
        "resultInfo" : {
          "description" : "Information returned by the API",
          "$ref" : "#/definitions/ResultInfo"
        },
        "data" : {
          "type" : "array",
          "description" : "model.AmmPoolStatistics",
          "items" : {
            "$ref" : "#/definitions/AmmPoolStatistics"
          }
        }
      }
    },
    "TokenVolumeV3" : {
      "type" : "object",
      "required" : [ "tokenId", "volume" ],
      "properties" : {
        "tokenId" : {
          "type" : "string",
          "example" : "0",
          "description" : "The Loopring's token identifier."
        },
        "volume" : {
          "type" : "string",
          "example" : "1000000000000",
          "description" : "The volume of the token"
        }
      },
      "description" : "Wrapper object used to describe a token associated with a certain quantity."
    },
    "GasAmountLimitV3" : {
      "type" : "object",
      "required" : [ "deposit", "distribution" ],
      "properties" : {
        "distribution" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "The gas amount for withdrawal"
        },
        "deposit" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "The gas amount for deposit"
        }
      },
      "description" : "Contains information about the gas amounts required by ETH L1 requests."
    },
    "OrderAmountsV3" : {
      "type" : "object",
      "required" : [ "dust", "maximum", "minimum" ],
      "properties" : {
        "minimum" : {
          "type" : "string",
          "example" : "10000000000000000",
          "description" : "The minimum amount enforced when submitting orders for the token."
        },
        "maximum" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "The maximum amount enforced when submitting orders for the token."
        },
        "dust" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "The dust amount enforced when submitting orders for the token."
        }
      },
      "description" : "Contains information about the order amounts that are valid for usage with the token in order-related APIs."
    },
    "TokenInfoV3" : {
      "type" : "object",
      "required" : [ "address", "decimals", "enabled", "fastWithdrawLimit", "gasAmounts", "name", "orderAmounts", "precision", "precisionForOrder", "symbol", "tokenId", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "ERC20",
          "description" : "Token Type",
          "enum" : [ "ERC20", "ETH" ]
        },
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 2,
          "description" : "Token's numeric ID"
        },
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "Token symbol"
        },
        "name" : {
          "type" : "string",
          "example" : "Loopring",
          "description" : "Token name"
        },
        "address" : {
          "type" : "string",
          "example" : "0x97241525fe425C90eBe5A41127816dcFA5954b06",
          "description" : "Token ERC20 contract address"
        },
        "decimals" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 18,
          "description" : "Token decimals"
        },
        "precision" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "Max decimals that relayer uses for the token, smaller amount will be treated as zero."
        },
        "precisionForOrder" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "Max decimals that relayer uses for the token, smaller amount will be treated as zero."
        },
        "orderAmounts" : {
          "example" : "{min:100000, max:900000, dust:10}",
          "description" : "The amount requirements for submitting orders.",
          "$ref" : "#/definitions/OrderAmountsV3"
        },
        "fastWithdrawLimit" : {
          "type" : "string",
          "example" : "1000000000000000",
          "description" : "The maximum amount for single fast withdrawal"
        },
        "gasAmounts" : {
          "example" : "{distributionGas:100000, depositGas:150000}",
          "description" : "The gas amount requirements for user requests",
          "$ref" : "#/definitions/GasAmountLimitV3"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether the token is currently enabled for deposits and withdrawals."
        }
      },
      "description" : "Token Detail"
    },
    "OriginTransferRequestV3" : {
      "type" : "object",
      "required" : [ "exchange", "maxFee", "payeeAddr", "payeeId", "payerAddr", "payerId", "storageId", "token", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "exchange address"
        },
        "payerId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "payer account ID"
        },
        "payerAddr" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "payer account address"
        },
        "payeeId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "payee account ID"
        },
        "payeeAddr" : {
          "type" : "string",
          "example" : "0xCDEF",
          "description" : "payer account address"
        },
        "token" : {
          "example" : "{tokenId: 0, volume: 1000000}",
          "description" : "token to be transfer",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "maxFee" : {
          "example" : "{tokenId: 0, volume: 1000000}",
          "description" : "maximum fee of the transfer",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "offchain Id"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "Timestamp for order to become invalid"
        },
        "eddsaSignature" : {
          "type" : "string",
          "example" : "0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02",
          "description" : "eddsa signature"
        },
        "ecdsaSignature" : {
          "type" : "string",
          "example" : "0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9",
          "description" : "ecdsa signature"
        },
        "hashApproved" : {
          "type" : "string",
          "example" : "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085",
          "description" : "An approved hash string which was already submitted on eth mainnet"
        },
        "memo" : {
          "type" : "string",
          "example" : "Air Drop",
          "description" : "transfer memo"
        },
        "clientId" : {
          "type" : "string",
          "example" : "hebao1234567",
          "description" : "A user-defined id"
        }
      },
      "description" : "Submit internal transfer params"
    },
    "PublicKey" : {
      "type" : "object",
      "required" : [ "x", "y" ],
      "properties" : {
        "x" : {
          "type" : "string",
          "example" : "0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f",
          "description" : "The public keys x part."
        },
        "y" : {
          "type" : "string",
          "example" : "0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c",
          "description" : "The public keys y part."
        }
      },
      "description" : "Describes the users public key which is a point of the selected eclipse curve."
    },
    "UpdateAccountRequestV3" : {
      "type" : "object",
      "required" : [ "accountId", "exchange", "maxFee", "nonce", "owner", "publicKey", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "exchange address"
        },
        "owner" : {
          "type" : "string",
          "example" : "0xB4A70168340C75119523019f79F5Ffd9c60DceC7",
          "description" : "owner address"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "user account ID"
        },
        "publicKey" : {
          "example" : "{x:0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f,y:0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c}",
          "description" : "The user's public key",
          "$ref" : "#/definitions/PublicKey"
        },
        "maxFee" : {
          "example" : "{tokenId: 0, volume: 1000000}",
          "description" : "maximum of fee token",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1583183141,
          "description" : "Timestamp for order to become invalid"
        },
        "nonce" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Nonce of users exchange account that used in off-chain requests."
        },
        "eddsaSignature" : {
          "type" : "string",
          "example" : "0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02",
          "description" : "eddsa signature of this request"
        },
        "ecdsaSignature" : {
          "type" : "string",
          "example" : "0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9",
          "description" : "ecdsa signature of this request"
        },
        "hashApproved" : {
          "type" : "string",
          "example" : "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085",
          "description" : "An approved hash string which was submitted on eth mainnet"
        }
      },
      "description" : "Params to update account EDDSA key"
    },
    "GetMarketsResponseV3" : {
      "type" : "object",
      "required" : [ "markets" ],
      "properties" : {
        "markets" : {
          "type" : "array",
          "description" : "Markets list",
          "items" : {
            "$ref" : "#/definitions/MarketInfo"
          }
        }
      },
      "description" : "model.GetMarketsResponseV3.description"
    },
    "AmmPoolInfoV3" : {
      "type" : "object",
      "required" : [ "address", "createdAt", "feeBips", "market", "name", "precisions", "status", "tokens", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "LRC-USDT-Pool-1",
          "description" : "AMM pool name, used to calculate domainSeparator of EIP712 hash if use chooses ECDSA sign path."
        },
        "market" : {
          "type" : "string",
          "example" : "AMM-LRC-USDT",
          "description" : "AMM pool market name, can be used to query market related info like ticker, etc"
        },
        "address" : {
          "type" : "string",
          "example" : "0xa6fa83b62b09174694EFD7EE3aE608ad478a138E",
          "description" : "AMM pool address"
        },
        "version" : {
          "type" : "string",
          "example" : "1.0.0",
          "description" : "AMM pool contract version"
        },
        "tokens" : {
          "example" : "{[2,3],5}",
          "description" : "AMM pool token info",
          "$ref" : "#/definitions/AmmPoolTokens"
        },
        "feeBips" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "AMM fee bips"
        },
        "precisions" : {
          "example" : "{price:6, amount: 8}",
          "description" : "AMM pool precision configuration",
          "$ref" : "#/definitions/AmmPoolPrecisions"
        },
        "createdAt" : {
          "type" : "string",
          "example" : "1609466400000",
          "description" : "AMM pool online date"
        },
        "status" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 7,
          "description" : "AMM market status"
        }
      },
      "description" : "AMM pool info"
    },
    "AmmPoolPrecisions" : {
      "type" : "object",
      "required" : [ "amount", "price" ],
      "properties" : {
        "price" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "The price precision requirement of a AMM pool"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 6,
          "description" : "The amount precision requirement of a AMM pool"
        }
      },
      "description" : "The precision requirement of a AMM pool"
    },
    "AmmPoolTokens" : {
      "type" : "object",
      "required" : [ "lp", "pooled" ],
      "properties" : {
        "pooled" : {
          "type" : "array",
          "example" : "[2,3,5]",
          "description" : "An array containing the unique identifiers of those tokens that are currently in the pool, seq matters as most requests ask for the same sequence.",
          "items" : {
            "type" : "object"
          }
        },
        "lp" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "The unique identifier of the pool-specific LP token. This token is minted when supplying liquidity to the pool, and represents liquidity stakes in it"
        }
      },
      "description" : "Wrapper object containing information about the tokens in the pool"
    },
    "GetAmmPoolsResponse" : {
      "type" : "object",
      "required" : [ "pools" ],
      "properties" : {
        "pools" : {
          "type" : "array",
          "description" : "AMM pool list",
          "items" : {
            "$ref" : "#/definitions/AmmPoolInfoV3"
          }
        }
      },
      "description" : "model.GetAmmPoolsResponse.description"
    },
    "OrderDetailV3" : {
      "type" : "object",
      "required" : [ "clientOrderId", "hash", "market", "orderType", "price", "side", "status", "tradeChannel", "validity", "volumes" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "0xfb5e711c2f044e94322ed262229cd8f0d0da00c22e1a00a0f5d881e45a38e1cf",
          "description" : "Order hash"
        },
        "clientOrderId" : {
          "type" : "string",
          "example" : "200310143135081332",
          "description" : "Order's client-side ID"
        },
        "side" : {
          "type" : "string",
          "example" : "SELL",
          "description" : "Order's side",
          "enum" : [ "SELL", "BUY" ]
        },
        "market" : {
          "type" : "string",
          "example" : "LRC-ETH",
          "description" : "Trading pair"
        },
        "price" : {
          "type" : "string",
          "example" : "0.01987608",
          "description" : "Order price"
        },
        "volumes" : {
          "example" : "0",
          "description" : "Wraps data regarding the orders volumes (base, quote, and filled.)",
          "$ref" : "#/definitions/OrderVolumesV3"
        },
        "validity" : {
          "example" : "{start: 1234, end: 2345}",
          "description" : "Wraps data regarding time validity constraints (since and until)",
          "$ref" : "#/definitions/OrderValidityV3"
        },
        "orderType" : {
          "type" : "string",
          "example" : "LIMIT_ORDER",
          "description" : "Whether the order has to be treated as a limit, maker, or taker operation.",
          "enum" : [ "LIMIT_ORDER", "TAKER_ONLY", "MAKER_ONLY" ]
        },
        "tradeChannel" : {
          "type" : "string",
          "example" : "ORDER_BOOK",
          "description" : "field.SubmitOrderRequestV3.tradeChannel",
          "enum" : [ "ORDER_BOOK", "AMM_POOL", "MIXED" ]
        },
        "status" : {
          "type" : "string",
          "example" : "processing",
          "description" : "Order status",
          "enum" : [ "processing", "processed", "cancelling", "cancelled", "expired", "waiting" ]
        }
      },
      "description" : "Response details of order"
    },
    "OrderValidityV3" : {
      "type" : "object",
      "required" : [ "end", "start" ],
      "properties" : {
        "start" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Timestamp from when the order officially becomes valid and fillable"
        },
        "end" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Timestamp from when the order ceases to be valid and fillable"
        }
      },
      "description" : "Wraps data regarding time validity constraints (since and until"
    },
    "OrderVolumesV3" : {
      "type" : "object",
      "required" : [ "baseAmount", "baseFilled", "fee", "quoteAmount", "quoteFilled" ],
      "properties" : {
        "baseAmount" : {
          "type" : "string",
          "example" : "0",
          "description" : "The amount of base tokens involved in the order."
        },
        "quoteAmount" : {
          "type" : "string",
          "example" : "0",
          "description" : "The amount of quote tokens involved in the order."
        },
        "baseFilled" : {
          "type" : "string",
          "example" : "0",
          "description" : "The amount of requested base tokens filled in the order."
        },
        "quoteFilled" : {
          "type" : "string",
          "example" : "0",
          "description" : "The amount of requested quote tokens filled in the order."
        },
        "fee" : {
          "type" : "string",
          "example" : "0",
          "description" : "The amount of quote or base token amount used to pay for the orders fee. Whether this data refers to the base or quote token, one can find out by looking at the orders side"
        }
      },
      "description" : "Wraps data regarding the orders volumes (base, quote, and filled.)"
    },
    "OrdersDetailV3" : {
      "type" : "object",
      "required" : [ "totalNum" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10,
          "description" : "Total number of orders"
        },
        "orders" : {
          "type" : "array",
          "description" : "List of order",
          "items" : {
            "$ref" : "#/definitions/OrderDetailV3"
          }
        }
      },
      "description" : "Response orders"
    },
    "DepthV3" : {
      "type" : "object",
      "required" : [ "asks", "bids", "market", "timestamp", "version" ],
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 147,
          "description" : "An ever-increasing numeric version number that reflects its change history."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 432312312,
          "description" : "Update timestamp"
        },
        "market" : {
          "type" : "string",
          "example" : "LRC-ETH",
          "description" : "Trading pair"
        },
        "bids" : {
          "type" : "array",
          "example" : "[[\"0.002\",\"21000\",\"33220000\",\"4\"]]",
          "description" : "Array of bids, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "asks" : {
          "type" : "array",
          "example" : "[]",
          "description" : "Array of asks, each item is an array that contains the price, size, volume and the number of orders aggregated at this price.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Order book info"
    },
    "GetTickerResponseV3" : {
      "type" : "object",
      "properties" : {
        "tickers" : {
          "type" : "array",
          "example" : "[[\"LRC-ETH\", \"1584565505000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\",\"1000\", \"0\", \"0\"]]",
          "description" : "Each item in the list is an array that contains the following: trading pair ID, update timestamp, base token volume, quote token volume, open-price, highest price, lowest price, closing price, number of trades, highest bid price, lowest ask price, base fee amount, quote fee amount. All values are returned as strings. Fee amount is for AMM only.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "model.getTicker.description"
    },
    "GetPriceResponseV3" : {
      "type" : "object",
      "properties" : {
        "prices" : {
          "type" : "array",
          "description" : "field.GetPriceResponseV3.prices",
          "items" : {
            "$ref" : "#/definitions/PriceV3"
          }
        }
      },
      "description" : "model.GetPriceResponseV3"
    },
    "PriceV3" : {
      "type" : "object",
      "required" : [ "price", "symbol", "updatedAt" ],
      "properties" : {
        "symbol" : {
          "type" : "string",
          "example" : "LRC",
          "description" : "Token symbol"
        },
        "price" : {
          "type" : "string",
          "example" : "0",
          "description" : "Fiat price"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Last update timestamp"
        }
      },
      "description" : "Token fiat price"
    },
    "MarketTradesV3" : {
      "type" : "object",
      "required" : [ "totalNum", "trades" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The total number of trades in query result"
        },
        "trades" : {
          "type" : "array",
          "example" : "[[\"0\",\"0\",\"BUY\",\"0\",\"0\",\"LRC-USDT\",\"0\"]]",
          "description" : "List of trades records, each trade record in the order of the array is the trade time, record id, buying and selling direction, volume, price, market and fees",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "model.marketTrades"
    },
    "GetCandlestickResponseV3" : {
      "type" : "object",
      "properties" : {
        "candlesticks" : {
          "type" : "array",
          "example" : "[[\"1584565500000\",\"5\",\"1.5\",\"5.5\",\"8.8\",\"0.5\",\"0.5\",\"0.5\"]]",
          "description" : "Candlestick data, each set of data includes start time, number of transactions, opening price, closing price, highest price, lowest price, total transaction volume of Base Token, total transaction volume of Quote Token",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "The response of query Candlestick data"
    },
    "DexAccountV3" : {
      "type" : "object",
      "required" : [ "accountId", "frozen", "nonce", "owner", "publicKey" ],
      "properties" : {
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10,
          "description" : "Account ID"
        },
        "owner" : {
          "type" : "string",
          "example" : "0xABCD",
          "description" : "Ethereum address"
        },
        "frozen" : {
          "type" : "boolean",
          "example" : false,
          "description" : "The frozen state of the account, true stands for frozen, if the account is frozen, the user cant submit order."
        },
        "publicKey" : {
          "example" : "{x:0x241707bcc6d7a4ccf10304be248d343a527e85f61b45d721544d027cc1f2fb5f,y:0x302f3a521dbdd1d0eb1944c8323d4ac3b3e9c9201f4aa43a2565054886369d9c}",
          "description" : "The user's public key",
          "$ref" : "#/definitions/PublicKey"
        },
        "tags" : {
          "type" : "string",
          "example" : "vip_1",
          "description" : "Comma separated list of tags such as VIP levels, etc"
        },
        "nonce" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "field.DexAccountV3.nonce"
        }
      },
      "description" : "User information"
    },
    "GetApiKeyResponseV3" : {
      "type" : "object",
      "required" : [ "apiKey" ],
      "properties" : {
        "apiKey" : {
          "type" : "string",
          "example" : "6BJaCehh0z4ta4TW5vwoKyo0yk5FdXkQxpt8AStG49aU3dMNC9jid6syyWPEMtTt",
          "description" : "ApiKey"
        }
      },
      "description" : "The Response of updating user's ApiKey"
    },
    "OffChainWithdrawalRequestV3" : {
      "type" : "object",
      "required" : [ "accountId", "exchange", "maxFee", "minGas", "owner", "storageId", "to", "token", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "exchange address"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1003,
          "description" : "account ID"
        },
        "owner" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "account owner address"
        },
        "token" : {
          "example" : "{tokenId: 0, volume: 1000000}",
          "description" : "token to be withdrawal",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "maxFee" : {
          "example" : "{tokenId: 0, volume: 1000000}",
          "description" : "maximum fee of withdrawal",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "offchain ID"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1519217383,
          "description" : "Timestamp for order to become invalid"
        },
        "minGas" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1519217383,
          "description" : "min gas for on-chain withdraw, Loopring exchange allocates gas for each distribution, but people can also assign this min gas, so Loopring have to allocate higher gas value for this specific distribution, 0 means let loopring choose the reasonable gas"
        },
        "to" : {
          "type" : "string",
          "example" : "0x12345678",
          "description" : "withdraw to address"
        },
        "extraData" : {
          "type" : "string",
          "example" : "0xABCD1234",
          "description" : "extra data for complex withdraw mode, normally none"
        },
        "fastWithdrawalMode" : {
          "type" : "boolean",
          "example" : false,
          "description" : "is fast withdraw mode"
        },
        "eddsaSignature" : {
          "type" : "string",
          "example" : "0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02",
          "description" : "eddsa signature"
        },
        "ecdsaSignature" : {
          "type" : "string",
          "example" : "0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9",
          "description" : "ecdsa signature"
        },
        "hashApproved" : {
          "type" : "string",
          "example" : "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085",
          "description" : "An approved hash string which was already submitted on eth mainnet"
        }
      }
    },
    "GetUserFeeRatesResponseData" : {
      "type" : "object",
      "properties" : {
        "feeRate" : {
          "example" : "{symbol:LRC-ETH, makerRate:0, takerRate:25}",
          "description" : "field.getUserFeeRatesResponseData.feeRate",
          "$ref" : "#/definitions/FeeRate"
        },
        "gasPrice" : {
          "type" : "string",
          "example" : "10000000000",
          "description" : "field.getUserFeeRatesResponseData.gasPrice"
        }
      }
    },
    "GetMixedMarketsResponseV3" : {
      "type" : "object",
      "required" : [ "markets" ],
      "properties" : {
        "markets" : {
          "type" : "array",
          "description" : "Markets list",
          "items" : {
            "$ref" : "#/definitions/CombineMarketInfo"
          }
        }
      },
      "description" : "model.GetMarketsResponseV3.description"
    },
    "AmmPoolJoinRequestV3" : {
      "type" : "object",
      "required" : [ "fee", "joinTokens", "owner", "poolAddress", "storageIds", "validUntil" ],
      "properties" : {
        "owner" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "The account owner adderss"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "AMM pool address to be joined"
        },
        "joinTokens" : {
          "example" : "{\"pooled\": [{\"id\": 0,\"amount\": 0}],\"minimumLp\": 0}",
          "description" : "Token amounts to be joined and the minimum mint token to be paied back",
          "$ref" : "#/definitions/AmmPoolJoinTokens"
        },
        "storageIds" : {
          "type" : "string",
          "example" : "1",
          "description" : "Offchain request storage Id"
        },
        "fee" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "field.AmmPoolJoinRequestV3.fee"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "Timestamp for order to become invalid"
        },
        "eddsaSignature" : {
          "type" : "string",
          "example" : "0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02",
          "description" : "AMM join request eddsa signature"
        },
        "ecdsaSignature" : {
          "type" : "string",
          "example" : "0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9",
          "description" : "AMM join request ecdsa signature"
        }
      },
      "description" : "Join request which contains parameters and constraints that a user wants to see satisfied in order to join an AMM liquidity pool."
    },
    "AmmPoolJoinTokens" : {
      "type" : "object",
      "required" : [ "minimumLp", "pooled" ],
      "properties" : {
        "pooled" : {
          "type" : "array",
          "example" : "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]",
          "description" : "Describes an amount of a specific token to be supplied to the pool, the seq matters, and must be the same as the pool token list returned by pool info",
          "items" : {
            "$ref" : "#/definitions/TokenVolumeV3"
          }
        },
        "minimumLp" : {
          "type" : "string",
          "example" : "1000000000",
          "description" : "The minimum amoun of LP token desired in exchange for supplying liquidity to the pool"
        }
      },
      "description" : "escribes an AMM join transaction"
    },
    "AmmPoolExitRequestV3" : {
      "type" : "object",
      "required" : [ "exitTokens", "maxFee", "owner", "poolAddress", "storageId", "validUntil" ],
      "properties" : {
        "owner" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "The account owner adderss"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0xe25c94ba036d91b48833acb637f719038f07372d",
          "description" : "AMM pool address to be joined"
        },
        "exitTokens" : {
          "example" : "{\"burned\": 0,\"unpooled\": [{\"id\": 0,\"amount\": 0}]}",
          "description" : "Exit token amounts, include mint token to burn and the minimum exit tokens to be get back",
          "$ref" : "#/definitions/AmmPoolExitTokens"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Offchain request storage Id"
        },
        "maxFee" : {
          "type" : "string",
          "example" : "1000000000000000000",
          "description" : "Maximum fee of exit request, use the last in pool token by default"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1598431481,
          "description" : "Timestamp for order to become invalid"
        },
        "eddsaSignature" : {
          "type" : "string",
          "example" : "0xccf0a141fce2dc5cbbd4f802c52220e9e2ce260e86704d6258603eb346eefe2d4a450005c362b223b28402d087f7065ea5eee0314531adf6a580fce64c25dca81c02",
          "description" : "AMM exit request eddsa signature"
        },
        "ecdsaSignature" : {
          "type" : "string",
          "example" : "0xeb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9eb14773e8a07d19bc4fe56e36d041dcb002652f7e92160deaf5e6bf21e05c7a9",
          "description" : "AMM exit request ecdsa signature"
        }
      }
    },
    "AmmPoolExitTokens" : {
      "type" : "object",
      "required" : [ "burned", "unPooled" ],
      "properties" : {
        "unPooled" : {
          "type" : "array",
          "example" : "[{tokenId:0, volume: 100000},{tokenId:0, volume: 100000}]",
          "description" : "Describes list of the amount of a specific token to be removed from the pool, tokens seq should be same as AMM pool info",
          "items" : {
            "$ref" : "#/definitions/TokenVolumeV3"
          }
        },
        "burned" : {
          "type" : "string",
          "example" : "1000000000",
          "description" : "The minimum amoun of LP token to burn"
        }
      },
      "description" : "escribes an AMM join transaction"
    },
    "UserBill" : {
      "type" : "object",
      "required" : [ "amount", "amountF", "billType", "from", "id", "income", "label", "memo", "price", "status", "timestamp", "to", "token", "tokenF", "transferType", "txHash" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "from" : {
          "type" : "string"
        },
        "to" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "string"
        },
        "tokenF" : {
          "type" : "string"
        },
        "amountF" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "txHash" : {
          "type" : "string"
        },
        "billType" : {
          "type" : "string"
        },
        "income" : {
          "type" : "boolean"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "memo" : {
          "type" : "string"
        },
        "price" : {
          "type" : "string"
        },
        "transferType" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        }
      }
    },
    "UserBillList" : {
      "type" : "object",
      "required" : [ "bills", "totalNum" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64"
        },
        "bills" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserBill"
          }
        }
      }
    },
    "AmmTransactionDataListV3" : {
      "type" : "object",
      "required" : [ "totalNum", "transactions" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 10,
          "description" : "Number of AMM pool transactions"
        },
        "transactions" : {
          "type" : "array",
          "description" : "List of AMM pool transactions",
          "items" : {
            "$ref" : "#/definitions/AmmTransactionDataV3"
          }
        }
      },
      "description" : "Contains one or multiple AMM pool transactions."
    },
    "AmmTransactionDataV3" : {
      "type" : "object",
      "required" : [ "ammLayerType", "ammPoolAddress", "createdAt", "hash", "lpToken", "poolTokens", "txStatus", "txType", "updatedAt" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085",
          "description" : "AMM transaction hash"
        },
        "txType" : {
          "type" : "string",
          "example" : "join",
          "description" : "AMM transaction type, i.e., join, exit, etc",
          "enum" : [ "join", "exit" ]
        },
        "txStatus" : {
          "type" : "string",
          "example" : "processing",
          "description" : "AMM transaction processing status, i.e., processing, processed, failed, etc",
          "enum" : [ "processing", "cancelled", "processed" ]
        },
        "ammPoolAddress" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "AMM pool address of query"
        },
        "ammLayerType" : {
          "type" : "string",
          "example" : "layer_2",
          "description" : "AMM transaction layer, 1 or 2",
          "enum" : [ "layer_1", "layer_2" ]
        },
        "poolTokens" : {
          "type" : "array",
          "description" : "The in pool tokens transfers records of the AMM transaction",
          "items" : {
            "$ref" : "#/definitions/AmmTransferDataV3"
          }
        },
        "lpToken" : {
          "description" : "The lp tokens transfers records of the AMM transaction",
          "$ref" : "#/definitions/AmmTransferDataV3"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1608189538074,
          "description" : "Transaction creation time"
        },
        "updatedAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1608209538074,
          "description" : "Transaction update time"
        }
      },
      "description" : "AMM transaction info data"
    },
    "AmmTransferDataV3" : {
      "type" : "object",
      "required" : [ "actualAmount", "amount", "feeAmount", "tokenId" ],
      "properties" : {
        "tokenId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "AMM transfer token id"
        },
        "amount" : {
          "type" : "string",
          "example" : "1000000",
          "description" : "AMM transfer token amount"
        },
        "actualAmount" : {
          "type" : "string",
          "example" : "100000",
          "description" : "Actual AMM transfer token amount due to precision processing"
        },
        "feeAmount" : {
          "type" : "string",
          "example" : "500000",
          "description" : "Actual AMM transfer fee amount"
        }
      },
      "description" : "AMM transfer info data"
    },
    "AmmTradeDataListV3" : {
      "type" : "object",
      "required" : [ "totalNum", "trades" ],
      "properties" : {
        "totalNum" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 12345,
          "description" : "Number of trades"
        },
        "trades" : {
          "type" : "array",
          "description" : "AMM trade list",
          "items" : {
            "$ref" : "#/definitions/AmmTradeDataV3"
          }
        }
      },
      "description" : "Trading list of AMM pool"
    },
    "AmmTradeDataV3" : {
      "type" : "object",
      "required" : [ "accountId", "createdAt", "feeAmount", "market", "orderHash", "price", "side", "size" ],
      "properties" : {
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 12345,
          "description" : "trader's accountId"
        },
        "orderHash" : {
          "type" : "string",
          "example" : "0xf7c932351186c3a9053f313eefa16209c018f7f1dba8aa8ca7100400f7c31085",
          "description" : "AMM trade's order hash"
        },
        "market" : {
          "type" : "string",
          "example" : "AMM-DAI-ETH",
          "description" : "The trade market"
        },
        "side" : {
          "type" : "string",
          "example" : "BUY",
          "description" : "The trade direction, buy or sell",
          "enum" : [ "BUY", "SELL" ]
        },
        "size" : {
          "type" : "string",
          "example" : "100000000",
          "description" : "The trade volume"
        },
        "price" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.03,
          "description" : "The trade price"
        },
        "feeAmount" : {
          "type" : "string",
          "example" : "100000000",
          "description" : "The trade fee"
        },
        "createdAt" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1608189538074,
          "description" : "The trade's creation time"
        }
      },
      "description" : "AMM trade info data"
    },
    "SubmitOrderResponseItemV3" : {
      "type" : "object",
      "required" : [ "clientOrderId", "hash", "isIdempotent", "status" ],
      "properties" : {
        "hash" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "Order hash of submit order response"
        },
        "clientOrderId" : {
          "type" : "string",
          "example" : "client_order_id",
          "description" : "The clientOrderId of the submitted order"
        },
        "status" : {
          "type" : "string",
          "example" : "cancelled",
          "description" : "Order status of submit order response",
          "enum" : [ "processing", "processed", "cancelling", "cancelled", "expired", "failed" ]
        },
        "isIdempotent" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Idempotent of submit order response, submit same order again when order was UNKNOWN or WAIT_FREEZE_BALANCE in relayer, idempotent will be true",
          "enum" : [ true, false ]
        }
      },
      "description" : "Submit order response detail"
    },
    "SubmitOrderRequestV3" : {
      "type" : "object",
      "required" : [ "accountId", "allOrNone", "buyToken", "eddsaSignature", "exchange", "fillAmountBOrS", "maxFeeBips", "sellToken", "storageId", "validUntil" ],
      "properties" : {
        "exchange" : {
          "type" : "string",
          "example" : "1",
          "description" : "The adderss of the exchange which has to process this order"
        },
        "accountId" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Loopring's account ID"
        },
        "storageId" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "The unique identifier of the L2 Merkle tree storage slot where the burn made in order to exit the pool will or has been stored."
        },
        "sellToken" : {
          "example" : "TokenVolume{tokenId: 0, volume: 1234}",
          "description" : "Wrapper object used to describe a token associated with a certain quantity.",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "buyToken" : {
          "example" : "TokenVolume{tokenId: 0, volume: 1234}",
          "description" : "Wrapper object used to describe a token associated with a certain quantity.",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "allOrNone" : {
          "type" : "string",
          "example" : "false",
          "description" : "Whether the order supports partial fills or not.Currently only supports false as a valid value"
        },
        "fillAmountBOrS" : {
          "type" : "string",
          "example" : "true",
          "description" : "Fill size by buy token or by sell token"
        },
        "validUntil" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1567053142,
          "description" : "Order expiration time, accuracy is in seconds"
        },
        "maxFeeBips" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 20,
          "description" : "Maximum order fee that the user can accept, value range (in ten thousandths) 1 ~ 63"
        },
        "eddsaSignature" : {
          "type" : "string",
          "example" : "13375450901292179417154974849571793069911517354720397125027633242680470075859",
          "description" : "The orders EdDSA signature. The signature is a hexadecimal string obtained by signing the order itself and concatenating the resulting signature parts (Rx, Ry, and S). Used to authenticate and authorize the operation."
        },
        "clientOrderId" : {
          "type" : "string",
          "example" : "1",
          "description" : "An arbitrary, client-set unique order identifier, max length is 120 bytes"
        },
        "orderType" : {
          "type" : "string",
          "example" : "LIMIT_ORDER",
          "description" : "Order types, can be AMM, LIMIT_ORDER, MAKER_ONLY, TAKER_ONLY",
          "enum" : [ "LIMIT_ORDER", "TAKER_ONLY", "MAKER_ONLY", "AMM" ]
        },
        "tradeChannel" : {
          "type" : "string",
          "example" : "ORDER_BOOK",
          "description" : "field.SubmitOrderRequestV3.tradeChannel",
          "enum" : [ "ORDER_BOOK", "AMM_POOL", "MIXED" ]
        },
        "taker" : {
          "type" : "string",
          "example" : "0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18",
          "description" : "Used by the P2P order which user specify the taker, so far its 0x0000000000000000000000000000000000000000"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0x506d67A6f22927a2DAa20a9510EA73D5E66Baf18",
          "description" : "The AMM pool address if order type is AMM"
        },
        "affiliate" : {
          "type" : "string",
          "example" : "10068",
          "description" : "field.SubmitOrderRequestV3.affiliate"
        }
      },
      "description" : "Describes an orders structure."
    },
    "AmmPoolBalanceV3" : {
      "type" : "object",
      "required" : [ "lp", "poolAddress", "poolName", "pooled", "risky" ],
      "properties" : {
        "poolName" : {
          "type" : "string",
          "example" : "AMM-LRC-ETH",
          "description" : "field.AmmSnapshot.poolName"
        },
        "poolAddress" : {
          "type" : "string",
          "example" : "0xbbbbca6a901c926f240b89eacb641d8aec7aeafd",
          "description" : "field.AmmSnapshot.poolAddress"
        },
        "pooled" : {
          "type" : "array",
          "example" : "[{tokenId: 0, volume:1000000000}, {tokenId: 1, volume:1000000000}]",
          "description" : "AMM in pool tokens balances",
          "items" : {
            "$ref" : "#/definitions/TokenVolumeV3"
          }
        },
        "lp" : {
          "example" : "{tokenId: 0, volume:1000000000}",
          "description" : "AMM pool mint token balance",
          "$ref" : "#/definitions/TokenVolumeV3"
        },
        "risky" : {
          "type" : "boolean",
          "example" : false,
          "description" : "AMM pool risky flag, true if AMM pool TVL is low which means big slippage."
        }
      },
      "description" : "Describes both pooled token balances for a given pool and minted LP tokens amount."
    },
    "TimestampV3" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1584683483382,
          "description" : "Current time in millisecond"
        }
      },
      "description" : "model.timestampV3.description"
    }
  }
}